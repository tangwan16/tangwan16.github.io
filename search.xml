<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据挖掘 数据库</title>
      <link href="/2024/04/11/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2024/04/11/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="SQLite数据库"><a href="#SQLite数据库" class="headerlink" title="SQLite数据库"></a>SQLite数据库</h2><p>特点：<br>开源的关系型数据库<br>将整个数据库的表，索引，数据都存储在一个单一的.db文件中<br>不需要网络配置和管理<br>没有账户和密码<br>数据库访问依赖于文件所在的操作系统<br>和数据库建立连接<br> 执行sql语句，接收返回值<br> 关闭数据库连接 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;trade.db&#x27;</span>)</span><br><span class="line">SQL =<span class="string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line">conn.execute(SQL)</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2 id="SQLite数据库操作"><a href="#SQLite数据库操作" class="headerlink" title="SQLite数据库操作"></a>SQLite数据库操作</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SQL= <span class="string">&#x27;&#x27;&#x27; drop table if exists stock&#x27;&#x27;&#x27;</span></span><br><span class="line">conn.execute(SQL)</span><br><span class="line">conn.commit()</span><br><span class="line">SQL=<span class="string">&#x27;&#x27;&#x27;create table stock (code char(8) not null,</span></span><br><span class="line"><span class="string">name char(10),price float, primary key(&quot;code&quot;))&#x27;&#x27;&#x27;</span></span><br><span class="line">conn.execute(SQL)</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><h3 id="查询记录"><a href="#查询记录" class="headerlink" title="查询记录"></a>查询记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SQL = <span class="string">&#x27;&#x27;&#x27;select title,link from info where title like &quot;东方%&quot; &#x27;&#x27;&#x27;</span></span><br><span class="line">alist = <span class="built_in">list</span>(conn.execute(SQL))</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><h3 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SQL =<span class="string">&#x27;&#x27;&#x27;insert into stock(code,name,price)</span></span><br><span class="line"><span class="string">values(&#x27;2349&#x27;,&#x27;精华制药&#x27;,10.49)&#x27;&#x27;&#x27;</span></span><br><span class="line">SQL = <span class="string">&#x27;&#x27;&#x27;insert into stock(code,name,price) values(%d,&#x27;%s&#x27;,%f)&#x27;&#x27;&#x27;</span> %(code,name,</span><br><span class="line">price)</span><br><span class="line">conn.execute(SQL)</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">info = <span class="built_in">tuple</span>(into)</span><br><span class="line">result.append(info)</span><br><span class="line">result = <span class="built_in">list</span>(<span class="built_in">set</span>(result))</span><br><span class="line">SQL = <span class="string">&#x27;&#x27;&#x27;insert into stock(code,name,price)values(?,?,?)&#x27;&#x27;&#x27;</span></span><br><span class="line">conn.exexcutemany(SQL,result)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL = <span class="string">&#x27;&#x27;&#x27;update stock set price=11.5 where code = &#x27;2349&#x27; &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL = <span class="string">&#x27;&#x27;&#x27;delete from stock where code =&#x27;2349&#x27; &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL = <span class="string">&#x27;&#x27;&#x27;drop table stock&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="数据库操作实例"><a href="#数据库操作实例" class="headerlink" title="数据库操作实例"></a>数据库操作实例</h2><p>实例1<br>爬虫并存入数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3,re,requests</span><br><span class="line">url = <span class="string">&#x27;https://www.eastmoney.com/&#x27;</span></span><br><span class="line">html = requests.get(url)</span><br><span class="line">html.encoding = html.apparent_encoding</span><br><span class="line">data = html.text</span><br><span class="line">reg = <span class="string">r&#x27;&lt;a href=&quot;(https://.*?)&quot;.*?&gt;(.*?)&lt;/a&gt;&#x27;</span></span><br><span class="line">urls = re.findall(reg,data)</span><br><span class="line">conn = sqlite3.connect(<span class="string">&quot;web.db&quot;</span>)</span><br><span class="line">SQL = <span class="string">&quot;drop table if exists info&quot;</span></span><br><span class="line">conn.execute(SQL)</span><br><span class="line">conn.commit()</span><br><span class="line">SQL = <span class="string">&#x27;&#x27;&#x27;create table info(code integer not null,link char(30),title char(30),primary key(&#x27;code&#x27;))&#x27;&#x27;&#x27;</span></span><br><span class="line">conn.execute(SQL)</span><br><span class="line">conn.commit()</span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    SQL =<span class="string">&#x27;&#x27;&#x27;insert into info(code,link,title) values(%d,&#x27;%s&#x27;,&#x27;%s&#x27;)&#x27;&#x27;&#x27;</span>%(count,url[<span class="number">0</span>],url[<span class="number">1</span>])</span><br><span class="line">    conn.execute(SQL)</span><br><span class="line">    conn.commit()</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>实例2 百度多公司多页面爬取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re,requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">baidu</span>(<span class="params">company,page</span>):</span><br><span class="line">    num = page*<span class="number">10</span></span><br><span class="line">    url = <span class="string">&quot;http://www.baidu.com/s?tn=news&amp;rtt=4&amp;wd=&quot;</span>+company+<span class="string">&#x27;&amp;pn=&#x27;</span>+<span class="built_in">str</span>(num)</span><br><span class="line">    html = requests.get(url).text</span><br><span class="line">    <span class="comment"># 链接</span></span><br><span class="line">    reg_href =<span class="string">&#x27;&lt;h3 class=&quot;news-title_1YtI1 &quot;&gt;&lt;a href=&quot;(.*?)&quot;&#x27;</span></span><br><span class="line">    href = re.findall(reg_href,html,re.S)</span><br><span class="line">    <span class="comment"># 标题</span></span><br><span class="line">    reg_title =<span class="string">&#x27;&lt;h3 class=&quot;news-title_1YtI1 &quot;&gt;.*?&gt;&lt;!--s-text--&gt;(.*?)&lt;!--/s-text--&gt;&lt;/a&gt;&#x27;</span></span><br><span class="line">    title = re.findall(reg_title,html,re.S)</span><br><span class="line">    reg_date =<span class="string">&#x27;&lt;span class=&quot;c-color-gray2 c-font-normal c-gap-right-xsmall&quot;.*?&gt;(.*?)&lt;/span&gt;&#x27;</span></span><br><span class="line">    date = re.findall(reg_date,html,re.S)</span><br><span class="line">    reg_src = <span class="string">&#x27;&lt;span class=&quot;c-color-gray&quot;.*?&gt;(.*?)&lt;/span&gt;&#x27;</span></span><br><span class="line">    src = re.findall(reg_src,html,re.S)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(date)):</span><br><span class="line">        title[i]=title[i].strip()</span><br><span class="line">        title[i] = re.sub(<span class="string">&#x27;&lt;.*?&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,title[i])</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;小时&#x27;</span><span class="keyword">in</span> date[i]) <span class="keyword">or</span> (<span class="string">&#x27;分钟&#x27;</span><span class="keyword">in</span> date[i]):</span><br><span class="line">            date[i]=time.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(i+<span class="number">1</span>)+<span class="string">&#x27;.&#x27;</span>+title[i]+<span class="string">&#x27;(&#x27;</span>+date[i]+src[i]+<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(href[i])</span><br><span class="line">companys = [<span class="string">&#x27;阿里巴巴&#x27;</span>, <span class="string">&#x27;万科集团&#x27;</span>, <span class="string">&#x27;百度集团&#x27;</span>, <span class="string">&#x27;腾讯&#x27;</span>, <span class="string">&#x27;京东&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> com <span class="keyword">in</span> companys:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        baidu(com,i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;爬取&quot;</span>+com+<span class="built_in">str</span>(i+<span class="number">1</span>)+<span class="string">&quot;页成功&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>错误处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">&lt;语句块<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">except</span> &lt;异常类型<span class="number">1</span>&gt;:</span><br><span class="line">&lt;语句块<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">&lt;语句块<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">&lt;句块<span class="number">4</span>&gt;</span><br><span class="line"><span class="comment"># finally，无论有没有报错都执行，</span></span><br><span class="line"><span class="comment"># except可以多个</span></span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    filename = <span class="built_in">input</span>(<span class="string">&quot;please input filename:&quot;</span>)</span><br><span class="line">    fobj = <span class="built_in">open</span>(filename,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fobj:</span><br><span class="line">        line = line.strip()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有这个文件&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    fobj.close()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;程序执行完毕&quot;</span>)</span><br><span class="line"></span><br><span class="line">companys = [<span class="string">&#x27;阿里巴巴&#x27;</span>, <span class="string">&#x27;万科集团&#x27;</span>, <span class="string">&#x27;腾讯&#x27;</span>, <span class="string">&#x27;京东&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> companys:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">baidu(each,i)</span><br><span class="line"><span class="built_in">print</span>(each + <span class="string">&#x27;第&#x27;</span> + <span class="built_in">str</span>(i+<span class="number">1</span>) + <span class="string">&#x27;页爬取成功&#x27;</span>)</span><br><span class="line">time. sleep(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(each+<span class="string">&#x27;爬虫失败！ &#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><p>关系型数据库，在WEB方面十分流行<br>连接<br>1 创建connection<br>2 获取cursor<br>3 执行SQL语句<br>4 关闭cursor<br>5 关闭connection</p><h2 id="MySQL数据库操作"><a href="#MySQL数据库操作" class="headerlink" title="MySQL数据库操作"></a>MySQL数据库操作</h2><h3 id="MySQL创建表"><a href="#MySQL创建表" class="headerlink" title="MySQL创建表"></a>MySQL创建表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">conn = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>,user=<span class="string">&quot;root&quot;</span>,password=<span class="string">&quot;1234&quot;</span>,</span><br><span class="line">                       database=<span class="string">&quot;pymysql&quot;</span>)</span><br><span class="line">cur = conn.cursor()</span><br><span class="line">sql = <span class="string">&quot;drop table if exists staff&quot;</span></span><br><span class="line">cur.execute(sql)</span><br><span class="line">sql = <span class="string">&#x27;&#x27;&#x27;create table staff(number char(10) primary key,</span></span><br><span class="line"><span class="string">                            name char(20),</span></span><br><span class="line"><span class="string">                            age int,</span></span><br><span class="line"><span class="string">                            sex char(1),</span></span><br><span class="line"><span class="string">                            salary float)&#x27;&#x27;&#x27;</span></span><br><span class="line">cur.execute(sql)</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="MySQL中插入数据"><a href="#MySQL中插入数据" class="headerlink" title="MySQL中插入数据"></a>MySQL中插入数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL中插入数据</span></span><br><span class="line">sql = <span class="string">&#x27;&#x27;&#x27;insert into staff(number,name,age,sex,salary)</span></span><br><span class="line"><span class="string">        values(&#x27;1001&#x27;,&#x27;张三&#x27;,28,&#x27;M&#x27;,7078.5)&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    conn.rollback()</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入多条数据</span></span><br><span class="line">aList=[(<span class="string">&quot;1002&quot;</span>,<span class="string">&quot;Mike&quot;</span>,<span class="number">35</span>,<span class="string">&quot;M&quot;</span>,<span class="number">10000</span>),(<span class="string">&quot;1003&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="number">45</span>,<span class="string">&quot;F&quot;</span>,<span class="number">12000</span>)]</span><br><span class="line">sql=<span class="string">&#x27;&#x27;&#x27;insert into staff(number,name,age,sex,salary)</span></span><br><span class="line"><span class="string">        values(%s,%s,%s,%s,%s)&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cur.executemany(sql,aList)</span><br><span class="line">    conn.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    conn.rollback()</span><br></pre></td></tr></table></figure><h3 id="MySQL查找"><a href="#MySQL查找" class="headerlink" title="MySQL查找"></a>MySQL查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cond = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入工资:&quot;</span>))</span><br><span class="line">sql = <span class="string">&#x27;&#x27;&#x27;select * from staff where salary &gt;%f&#x27;&#x27;&#x27;</span>%cond</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    res = cur.fetchall() <span class="comment"># 获取所有记录列表</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> res:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;number=%s,name=%s,age=%d,sex=%s,salary=%f&quot;</span> % \</span><br><span class="line">              (row[<span class="number">0</span>], row[<span class="number">1</span>], row[<span class="number">2</span>], row[<span class="number">3</span>], row[<span class="number">4</span>]))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="MySQL更新"><a href="#MySQL更新" class="headerlink" title="MySQL更新"></a>MySQL更新</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sql = <span class="string">&quot;update staff set age = age + 10 where sex = &#x27;%c&#x27; &quot;</span>%<span class="string">&#x27;M&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    conn.rollback()</span><br></pre></td></tr></table></figure><h3 id="MySQL删除"><a href="#MySQL删除" class="headerlink" title="MySQL删除"></a>MySQL删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sql =<span class="string">&quot;delete from staff where age&gt;&#x27;%d&#x27;&quot;</span>%<span class="number">30</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    conn.rollback()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2024/04/10/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/04/10/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="在线编辑器"><a href="#在线编辑器" class="headerlink" title="在线编辑器"></a>在线编辑器</h2><p>可以使用<a href="https://markdown.com.cn/editor/">在线编辑器</a>，边学边应用，同时Markdown可以内嵌HTML标签</p><h2 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#  表示h1</span></span><br><span class="line"><span class="section">## 表示h2，以此类推，最多6个，即h1~h6</span></span><br><span class="line"></span><br><span class="line">可选语法</span><br><span class="line">在文本下方添加任意数量的 == 号来标识一级标题，或者 -- 号来标识二级标题</span><br><span class="line"><span class="section">h1</span></span><br><span class="line"><span class="section">========</span></span><br><span class="line"></span><br><span class="line"><span class="section">h2</span></span><br><span class="line"><span class="section">--------</span></span><br><span class="line"></span><br><span class="line">最佳实践</span><br><span class="line"><span class="section"># 与标题之间进行间隔</span></span><br></pre></td></tr></table></figure><h2 id="段落语法"><a href="#段落语法" class="headerlink" title="段落语法"></a>段落语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用空白行将一行或多行文本进行分割，每一部分作为一个段落</span><br><span class="line">段落1，你好</span><br><span class="line"></span><br><span class="line">段落2，hello</span><br><span class="line"></span><br><span class="line">最佳实践</span><br><span class="line">不用空格和制表符来缩进段落</span><br></pre></td></tr></table></figure><h2 id="换行语法"><a href="#换行语法" class="headerlink" title="换行语法"></a>换行语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">粗体 使用<span class="strong">**bold text**</span>或者<span class="strong">__bold text__</span></span><br><span class="line">如果要在单词的中间部分加粗，使用love<span class="strong">**is**</span>bold而不是love<span class="strong">__is__</span>bold</span><br><span class="line"></span><br><span class="line">斜体 使用<span class="emphasis">*italic*</span>,或者<span class="emphasis">_italic_</span></span><br><span class="line"></span><br><span class="line">最佳实践，</span><br><span class="line">同时使用斜体和粗体</span><br><span class="line">在单词或短语的前后各添加三个星号或下划线，<span class="strong">**<span class="emphasis">*bold italic*</span>**</span></span><br></pre></td></tr></table></figure><h2 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">在段落前添加&gt; 符号来创建块引用</span><br><span class="line"><span class="quote">&gt; 块应用实例</span></span><br><span class="line"></span><br><span class="line">多个段落的块引用</span><br><span class="line"><span class="quote">&gt; 块应用实例1</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; 块应用实例2</span></span><br><span class="line"></span><br><span class="line">嵌套块引用</span><br><span class="line">在要嵌套的段落前添加一个&gt;&gt; 符号</span><br><span class="line"><span class="quote">&gt; 块应用实例1</span></span><br><span class="line"><span class="quote">&gt; 块应用实例2</span></span><br><span class="line">&gt;&gt; 块应用实例3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">带有其他元素的块引用</span><br><span class="line"><span class="quote">&gt; ### 标题h3</span></span><br><span class="line"><span class="quote">&gt; - 实例li</span></span><br><span class="line"><span class="quote">&gt; - 实例li2</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt;  <span class="emphasis">*italic*</span> is <span class="strong">**bold**</span></span></span><br></pre></td></tr></table></figure><h2 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">有序列表</span><br><span class="line">创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。</span><br><span class="line"><span class="bullet">1.</span> First item</span><br><span class="line"><span class="bullet">2.</span> Second item</span><br><span class="line"><span class="bullet">3.</span> Third item</span><br><span class="line"></span><br><span class="line">无序列表</span><br><span class="line">创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (<span class="emphasis">*) 或加号 (+)</span></span><br><span class="line"><span class="emphasis">- First item</span></span><br><span class="line"><span class="emphasis">- Second item</span></span><br><span class="line"><span class="emphasis">- Third item</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">缩进一个或多个列表项可创建嵌套列表。</span></span><br><span class="line"><span class="emphasis">- First item</span></span><br><span class="line"><span class="emphasis">- Second item</span></span><br><span class="line"><span class="emphasis">- Third item</span></span><br><span class="line"><span class="emphasis">    - Indented item</span></span><br><span class="line"><span class="emphasis">    - Indented item</span></span><br><span class="line"><span class="emphasis">- Fourth ite</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">在列表中嵌套其他元素</span></span><br><span class="line"><span class="emphasis">在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符</span></span><br><span class="line"><span class="emphasis">- First item</span></span><br><span class="line"><span class="emphasis">  </span></span><br><span class="line"><span class="emphasis">添加一个段落</span></span><br><span class="line"><span class="emphasis">&gt; 引用块</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">- Second item</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">代码块</span></span><br><span class="line"><span class="emphasis">代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符。</span></span><br><span class="line"><span class="emphasis">1.  First item</span></span><br><span class="line"><span class="emphasis">2.  code</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">        <span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">          <span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">            <span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span>Test<span class="language-xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">          <span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">3.  Second item</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">图片</span></span><br><span class="line"><span class="emphasis">1.  Open the file containing the Linux mascot.</span></span><br><span class="line"><span class="emphasis">2.  Marvel at its beauty.</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">    ![<span class="string">Tux, the Linux mascot</span>](<span class="link">/assets/images/tux.png</span>)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">3.  Close the file.</span></span><br></pre></td></tr></table></figure><h2 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">将单词或短语表示为代码，请将其包裹在反引号 (`) 中。</span><br><span class="line">请输入<span class="code">`pip install`</span></span><br><span class="line"></span><br><span class="line">如果要表示为代码部分包含反引号，将代码包裹在双反引号(``)中。</span><br><span class="line"><span class="code">``请输入`</span>pip install<span class="code">` `</span>`</span><br><span class="line"></span><br><span class="line">代码块</span><br><span class="line">要创建代码块，请将代码块的每一行缩进至少四个空格或一个制表符。</span><br><span class="line"><span class="code">    &lt;html&gt;</span></span><br><span class="line"><span class="code">      &lt;head&gt;</span></span><br><span class="line"><span class="code">      &lt;/head&gt;</span></span><br><span class="line"><span class="code">    &lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分割线语法"><a href="#分割线语法" class="headerlink" title="分割线语法"></a>分割线语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建分隔线，请在单独一行上使用三个或多个星号 (<span class="strong">**<span class="emphasis">*)、破折号 (---) 或下划线 (___) ，并且不能包含其他内容。</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">最佳实践，在分割线的前后均添加空白行</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">---</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br></pre></td></tr></table></figure><h2 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">链接文本放在中括号内，链接地址放在后面的括号中，链接title可选</span><br><span class="line">超链接Markdown语法代码：[<span class="string">超链接显示名</span>](<span class="link">超链接地址 &quot;超链接title&quot;</span>)</span><br><span class="line"></span><br><span class="line">链接title是当鼠标悬停在链接上时会出现的文字</span><br><span class="line"></span><br><span class="line">网址和Email地址</span><br><span class="line">使用尖括号可以很方便地把URL或者email地址变成可点击的链接</span><br><span class="line"><span class="language-xml">&lt;https://markdown.com.cn&gt;</span></span><br><span class="line"><span class="language-xml">&lt;fake@example.com&gt;</span></span><br><span class="line"></span><br><span class="line">链接语法可搭配其他语法</span><br><span class="line">the <span class="strong">**[<span class="string">EFF</span>](<span class="link">https://eff.org</span>)**</span>.</span><br><span class="line">the <span class="emphasis">*[<span class="string">Markdown Guide</span>](<span class="link">https://www.markdownguide.org</span>)*</span>.</span><br><span class="line"> on [<span class="string">`code`</span>](<span class="link">https://tangwan16.cn</span>)</span><br><span class="line"></span><br><span class="line"> 引用类型链接</span><br><span class="line">  引用类型链接的第一部分 </span><br><span class="line"><span class="code">[显示为链接的文本][1]，后一个[]指向存储在文档其他位置的链接，可以是字母，数字</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">引用类型链接的第二部分，可以放在文档的任何位置</span></span><br><span class="line"><span class="code">[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle</span></span><br></pre></td></tr></table></figure><h2 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本</span><br><span class="line">![<span class="string">图片描述</span>](<span class="link">图片链接 &quot;图片鼠标悬浮名&quot;</span>)</span><br><span class="line"></span><br><span class="line">链接图片，给图片增加链接</span><br><span class="line">[<span class="string">![沙漠中的岩石图片</span>](<span class="link">/assets/img/shiprock.jpg &quot;Shiprock&quot;</span>)](<span class="link">https://markdown.com.cn</span>)</span><br></pre></td></tr></table></figure><h2 id="转义字符语法"><a href="#转义字符语法" class="headerlink" title="转义字符语法"></a>转义字符语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ 。</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>使用三个或多个连字符（—）创建每列的标题，并使用管道（|）分隔每列。您可以选择在表的任一端添加管道。可以使用<a href="https://www.tablesgenerator.com/markdown_tables">Markdown表格生成器</a> 生成表格</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description |</span><br><span class="line">| ----------- | ----------- |</span><br><span class="line">| Header      | Title       |</span><br><span class="line">| Paragraph   | Text        |</span><br><span class="line"></span><br><span class="line">单元格宽度可以变化，下面的代码与上面相同</span><br><span class="line">| Syntax | Description |</span><br><span class="line">| --- | ----------- |</span><br><span class="line">| Header | Title |</span><br><span class="line">| Paragraph | Text |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对其方式设置</span><br><span class="line">分别为左对齐，居中对其，右对齐</span><br><span class="line">| :---        |    :----:   |          ---: |</span><br></pre></td></tr></table></figure><h2 id="围栏代码块"><a href="#围栏代码块" class="headerlink" title="围栏代码块"></a>围栏代码块</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">除了将行缩进四个空格或一个制表符来创建代码块，可以用<span class="code">``` ```</span>将代码块包裹</span><br><span class="line"><span class="code">```使用的语言名</span></span><br><span class="line"><span class="code">代码</span></span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Smith&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 脚注</span><br><span class="line">当创建脚注时，带有脚注的上标数字会出现在您添加脚注参考的位置，以单击链接以跳至页面底部的脚注内容。脚注内容可以放在文章任何位置</span><br><span class="line">```markdown</span><br><span class="line">Here&#x27;s a simple footnote,[^1]</span><br><span class="line"></span><br><span class="line">[^1]: This is the first footnote.</span><br></pre></td></tr></table></figure><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>在单词中心放置一条水平线来删除单词</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在要删除内容前后使用两个波浪号~~</span><br><span class="line">~~世界是平坦的。~~ 我们现在知道世界是圆的。</span><br></pre></td></tr></table></figure><h2 id="任务列表语法"><a href="#任务列表语法" class="headerlink" title="任务列表语法"></a>任务列表语法</h2><p>任务列表使您可以创建带有复选框的项目列表。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">要创建任务列表，请在任务列表项之前添加破折号-和方括号[ ]，并在[ ]前面加上空格。要选择一个复选框，请在方括号[x]之间添加 x 。</span><br><span class="line"><span class="bullet">-</span> [x] Write the press release</span><br><span class="line"><span class="bullet">-</span> [ ] Update the website</span><br><span class="line"><span class="bullet">-</span> [ ] Contact the media</span><br></pre></td></tr></table></figure><h2 id="自动网址链接"><a href="#自动网址链接" class="headerlink" title="自动网址链接"></a>自动网址链接</h2><p>会自动将URL转换为链接，如果要禁止自动URL链接，将URL表示为带反引号的代码来删除该链接。</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django学习</title>
      <link href="/2024/04/09/Django%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/04/09/Django%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="项目的创建与启动"><a href="#项目的创建与启动" class="headerlink" title="项目的创建与启动"></a>项目的创建与启动</h2><p>cmd输入命令创建项目(包含基本的项目框架),类似于vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject demo1</span><br></pre></td></tr></table></figure><p>创建后的项目结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">demo1/</span><br><span class="line">    manage.py             </span><br><span class="line">    bysms/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure><p>运行服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 8080</span><br></pre></td></tr></table></figure><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>定义：django ORM（Object Relational Mapping，简称 ORM ）对象关系模型<br>作用：将python代码转化成为SQL语句，对各种数据库都提供很好的支持，MySQL、SQLite、Oracle，实现相同python代码，不同数据库操作语言，实现相同功能<br><img src="https://picmd.tangwan16.cn/posts/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/django/2_1.png"><br>django 的ORM</p><ul><li>定义一张数据库的表 就是定义一个继承自 django.db.models.Model 的类</li><li>定义该表中的字段（列）， 就是定义该类里面的一些属性</li><li>类的方法就是对该表中数据的处理方法，包括 数据的增删改查</li></ul><p>好处：<br>将底层的sql语句，变成面向对象语言<br>更换数据库后，不需要更换数据库语言，更换项目下setting.py中的配置</p><h2 id="数据库的配置与迁移"><a href="#数据库的配置与迁移" class="headerlink" title="数据库的配置与迁移"></a>数据库的配置与迁移</h2><h3 id="配置默认的数据库形式-db-sqlite3"><a href="#配置默认的数据库形式-db-sqlite3" class="headerlink" title="配置默认的数据库形式 db.sqlite3"></a>配置默认的数据库形式 db.sqlite3</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;db.sqlite3&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>在 项目的根目录下面 生成一个配置文件中指定的数据库文件 db.sqlite3<br>db.sqlite3 是数据库文件，内容包括基本表，和app下model.py定义的类<br>sqlite数据库工具sqlitestudio <a href="https://sqlitestudio.pl/">https://sqlitestudio.pl/</a></p><h3 id="配置mysql数据库"><a href="#配置mysql数据库" class="headerlink" title="配置mysql数据库"></a>配置mysql数据库</h3><p>在项目的settings.py中找到DATABASES配置项，配置mysql</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123; </span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,    <span class="comment"># 数据库引擎</span></span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;tangwan16&#x27;</span>, <span class="comment"># 数据库名称</span></span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="comment"># 数据库地址，本机 ip 地址 127.0.0.1 </span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>, <span class="comment"># 端口 </span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,  <span class="comment"># 数据库用户名</span></span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;1234&#x27;</span>, <span class="comment"># 数据库密码</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在与 settings.py 同级目录下的 __init__.py 中引入模块和进行配置 </span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h2 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h2><p>什么是项目app<br>一个项目app可以理解为一个功能模块，一个项目可以含有多个app，每个app相互独立<br>创建app目录命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startapp 功能模块名</span><br></pre></td></tr></table></figure><h2 id="路由表与路由子表"><a href="#路由表与路由子表" class="headerlink" title="路由表与路由子表"></a>路由表与路由子表</h2><h3 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h3><p>同时设置url路由，项目目录下的url.py，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="comment"># 别忘了导入 listorders 函数</span></span><br><span class="line"><span class="keyword">from</span> sales.views <span class="keyword">import</span> listorders</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 添加如下的路由记录</span></span><br><span class="line">    path(<span class="string">&#x27;sales/orders/&#x27;</span>, listorders),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>就是说当前端过来的请求 url地址 是 &#x2F;sales&#x2F;orders&#x2F; (注意：最后的一个斜杠不能省略) , 就由 views.py 里面的函数 listorders 来处理。</p><h3 id="路由子表"><a href="#路由子表" class="headerlink" title="路由子表"></a>路由子表</h3><p>当项目目录下的url.py中访问url条目过多时，将不同的路由记录按照功能分拆到不同的 <strong>url路由子表</strong> 文件中。<br>比如，这里我们可以把 访问 的 url 凡是 以 sales 开头的全部都 由 sales app目录下面的 子路由文件 urls.py 处理<br>app中的url.py  sales\urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;orders/&#x27;</span>, views.listorders),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>项目中的url.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="comment"># 导入一个include函数</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> sales.views <span class="keyword">import</span> listorders</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 凡是 url 以 sales/  开头的，</span></span><br><span class="line">    <span class="comment"># 都根据 sales.urls 里面的 子路由表进行路由</span></span><br><span class="line">    path(<span class="string">&#x27;sales/&#x27;</span>, include(<span class="string">&#x27;sales.urls&#x27;</span>)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>注意这时，会从请求url中去掉 前面主路由文件 已经匹配上的部分（这里是 sales&#x2F; ）, 将剩余的部分 （这里是 orders&#x2F; ）去子路由文件中查看是否有匹配的路由项。</p><h2 id="定义数据库"><a href="#定义数据库" class="headerlink" title="定义数据库"></a>定义数据库</h2><p>创建一个名为common的应用目录， 里面存放我们项目需要的一些公共的表的定义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp common</span><br></pre></td></tr></table></figure><p>在app下model.py中定义我们需要的表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    num = models.FloatField(null=<span class="literal">True</span>)</span><br><span class="line">job_number = models.IntegerField(null=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 包含年月日时分秒</span></span><br><span class="line">createtime = models.DateTimeField(null=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 包含年月日</span></span><br><span class="line">createdate = models.DateField(null=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>创建数据库表<br>首先我们需要告诉Django： 我们的 common 应用中 需要你关注， 因为其中包含了 数据库Model的定义。<br>配置项目下的settings.py下  INSTALLED_APPS 配置项 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="comment"># 加入下面这行</span></span><br><span class="line">    <span class="string">&#x27;common.apps.CommonConfig&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>‘common.apps.CommonConfig’ 告诉 Django ， CommonConfig 是 common&#x2F;apps.py 文件中定义的一个应用配置的类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CommonConfig</span>(<span class="title class_ inherited__">AppConfig</span>):</span><br><span class="line">    name = <span class="string">&#x27;common&#x27;</span></span><br></pre></td></tr></table></figure><p>更新数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations common</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>自此数据库文件中添加Customer表<br>注意：我们创建的表默认的逐渐是id（即使类中没有id属性）<br>当我们在已经创建表之后,修改model.py添加属性，执行上述步骤，可能会要求指定默认值，或者允许为空</p><h2 id="Django-Admin-管理数据"><a href="#Django-Admin-管理数据" class="headerlink" title="Django Admin 管理数据"></a>Django Admin 管理数据</h2><p>Django提供了一个管理员操作界面可以方便的 添加、修改、删除你定义的 model 表数据。<br>首先，我们需要创建 一个超级管理员账号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><p>要求输入用户名和密码,密码至少八位<br>现在就可以访问 <a href="http://127.0.0.1/admin/">http://127.0.0.1/admin/</a> ，输入刚才注册的用户密码登录。<br>提供ui界面来定义model表数据<br>如果你是中文的操作系统，想使用中文的admin界面，应该在配置文件 settings.py 中 MIDDLEWARE 最后加入如下配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># admin界面语言本地化</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.locale.LocaleMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="添加处理请求模块和url路由"><a href="#添加处理请求模块和url路由" class="headerlink" title="添加处理请求模块和url路由"></a>添加处理请求模块和url路由</h2><p>不同的操作请求，使用不同的 HTTP 请求方法 ，比如 添加是POST， 查询是 GET， 修改是 PUT， 删除是 DELETE。<br>但是注意：Django 的 url路由功能 <strong>不支持</strong> 根据 HTTP 请求的方法 和请求体里面的参数 进行路由。<br>以下是错误代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;customers/&#x27;</span>, <span class="string">&#x27;app.views.list_customer&#x27;</span>, method=<span class="string">&#x27;get&#x27;</span>),</span><br><span class="line">path(<span class="string">&#x27;customers/&#x27;</span>, <span class="string">&#x27;app.views.add_customer&#x27;</span>,  method=<span class="string">&#x27;post&#x27;</span>),</span><br></pre></td></tr></table></figure><h3 id="使用dispatcher分发函数进行处理"><a href="#使用dispatcher分发函数进行处理" class="headerlink" title="使用dispatcher分发函数进行处理"></a>使用dispatcher分发函数进行处理</h3><p>自己编写一个函数， 来 根据 http请求的类型 和请求体里面的参数 分发（或者说路由）给 不同的函数进行处理。<br>可以 在 customer.py 中定义如下 dispatcher 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dispatcher</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 将请求参数统一放入request 的 params 属性中，方便后续处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># GET请求 参数在url中，同过request 对象的 GET属性获取</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        request.params = request.GET</span><br><span class="line"></span><br><span class="line">    <span class="comment"># POST/PUT/DELETE 请求 参数 从 request 对象的 body 属性中获取</span></span><br><span class="line">    <span class="keyword">elif</span> request.method <span class="keyword">in</span> [<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;PUT&#x27;</span>,<span class="string">&#x27;DELETE&#x27;</span>]:</span><br><span class="line">        <span class="comment"># 根据接口，POST/PUT/DELETE 请求的消息体都是 json格式</span></span><br><span class="line">        request.params = json.loads(request.body)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据不同的action分派给不同的函数进行处理</span></span><br><span class="line">    action = request.params[<span class="string">&#x27;action&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> action == <span class="string">&#x27;list_customer&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> listcustomers(request)</span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">&#x27;add_customer&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> addcustomer(request)</span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">&#x27;modify_customer&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> modifycustomer(request)</span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">&#x27;del_customer&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> deletecustomer(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;不支持该类型http请求&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>该函数 把 请求消息中的参数统一放入到 request请求对象的params 属性中。<br>params 属性 被 做成一个 dict 类型 ， 方便后面的处理函数来获取消息中的参数。<br>比如 action 参数 为 ‘add_customer’ 的 请求 就由 addcustomer 函数 进行处理<br>app下的url.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> mgr <span class="keyword">import</span> customer</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;customers&#x27;</span>, customer.dispatcher),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>凡是 API 请求url为 &#x2F;api&#x2F;mgr&#x2F;customers 的，都交由 我们上面定义的dispatch函数进行分派处理</p><h3 id="使用类中的参数方法"><a href="#使用类中的参数方法" class="headerlink" title="使用类中的参数方法"></a>使用类中的参数方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> = [</span><br><span class="line">    path(<span class="string">&quot;recognize/&quot;</span>, dvadmin.face.views.face_recognize_url.as_view()),  <span class="comment"># 人脸识别接口</span></span><br><span class="line">    path(<span class="string">&quot;entry/&quot;</span>, dvadmin.face.views.face_entry_url.as_view()),  <span class="comment"># 人脸录入接口</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="comment"># 人脸录入接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">face_entry_url</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;</span><br><span class="line"><span class="string">&#x27;code&#x27;</span>: <span class="number">2000</span>,</span><br><span class="line"><span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;模型训练失败&quot;</span>,</span><br><span class="line"><span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 人脸姓名</span></span><br><span class="line">        name = request.data.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;</span><br><span class="line"><span class="string">&#x27;code&#x27;</span>: <span class="number">2000</span>,</span><br><span class="line"><span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;模型训练失败&quot;</span>,</span><br><span class="line"><span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="临时取消CSRF校验"><a href="#临时取消CSRF校验" class="headerlink" title="临时取消CSRF校验"></a>临时取消CSRF校验</h2><p>项目&#x2F;settings.py 中 MIDDLEWARE 配置项 里 注释掉’django.middleware.csrf.CsrfViewMiddleware’ 即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="返回特定的数据格式"><a href="#返回特定的数据格式" class="headerlink" title="返回特定的数据格式"></a>返回特定的数据格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;address&quot;</span>: <span class="string">&quot;江苏省常州武进市白云街44号&quot;</span>,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;武进市 袁腾飞&quot;</span>,</span><br><span class="line">            <span class="string">&quot;phonenumber&quot;</span>: <span class="string">&quot;13886666666&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;address&quot;</span>: <span class="string">&quot;北京海淀区&quot;</span>,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;北京海淀区代理 蔡国庆&quot;</span>,</span><br><span class="line">            <span class="string">&quot;phonenumber&quot;</span>: <span class="string">&quot;13990123456&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]              </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 Customer </span></span><br><span class="line"><span class="keyword">from</span> common.models <span class="keyword">import</span> Customer</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listcustomers</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 返回一个 QuerySet 对象 ，包含所有的表记录</span></span><br><span class="line">    qs = Customer.objects.values()</span><br><span class="line">    <span class="comment"># 将 QuerySet 对象 转化为 list 类型</span></span><br><span class="line">    <span class="comment"># 否则不能 被 转化为 JSON 字符串</span></span><br><span class="line">    retlist = <span class="built_in">list</span>(qs)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;data&#x27;</span>: retlist&#125;)</span><br></pre></td></tr></table></figure><p>实现功能：浏览器访问 sales&#x2F;customers&#x2F; ，我们的服务端就返回系统中所有的客户记录给浏览器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 Customer 对象定义</span></span><br><span class="line"><span class="keyword">from</span>  common.models <span class="keyword">import</span>  Customer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listcustomers</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 返回一个 QuerySet 对象 ，包含所有的表记录</span></span><br><span class="line">    <span class="comment"># 每条表记录都是是一个dict对象，</span></span><br><span class="line">    <span class="comment"># key 是字段名，value 是 字段值</span></span><br><span class="line"><span class="comment"># 通过objects这个模型管理器的all()获得所有数据行，相当于SQL中的SELECT * FROM</span></span><br><span class="line">    res = Customer.objects.values()</span><br><span class="line"></span><br><span class="line"><span class="comment"># filter相当于SQL中的WHERE，可设置条件过滤结果</span></span><br><span class="line">    res = Customer.objects.<span class="built_in">filter</span>(name=<span class="string">&quot;tangwan&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤条件可以有多个</span></span><br><span class="line">res = Customer.objects.<span class="built_in">filter</span>(phonenumber=ph,address=<span class="string">&#x27;安徽芜湖&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取单个对象</span></span><br><span class="line">    res = Test.objects.get(<span class="built_in">id</span>=<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line">    <span class="comment">#数据排序,默认升序</span></span><br><span class="line">    res =Customer.objects.order_by(<span class="string">&quot;id&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 限制返回的数据，返回以id升序的前两条数据</span></span><br><span class="line">    res =Customer.objects.order_by(<span class="string">&#x27;id&#x27;</span>)[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(<span class="string">&#x27;data&#x27;</span>:res)</span><br></pre></td></tr></table></figure><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>前端提供的客户数据格式如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;action&quot;</span>:<span class="string">&quot;add_customer&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>:<span class="string">&quot;武汉市桥西医院&quot;</span>,</span><br><span class="line">        <span class="string">&quot;phonenumber&quot;</span>:<span class="string">&quot;13345679934&quot;</span>,</span><br><span class="line">        <span class="string">&quot;address&quot;</span>:<span class="string">&quot;武汉市桥西医院北路&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">addcustomer</span>(<span class="params">request</span>):</span><br><span class="line">    info    = request.params[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    <span class="comment"># 从请求消息中 获取要添加客户的信息</span></span><br><span class="line">    <span class="comment"># 并且插入到数据库中</span></span><br><span class="line">    <span class="comment"># 返回值 就是对应插入记录的对象 </span></span><br><span class="line">    record = Customer.objects.create(name=info[<span class="string">&#x27;name&#x27;</span>] ,</span><br><span class="line">                            phonenumber=info[<span class="string">&#x27;phonenumber&#x27;</span>] ,</span><br><span class="line">                            address=info[<span class="string">&#x27;address&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;data&#x27;</span>:record.<span class="built_in">id</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>前端提供的数据格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;action&quot;</span>:<span class="string">&quot;modify_customer&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="string">&quot;newdata&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>:<span class="string">&quot;武汉市桥北医院&quot;</span>,</span><br><span class="line">        <span class="string">&quot;phonenumber&quot;</span>:<span class="string">&quot;13345678888&quot;</span>,</span><br><span class="line">        <span class="string">&quot;address&quot;</span>:<span class="string">&quot;武汉市桥北医院北路&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改数据可以使用 save() 或 update():</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">modifycustomer</span>(<span class="params">request</span>):</span><br><span class="line"><span class="comment"># 修改其中一个id=1的name字段，再save，相当于SQL中的UPDATE</span></span><br><span class="line">    test1 = Customer.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    test1.name = <span class="string">&#x27;Google&#x27;</span></span><br><span class="line">    test1.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外一种方式</span></span><br><span class="line">    Customer.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>).update(name=<span class="string">&#x27;Google&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改所有的列</span></span><br><span class="line">    Test.objects.<span class="built_in">all</span>().update(name=<span class="string">&#x27;Google&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求消息中 获取修改客户的信息</span></span><br><span class="line">    <span class="comment"># 找到该客户，并且进行修改操作</span></span><br><span class="line"></span><br><span class="line">    customerid = request.params[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">    newdata    = request.params[<span class="string">&#x27;newdata&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 根据 id 从数据库中找到相应的客户记录</span></span><br><span class="line">        customer = Customer.objects.get(<span class="built_in">id</span>=customerid)</span><br><span class="line">    <span class="keyword">except</span> Customer.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span>  &#123;</span><br><span class="line">                <span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">&#x27;msg&#x27;</span>: <span class="string">f&#x27;id 为`<span class="subst">&#123;customerid&#125;</span>`的客户不存在&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span>  newdata:</span><br><span class="line">        customer.name = newdata[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;phonenumber&#x27;</span> <span class="keyword">in</span>  newdata:</span><br><span class="line">        customer.phonenumber = newdata[<span class="string">&#x27;phonenumber&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;address&#x27;</span> <span class="keyword">in</span>  newdata:</span><br><span class="line">        customer.address = newdata[<span class="string">&#x27;address&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注意，一定要执行save才能将修改信息保存到数据库</span></span><br><span class="line">    customer.save()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;更新数据成功&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>前段提供的数据格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;action&quot;</span>:<span class="string">&quot;del_customer&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">deletecustomer</span>(<span class="params">request</span>):</span><br><span class="line">    customerid = request.params[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line"><span class="comment"># 根据 id 从数据库中找到相应的客户记录</span></span><br><span class="line">customer = Customer.objects.get(<span class="built_in">id</span>=customerid)</span><br><span class="line">    <span class="comment"># delete 方法就将该记录从数据库中删除了</span></span><br><span class="line">    customer.delete()</span><br><span class="line"><span class="comment"># 另外一种方式</span></span><br><span class="line">    Customer.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=customerid).delete()</span><br><span class="line"><span class="comment"># 删除所有数据</span></span><br><span class="line">    Customer.objects.<span class="built_in">all</span>().delete()</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;删除成功&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="数据库表的关联"><a href="#数据库表的关联" class="headerlink" title="数据库表的关联"></a>数据库表的关联</h2><p>常见的3种关联关系：一对多，一对一，多对多</p><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><p>表之间 一对多 的关系，就是 外键 关联关系<br>如果一个表中 的 某个字段是外键，那就意味着这外键字段的记录的取值，只能是它关联表的某个记录的主键的值。<br>我们定义表的 Model类的时候，如果没有指定主键字段，migrate 的时候 Django 会为该Model对应的数据库表自动生成一个id字段，作为主键。<br>Django中定义外键 的方法就是 Model类的该属性字段 值为 ForeignKey 对象，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>(models.Model):</span><br><span class="line">    <span class="comment"># 订单名</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">200</span>,null=<span class="literal">True</span>,blank=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 创建日期</span></span><br><span class="line">    create_date = models.DateTimeField(default=datetime.datetime.now)</span><br><span class="line">    <span class="comment"># 客户</span></span><br><span class="line">    customer = models.ForeignKey(Customer,on_delete=models.PROTECT)</span><br></pre></td></tr></table></figure><p> customer 字段 是外键， 指向 Customer 类。 意思就是告诉Django： Order表的 customer 字段 指向 Customer表的主键 的一个外键。<br>另外一个参数 <strong>on_delete</strong> 指定了 当我们想 删除 外键指向的主键 记录时， 系统的行为。<br>比如 我们要删除客户记录， 那么 Order表中 对应这个客户的订单记录 该如何处理呢？</p><ul><li>CASCADE</li></ul><p>删除主键记录和 相应的外键表记录。<br>比如，我们要删除客户张三，在删除了客户表中张三记录同时，也删除Order表中所有这个张三的订单记录</p><ul><li>PROTECT</li></ul><p>禁止删除记录。<br>比如，我们要删除客户张三，如果Order表中有张三的订单记录，Django系统 就会抛出ProtectedError类型的异常，当然也就禁止删除 客户记录和相关的订单记录了。<br>除非我们将Order表中所有张三的订单记录都先删除掉，才能删除该客户表中的张三记录。</p><ul><li>SET_NULL</li></ul><p>删除主键记录，并且将外键记录中外键字段的值置为null。 当然前提是外键字段要设置为值允许是null。<br>比如，我们要删除客户张三时，在删除了客户张三记录同时，会将Order表里面所有的 张三记录里面的customer字段值置为 null。 但是上面我们并没有设置 customer 字段有 null&#x3D;True 的参数设置，所以，是不能取值为 SET_NULL的。<br>注意： 外键字段，实际在数据库表中的 字段名， 是 Django ForeignKey 定义 字段名加上后缀 _id 。<br>比如这里，在执行了 migrate 命令更新数据库后， customer 这个外键字段实际上在 数据库表中的字段名 是 customer_id</p><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><p>Django 中 用 OneToOneField 对象 实现 一对一 的关系，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(models.Model):</span><br><span class="line">    <span class="comment"># 姓名</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># 班级</span></span><br><span class="line">    classname = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># 描述</span></span><br><span class="line">    desc = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContactAddress</span>(models.Model):</span><br><span class="line">    <span class="comment"># 一对一 对应学生 </span></span><br><span class="line">    student = models.OneToOneField(Student, on_delete=models.PROTECT)</span><br><span class="line">    <span class="comment"># 家庭</span></span><br><span class="line">    homeaddress = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># 电话号码</span></span><br><span class="line">    phone = models.CharField(max_length=<span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>Django发现这样一对一定义，它会在migrate的时候，在数据库中定义该字段为外键的同时， 加上 unique&#x3D;True 约束，表示在此表中，所有记录的该字段 取值必须唯一，不能重复。</p><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p>Django是通过 ManyToManyField 对象 表示 多对多的关系的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>(models.Model):</span><br><span class="line">    <span class="comment"># 订单名</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">200</span>,null=<span class="literal">True</span>,blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建日期</span></span><br><span class="line">    create_date = models.DateTimeField(default=datetime.datetime.now)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 客户</span></span><br><span class="line">    customer = models.ForeignKey(Customer,on_delete=models.PROTECT)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 订单购买的药品，和Medicine表是多对多 的关系</span></span><br><span class="line">    medicines = models.ManyToManyField(Medicine, through=<span class="string">&#x27;OrderMedicine&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrderMedicine</span>(models.Model):</span><br><span class="line">    order = models.ForeignKey(Order, on_delete=models.PROTECT)</span><br><span class="line">    medicine = models.ForeignKey(Medicine, on_delete=models.PROTECT)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 订单中药品的数量</span></span><br><span class="line">    amount = models.PositiveIntegerField()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">medicines = models.ManyToManyField(Medicine, through=<span class="string">&#x27;OrderMedicine&#x27;</span>)</span><br></pre></td></tr></table></figure><p>指定Order表和 Medicine 表 的多对多关系， 其实Order表中并不会产生一个 叫 medicines 的字段。<br>Order表和 Medicine 表 的多对多关系 是 <strong>通过另外一张表</strong>， 也就是 through 参数 指定的 OrderMedicine 表 来确定的。</p><h2 id="ORM关联表、事务"><a href="#ORM关联表、事务" class="headerlink" title="ORM关联表、事务"></a>ORM关联表、事务</h2><p>Django ORM 如何操作外键关联关系<br>models.py中定义这样的两个Model，对应两张表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 国家表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Country</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 学生表， country 字段是国家表的外键，形成一对多的关系</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(models.Model):</span><br><span class="line">    name    = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    grade   = models.PositiveSmallIntegerField()</span><br><span class="line">    country = models.ForeignKey(Country,</span><br><span class="line">                                on_delete=models.PROTECT)</span><br></pre></td></tr></table></figure><p>命令行为数据库添加数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure><p>直接启动Django命令行，输入代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> common.models <span class="keyword">import</span> *</span><br><span class="line">c1 = Country.objects.create(name=<span class="string">&#x27;中国&#x27;</span>)</span><br><span class="line">Student.objects.create(name=<span class="string">&#x27;白月&#x27;</span>, grade=<span class="number">1</span>, country=c1)</span><br></pre></td></tr></table></figure><h3 id="外键表字段访问"><a href="#外键表字段访问" class="headerlink" title="外键表字段访问"></a>外键表字段访问</h3><p>如果你已经获取了一个student对象，要得到他的国家名称只需这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 = Student.objects.get(name=<span class="string">&#x27;白月&#x27;</span>)</span><br><span class="line">s1.country.name</span><br></pre></td></tr></table></figure><h3 id="外键表字段过滤"><a href="#外键表字段过滤" class="headerlink" title="外键表字段过滤"></a>外键表字段过滤</h3><p>如果，我们要查找Student表中所有 一年级 学生</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.objects.<span class="built_in">filter</span>(grade=<span class="number">1</span>).values()</span><br></pre></td></tr></table></figure><p>如果现在，我们要查找Student表中所有 一年级中国 学生，该怎么写呢？<br>不能这么写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.objects.<span class="built_in">filter</span>(grade=<span class="number">1</span>,country=<span class="string">&#x27;中国&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Student表中 country 并不是国家名称字符串字段，而是一个外键字段，其实是对应 Country 表中 id 字段 。<br>正确写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cn = Country.objects.get(name=<span class="string">&#x27;中国&#x27;</span>)</span><br><span class="line">Student.objects.<span class="built_in">filter</span>(grade=<span class="number">1</span>,country_id=cn.<span class="built_in">id</span>).values()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cn = Country.objects.get(name=<span class="string">&#x27;中国&#x27;</span>)</span><br><span class="line">Student.objects.<span class="built_in">filter</span>(grade=<span class="number">1</span>,country=cn).values()</span><br></pre></td></tr></table></figure><p>简单写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.objects.<span class="built_in">filter</span>(grade=<span class="number">1</span>,country__name=<span class="string">&#x27;中国&#x27;</span>).values()</span><br></pre></td></tr></table></figure><p>如果返回结果只需要 学生姓名 和 国家名两个字段，可以这样指定values内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.objects.<span class="built_in">filter</span>(grade=<span class="number">1</span>,country__name=<span class="string">&#x27;中国&#x27;</span>).values(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;country__name&#x27;</span>)</span><br></pre></td></tr></table></figure><p>使用 annotate 方法将获取的字段值进行重命名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"><span class="comment"># annotate 可以将表字段进行别名处理</span></span><br><span class="line">Student.objects.annotate(</span><br><span class="line">    countryname=F(<span class="string">&#x27;country__name&#x27;</span>),</span><br><span class="line">    studentname=F(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    )\</span><br><span class="line">    .<span class="built_in">filter</span>(grade=<span class="number">1</span>,countryname=<span class="string">&#x27;中国&#x27;</span>).values(<span class="string">&#x27;studentname&#x27;</span>,<span class="string">&#x27;countryname&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="外键表反向访问"><a href="#外键表反向访问" class="headerlink" title="外键表反向访问"></a>外键表反向访问</h3><p>Django ORM中，关联表 正向关系是通过表外键字段（或者多对多）表示， 比如前面例子中Student表的 country字段。<br>而反向关系，是通过 表Model名转化为小写 表示的。<br>比如，你已经获取了一个Country对象，如何获取到所有属于这个国家的学生呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cn = Country.objects.get(name=<span class="string">&#x27;中国&#x27;</span>)</span><br><span class="line">cn.student_set.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure><p>通过 表Model名转化为小写 ，后面加上一个 _set 来获取所有的反向外键关联对象</p><p>或者<br>在定义Model的时候，外键字段使用 related_name 参数，像这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 国家表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Country</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># country 字段是国家表的外键，形成一对多的关系</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(models.Model):</span><br><span class="line">    name    = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    grade   = models.PositiveSmallIntegerField()</span><br><span class="line">    country = models.ForeignKey(Country,</span><br><span class="line">                on_delete = models.PROTECT,</span><br><span class="line">                <span class="comment"># 指定反向访问的名字</span></span><br><span class="line">                related_name=<span class="string">&#x27;students&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cn = Country.objects.get(name=<span class="string">&#x27;中国&#x27;</span>)</span><br><span class="line">cn.students.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure><h3 id="外键表反向过滤"><a href="#外键表反向过滤" class="headerlink" title="外键表反向过滤"></a>外键表反向过滤</h3><p>如果我们要获取所有 具有一年级学生 的国家名，该怎么写？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先获取所有的一年级学生id列表</span></span><br><span class="line">country_ids = Student.objects.<span class="built_in">filter</span>(grade=<span class="number">1</span>).values_list(<span class="string">&#x27;country&#x27;</span>, flat=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再通过id列表使用  id__in  过滤</span></span><br><span class="line">Country.objects.<span class="built_in">filter</span>(id__in=country_ids).values()</span><br></pre></td></tr></table></figure><p>但是这样同样存在 麻烦 和性能的问题。<br>Django ORM 可以这样写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Country.objects.<span class="built_in">filter</span>(students__grade=<span class="number">1</span>).values()</span><br></pre></td></tr></table></figure><p>注意， 因为，我们定义表的时候，用 related_name&#x3D;’students’ 指定了反向关联名称 students ，所以这里是 students__grade 。 使用了反向关联名字。<br>如果定义时，没有指定related_name， 则应该使用 表名转化为小写 ，就是这样<br>Country.objects.filter(student__grade&#x3D;1).values()<br>但是，我们发现，这种方式，会有重复的记录产生，可以使用 .distinct() 去重</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Country.objects.<span class="built_in">filter</span>(students__grade=<span class="number">1</span>).values().distinct()</span><br></pre></td></tr></table></figure><h2 id="事务、多对多记录添加"><a href="#事务、多对多记录添加" class="headerlink" title="事务、多对多记录添加"></a>事务、多对多记录添加</h2><p>添加一条订单记录，需要在2张表（Order 和 OrderMedicine ）中添加记录。这里就有个需要特别注意的地方， 两张表的插入，意味着我们要有两次数据库操作。<br>如果第一次插入成功， 而第二次插入失败， 就会出现 Order表中 把订单信息写了一部分，而OrderMedicine表中 该订单的信息 却没有写成功。<br>这是个大问题： 就会造成 这个处理 做了一半。<br>那么数据库中就会出现数据的不一致。术语叫 脏数据<br>熟悉数据库的同学就会知道， 我们应该用 数据库 的 事务 机制来解决这个问题。<br>把一批数据库操作放在 事务 中， 该事务中的任何一次数据库操作 失败了， 数据库系统就会让 整个事务就会发生回滚，撤销前面的操作， 数据库回滚到这事务操作之前的状态。<br>Django实现事务操作，可以使用 Django 的 with transaction.atomic()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">addorder</span>(<span class="params">request</span>):</span><br><span class="line">    info  = request.params[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    <span class="comment"># 从请求消息中 获取要添加订单的信息</span></span><br><span class="line">    <span class="comment"># 并且插入到数据库中</span></span><br><span class="line">    <span class="keyword">with</span> transaction.atomic():</span><br><span class="line">        new_order = Order.objects.create(name=info[<span class="string">&#x27;name&#x27;</span>] ,</span><br><span class="line">                                         customer_id=info[<span class="string">&#x27;customerid&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        batch = [OrderMedicine(order_id=new_order.<span class="built_in">id</span>,medicine_id=mid,amount=<span class="number">1</span>)  </span><br><span class="line">                    <span class="keyword">for</span> mid <span class="keyword">in</span> info[<span class="string">&#x27;medicineids&#x27;</span>]]</span><br><span class="line"></span><br><span class="line">        <span class="comment">#  在多对多关系表中 添加了 多条关联记录</span></span><br><span class="line">        OrderMedicine.objects.bulk_create(batch)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">0</span>,<span class="string">&#x27;id&#x27;</span>:new_order.<span class="built_in">id</span>&#125;)</span><br></pre></td></tr></table></figure><p>with transaction.atomic() 下面 缩进部分的代码，对数据库的操作，就都是在 一个事务 中进行了。如果其中有任何一步数据操作失败了， 前面的操作都会回滚。</p><p>如果其中有任何一步数据操作失败了， 前面的操作都会回滚。、</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OrderMedicine.objects.create(order_id=new_order.<span class="built_in">id</span>,medicine_id=mid,amount=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>，一个订单可能会关联多个药品，也就是需要 插入 OrderMedicine 表中的数据 可能有很多条， 如果我们循环用<br>可以把多条数据的插入，放在一个SQL语句中完成， 这样会大大提高性能。<br>方法就是使用 bulk_create， 参数是一个包含所有 该表的 Model 对象的 列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">batch = [OrderMedicine(order_id=new_order.<span class="built_in">id</span>,medicine_id=mid,amount=<span class="number">1</span>)  </span><br><span class="line">            <span class="keyword">for</span> mid <span class="keyword">in</span> info[<span class="string">&#x27;medicineids&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#  在多对多关系表中 添加了 多条关联记录</span></span><br><span class="line">OrderMedicine.objects.bulk_create(batch)</span><br></pre></td></tr></table></figure><h2 id="ORM外键关联"><a href="#ORM外键关联" class="headerlink" title="ORM外键关联"></a>ORM外键关联</h2><p>编写listorder 函数用来处理 列出订单请求<br>前端要求返回订单记录数据格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">id</span>: <span class="number">1</span>, </span><br><span class="line">        name: <span class="string">&quot;华山医院订单001&quot;</span>, </span><br><span class="line">        create_date: <span class="string">&quot;2018-12-26T14:10:15.419Z&quot;</span>,</span><br><span class="line">        customer_name: <span class="string">&quot;华山医院&quot;</span>,</span><br><span class="line">        medicines_name: <span class="string">&quot;青霉素&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">id</span>: <span class="number">2</span>, </span><br><span class="line">        name: <span class="string">&quot;华山医院订单002&quot;</span>, </span><br><span class="line">        create_date: <span class="string">&quot;2018-12-27T14:10:37.208Z&quot;</span>,</span><br><span class="line">        customer_name: <span class="string">&quot;华山医院&quot;</span>,</span><br><span class="line">        medicines_name: <span class="string">&quot;青霉素 | 红霉素 &quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>其中 ‘id’,’name’,’create_date’ 这些字段的内容获取很简单，order表中就有这些字段，’customer_name’ 和 ‘medicines_name’ 这两个字段的值怎么获取呢？ 因为 订单对应的客户名字 和 药品的名字 都不在 Order 表中啊。<br>Order 这个Model 中 有 ‘customer’ 字段 ， 它外键关联了 Customer 表中的一个 记录，这个记录里面 的 name字段 就是我们要取的字段。<br>取 外键关联的表记录的字段值，在Django中很简单，可以直接通过 外键字段 后面加 两个下划线 加 关联字段名的方式 来获取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">listorder</span>(<span class="params">request</span>):</span><br><span class="line">    qs = Order.objects\</span><br><span class="line">            .values(</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;create_date&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;customer__name&#x27;</span>,</span><br><span class="line">                <span class="comment"># 两个下划线，表示取medicines 关联的表中的name字段的值</span></span><br><span class="line">                <span class="comment"># 如果有多个，就会产生多条记录</span></span><br><span class="line">                <span class="string">&#x27;medicines__name&#x27;</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将 QuerySet 对象 转化为 list 类型</span></span><br><span class="line">    retlist = <span class="built_in">list</span>(qs)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;retlist&#x27;</span>: retlist&#125;)</span><br></pre></td></tr></table></figure><p>首先，第一个问题， 接口文档需要的名字是 ‘customer_name’ 和 ‘medicines_name’。 里面只有一个下划线， 而我们这里却产生了 两个下划线。<br>使用 annotate 方法将获取的字段值进行重命名，像下面这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listorder</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 返回一个 QuerySet 对象 ，包含所有的表记录</span></span><br><span class="line">    qs = Order.objects\</span><br><span class="line">            .annotate(</span><br><span class="line">                customer_name=F(<span class="string">&#x27;customer__name&#x27;</span>),</span><br><span class="line">                medicines_name=F(<span class="string">&#x27;medicines__name&#x27;</span>)</span><br><span class="line">            )\</span><br><span class="line">            .values(</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;create_date&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;customer_name&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;medicines_name&#x27;</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将 QuerySet 对象 转化为 list 类型</span></span><br><span class="line">    retlist = <span class="built_in">list</span>(qs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;retlist&#x27;</span>: retlist&#125;)</span><br></pre></td></tr></table></figure><p>第二个问题，如果一个订单里面有多个药品，就会产生多条记录， 这不是我们要的。<br>根据接口，一个订单里面的多个药品， 用 竖线 隔开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">listorder</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 返回一个 QuerySet 对象 ，包含所有的表记录</span></span><br><span class="line">    qs = Order.objects\</span><br><span class="line">            .annotate(</span><br><span class="line">                customer_name=F(<span class="string">&#x27;customer__name&#x27;</span>),</span><br><span class="line">                medicines_name=F(<span class="string">&#x27;medicines__name&#x27;</span>)</span><br><span class="line">            )\</span><br><span class="line">            .values(</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;create_date&#x27;</span>,<span class="string">&#x27;customer_name&#x27;</span>,<span class="string">&#x27;medicines_name&#x27;</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将 QuerySet 对象 转化为 list 类型</span></span><br><span class="line">    retlist = <span class="built_in">list</span>(qs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可能有 ID相同，药品不同的订单记录， 需要合并</span></span><br><span class="line">    newlist = []</span><br><span class="line">    id2order = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> one <span class="keyword">in</span> retlist:</span><br><span class="line">        orderid = one[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> orderid <span class="keyword">not</span> <span class="keyword">in</span> id2order:</span><br><span class="line">            newlist.append(one)</span><br><span class="line">            id2order[orderid] = one</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            id2order[orderid][<span class="string">&#x27;medicines_name&#x27;</span>] += <span class="string">&#x27; | &#x27;</span> + one[<span class="string">&#x27;medicines_name&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;retlist&#x27;</span>: newlist&#125;)</span><br></pre></td></tr></table></figure><h3 id="分页与过滤"><a href="#分页与过滤" class="headerlink" title="分页与过滤"></a>分页与过滤</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加对分页的支持</span></span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator, EmptyPage</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listmedicine</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 返回一个 QuerySet 对象 ，包含所有的表记录</span></span><br><span class="line">        qs = Medicine.objects.values()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 要获取的第几页</span></span><br><span class="line">        pagenum = request.params[<span class="string">&#x27;pagenum&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每页要显示多少条记录</span></span><br><span class="line">        pagesize = request.params[<span class="string">&#x27;pagesize&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回一个 QuerySet 对象 ，包含所有的表记录</span></span><br><span class="line">        qs = Medicine.objects.values()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用分页对象，设定每页多少条记录</span></span><br><span class="line">        pgnt = Paginator(qs, pagesize)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从数据库中读取数据，指定读取其中第几页</span></span><br><span class="line">        page = pgnt.page(pagenum)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将 QuerySet 对象 转化为 list 类型</span></span><br><span class="line">        retlist = <span class="built_in">list</span>(page)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># total指定了 一共有多少数据</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;retlist&#x27;</span>: retlist,<span class="string">&#x27;total&#x27;</span>: pgnt.count&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> EmptyPage:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;retlist&#x27;</span>: [], <span class="string">&#x27;total&#x27;</span>: <span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">2</span>,  <span class="string">&#x27;msg&#x27;</span>: <span class="string">f&#x27;未知错误\n<span class="subst">&#123;traceback.format_exc()&#125;</span>&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><h3 id="多条件-且关系"><a href="#多条件-且关系" class="headerlink" title="多条件 且关系"></a>多条件 且关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">qs.<span class="built_in">filter</span>(name__contains=<span class="string">&#x27;乳酸&#x27;</span>)</span><br><span class="line">转化为的sql条件</span><br><span class="line">WHERE name LIKE <span class="string">&#x27;%乳酸%&#x27;</span></span><br><span class="line"></span><br><span class="line">qs.<span class="built_in">filter</span>(name__contains=<span class="string">&#x27;乳酸&#x27;</span>,name__contains=<span class="string">&#x27;注射液&#x27;</span>)</span><br><span class="line">qs.<span class="built_in">filter</span>(name__contains=<span class="string">&#x27;乳酸&#x27;</span>).<span class="built_in">filter</span>(name__contains=<span class="string">&#x27;注射液&#x27;</span>)</span><br><span class="line">WHERE name LIKE <span class="string">&#x27;%乳酸%&#x27;</span> AND name LIKE <span class="string">&#x27;%注射液%&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="多条件-或关系"><a href="#多条件-或关系" class="headerlink" title="多条件 或关系"></a>多条件 或关系</h3><p>可以使用 Django 里面提供 的 Q 对象 。<br>Q 对象 的初始化参数里面 携带 和 filter 语法一致的 条件，比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">qs.<span class="built_in">filter</span>(Q(name__contains=<span class="string">&#x27;乳酸&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">qs.<span class="built_in">filter</span>( Q(name__contains=<span class="string">&#x27;乳酸&#x27;</span>) | Q(name__contains=<span class="string">&#x27;注射液&#x27;</span>))</span><br><span class="line"></span><br><span class="line">WHERE name LIKE <span class="string">&#x27;%乳酸%&#x27;</span> OR name LIKE <span class="string">&#x27;%注射液%&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qs.<span class="built_in">filter</span>( Q(name__contains=<span class="string">&#x27;乳酸&#x27;</span>) &amp; Q(name__contains=<span class="string">&#x27;注射液&#x27;</span>))</span><br><span class="line">WHERE name LIKE <span class="string">&#x27;%乳酸%&#x27;</span> AND name LIKE <span class="string">&#x27;%注射液%&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="自定义用户表"><a href="#自定义用户表" class="headerlink" title="自定义用户表"></a>自定义用户表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.hashers <span class="keyword">import</span> make_password,check_password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过 命令 python  manage.py createsuperuser 来创建超级管理员</span></span><br><span class="line"><span class="comment"># 就是在这User表中添加记录</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    <span class="built_in">id</span> = models.BigAutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户类型  </span></span><br><span class="line">    <span class="comment"># 1： 超管 | 1000： 普通管理员  | 2000：学生  |  3000： 老师 </span></span><br><span class="line">    usertype = models.PositiveIntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 真实姓名</span></span><br><span class="line">    realname = models.CharField(max_length=<span class="number">30</span>, db_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 学号</span></span><br><span class="line">    studentno = models.CharField(</span><br><span class="line">        max_length=<span class="number">10</span>, </span><br><span class="line">        db_index=<span class="literal">True</span>, </span><br><span class="line">        null=<span class="literal">True</span>, blank=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 备注描述</span></span><br><span class="line">    desc = models.CharField(max_length=<span class="number">500</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    REQUIRED_FIELDS = [<span class="string">&#x27;usertype&#x27;</span>, <span class="string">&#x27;realname&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;by_user&quot;</span></span><br></pre></td></tr></table></figure><p>一种推荐的方式是：通过继承 contrib.auth.models 里面的 AbstractUser 类的方式</p><p>然后，你需要告诉Django，使用这个表作为 系统的 user表。<br> 在 settings.py 中，添加如下设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AUTH_USER_MODEL = <span class="string">&#x27;myapp.User&#x27;</span></span><br></pre></td></tr></table></figure><p>其中 myapp 改为你的 User 定义 所在的 django app 名称<br>可能你会奇怪，我们为什么不能重新完全的重定义 User 表，一定要继承 contrib.auth.models 里面的 AbstractUser 类呢？<br>那是因为 Django内置的 认证 、权限 、 Session 机制 和 auth 模块深度绑定了，如果你需要使用 这些机制提供的方法，就不能抛弃 auth 里面的 user 表。<br>如果你不打算使用 Django内置的 认证 或者 Session 机制， 完全可以自己定义一张 User表。</p><p>用户表的password<br>Django 的密码不是明文存储的， 有好几种方式。可以使用 Django 库提供的方法 产生 password 字段值（通常是hash处理过）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.hashers <span class="keyword">import</span> make_password,check_password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一条记录</span></span><br><span class="line">user = User.objects.create(</span><br><span class="line">    username  = username,</span><br><span class="line">    <span class="comment"># 使用 make_password 函数 产生password字段</span></span><br><span class="line">    password  = make_password(data[<span class="string">&#x27;password&#x27;</span>]),</span><br><span class="line">    <span class="comment"># 其他字段...)</span></span><br></pre></td></tr></table></figure><p>使用 Django auth 库里面的 authenticate 方法 就包含了 校验用户名、密码的过程，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate, login, logout</span><br><span class="line"><span class="comment"># 使用 Django auth 库里面的 方法校验用户名、密码</span></span><br><span class="line">user = authenticate(username=userName, password=passWord)</span><br></pre></td></tr></table></figure><p>数据操作移到models中<br>为了实现后端系统的功能合理划分，建议把业务逻辑放在 view 代码中，而把数据底层处理放在 models<br>这样， 处理HTTP请求的 view代码，只需要调用 models中的方法即可。<br>处理 添加用户的view</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">adduser</span>(<span class="params">request</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求消息中 获取要添加客户的信息</span></span><br><span class="line">    <span class="comment"># 并且插入到数据库中</span></span><br><span class="line"></span><br><span class="line">    data = request.param_dict[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 直接调用 models中的添加 用户 的代码    </span></span><br><span class="line">    ret = User.add(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  JsonResponse(ret)</span><br></pre></td></tr></table></figure><p>models中 真正实现添加功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    <span class="built_in">id</span> = models.BigAutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    usertype = models.PositiveIntegerField()</span><br><span class="line">    realname = models.CharField(max_length=<span class="number">30</span>, db_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;cimp_user&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 直接在Model中用静态方法定义数据操作</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">data,usertype</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            username = data[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> User.objects.<span class="built_in">filter</span>(username=username).exists():</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">f&#x27;登录名 <span class="subst">&#123;username&#125;</span> 已经存在&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">            user = User.objects.create(</span><br><span class="line">                    username  = username,</span><br><span class="line">                    password  = make_password(data[<span class="string">&#x27;password&#x27;</span>]),</span><br><span class="line">                    usertype  = usertype,</span><br><span class="line">                    realname  = data[<span class="string">&#x27;realname&#x27;</span>],</span><br><span class="line">                    studentno = data[<span class="string">&#x27;studentno&#x27;</span>],</span><br><span class="line">                    desc      = data[<span class="string">&#x27;desc&#x27;</span>]</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">0</span>,<span class="string">&#x27;id&#x27;</span>: user.<span class="built_in">id</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="函数定义的参数-request"><a href="#函数定义的参数-request" class="headerlink" title="函数定义的参数 request"></a>函数定义的参数 request</h2><p>Django 框架在 url 路由匹配到函数后， 调用函数时，会传入 一个 HttpRequest 对象给参数变量 request，该对象里面 包含了请求的数据信息。<br>HTTP 的 Get 请求url里面的参数（术语叫 querystring 里面的参数）， 可以通过 HttpRequest对象的 GET 属性获取。这是一个类似dict的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ph =  request.GET.get(<span class="string">&#x27;phonenumber&#x27;</span>,<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>第二个参数传入 None 表示，如果没有 phonenumber 参数在 querystring中 ，就会返回 None。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据挖掘 数据获取</title>
      <link href="/2024/04/09/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B9%8B%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96/"/>
      <url>/2024/04/09/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B9%8B%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h2 id="1-requests"><a href="#1-requests" class="headerlink" title="1 requests"></a>1 requests</h2><h3 id="1-1requests-属性"><a href="#1-1requests-属性" class="headerlink" title="1.1requests.属性"></a>1.1requests.属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(url)</span><br><span class="line"><span class="comment"># 网页响应内容的字符串形式</span></span><br><span class="line">r.text</span><br><span class="line"><span class="comment"># 网页响应内容的二进制形式</span></span><br><span class="line">r.content</span><br><span class="line"><span class="comment"># 猜测网页响应内容的编码方式</span></span><br><span class="line">r.encoding</span><br><span class="line"><span class="comment"># 根据网页内容分析出内容的编码方式</span></span><br><span class="line">r.apparent_encoding</span><br><span class="line"><span class="comment"># 状态码 200代表连接成功，404表示失败</span></span><br><span class="line">r.status_code</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2-requests-实例"><a href="#1-2-requests-实例" class="headerlink" title="1.2 requests 实例"></a>1.2 requests 实例</h3><p>实例1 爬取单张图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;https://fileshare.tangwan16.cn/image/about.jpg&quot;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">data = r.content</span><br><span class="line">fobj = <span class="built_in">open</span>(<span class="string">&quot;result.jpg&quot;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">fobj.write(data)</span><br><span class="line">fobj.close()</span><br></pre></td></tr></table></figure><p>实例2 爬取网页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://www.people.com.cn&quot;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">data = r.text</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;paper.txt&quot;</span>, <span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fobj:</span><br><span class="line">    fobj.write(data)</span><br></pre></td></tr></table></figure><h2 id="2-re"><a href="#2-re" class="headerlink" title="2 re"></a>2 re</h2><h3 id="2-1-re库的内置函数"><a href="#2-1-re库的内置函数" class="headerlink" title="2.1 re库的内置函数"></a>2.1 re库的内置函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string = <span class="string">&quot;I love it. It loves me.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于从起始位置匹配，若起始位置字符不是匹配内容返回none</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">&quot;it&quot;</span>,string)</span><br><span class="line"><span class="comment"># 搜索整个字符串，返回第一次出现的位置</span></span><br><span class="line">re.search(<span class="string">&quot;it&quot;</span>,string)</span><br><span class="line"><span class="comment"># 以列表形式返回全部能匹配的字符串</span></span><br><span class="line">re.findall(<span class="string">&quot;it&quot;</span>,string)</span><br><span class="line"><span class="comment"># 创建一个正则表达式对象，可以配合正则表达式修饰符使用</span></span><br><span class="line">re.<span class="built_in">compile</span>(<span class="string">&quot;it&quot;</span>，)</span><br></pre></td></tr></table></figure><h3 id="2-2-正则表达式修饰符含义"><a href="#2-2-正则表达式修饰符含义" class="headerlink" title="2.2 正则表达式修饰符含义"></a>2.2 正则表达式修饰符含义</h3><p><img src="https://picmd.tangwan16.cn/posts/python/re%E4%B8%8Erequests/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.png"></p><h3 id="2-3-字符串匹配表"><a href="#2-3-字符串匹配表" class="headerlink" title="2.3 字符串匹配表"></a>2.3 字符串匹配表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配一个数字字符</span></span><br><span class="line">\d </span><br><span class="line"><span class="comment"># 匹配一个字母、数字及下划线字符</span></span><br><span class="line">\W</span><br><span class="line"><span class="comment"># 匹配一个空白字符</span></span><br><span class="line">\s</span><br><span class="line"><span class="comment"># 匹配一个任意字符，换行符除外</span></span><br><span class="line">.</span><br><span class="line"><span class="comment"># 匹配一个换行符</span></span><br><span class="line">\n</span><br><span class="line"><span class="comment"># 匹配一个制表符</span></span><br><span class="line">\t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配前面的字符0次或n次</span></span><br><span class="line">*</span><br><span class="line"><span class="comment"># 匹配前面的字符1次或n次</span></span><br><span class="line">+</span><br><span class="line"><span class="comment"># 匹配前面的字符0次或1次</span></span><br><span class="line">?</span><br><span class="line"><span class="comment"># 匹配括号内表达式，也表示一个组</span></span><br><span class="line">()</span><br><span class="line"><span class="comment"># 匹配m-n个字符</span></span><br><span class="line">&#123;m,n&#125;</span><br><span class="line"><span class="comment"># 表示字符范围,方括号中只能取一个</span></span><br><span class="line">[]</span><br><span class="line"><span class="comment"># 表示行开头，^\d表示必须以数字开头 </span></span><br><span class="line">^</span><br><span class="line"><span class="comment"># 表示行结束,\d$表示必须以数字结束</span></span><br><span class="line">$</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合使用实例,匹配以e结尾不超过4个长度的字符</span></span><br><span class="line">re.findall(<span class="string">&quot;\w&#123;1,4&#125;e&quot;</span>,string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取html中src中连接</span></span><br><span class="line">s=<span class="string">&#x27;&#x27;&#x27;&lt;img src=&quot;C:\\XH.jpg&quot; width=&quot;300&quot;/&gt;</span></span><br><span class="line"><span class="string">&lt;img src=&quot;C:\\FX.jpg&quot; width=&quot;300&quot;/&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 贪婪模式，尽可能多的匹配字符</span></span><br><span class="line">result5 = re.findall(<span class="string">&#x27;&lt;img src=&quot;(.*)&quot;&#x27;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(result5) [<span class="string">&#x27;C:\\XH.jpg&quot; width=&quot;300&#x27;</span>, <span class="string">&#x27;C:\\FX.jpg&quot; width=&quot;300&#x27;</span>]</span><br><span class="line"><span class="comment"># 非贪婪模式，尽可能少的匹配字符</span></span><br><span class="line">result6 = re.findall(<span class="string">&#x27;&lt;img src=&quot;(.*?)&quot;&#x27;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(result6) [<span class="string">&#x27;C:\\XH.jpg&#x27;</span>, <span class="string">&#x27;C:\\FX.jpg&#x27;</span>]</span><br><span class="line">result7 = re.findall(<span class="string">&#x27;&lt;img src=&quot;(.*?)&quot; width=&quot;(.*?)&quot;&#x27;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(result7) [<span class="string">&#x27;C:\\XH.jpg&#x27;</span>, <span class="string">&#x27;C:\\FX.jpg&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="2-4-实例"><a href="#2-4-实例" class="headerlink" title="2.4 实例"></a>2.4 实例</h3><p>实例1 爬取人民网连接和标题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re,requests</span><br><span class="line">url = <span class="string">&quot;http://www.people.com.cn&quot;</span></span><br><span class="line">html = requests.get(url)</span><br><span class="line">html.encoding = html.apparent_encoding</span><br><span class="line">data = html.text</span><br><span class="line"></span><br><span class="line">res = re.findall(<span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;(.*?)&quot; target=&quot;_blank&quot;&gt;(.*?)&lt;/a&gt;&lt;/li&gt;&#x27;</span>,data)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">fobj = <span class="built_in">open</span>(<span class="string">&#x27;people.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> res:</span><br><span class="line">    fobj.write(line[<span class="number">0</span>]+<span class="string">&quot;,&quot;</span>+line[<span class="number">1</span>]+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">fobj.close()</span><br></pre></td></tr></table></figure><p>实例2 爬取新闻图片素材</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re,requests</span><br><span class="line">url = <span class="string">&quot;http://www.people.com.cn&quot;</span></span><br><span class="line">html = requests.get(url)</span><br><span class="line">html.encoding = html.apparent_encoding</span><br><span class="line">data = html.text</span><br><span class="line"></span><br><span class="line">res = re.findall(<span class="string">&#x27;&lt;img src=&quot;(.*?.jpg)&quot;&#x27;</span>,data)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> res:</span><br><span class="line">    html = requests.get(url+img)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./result/&quot;</span>+<span class="built_in">str</span>(x)+<span class="string">&quot;.jpg&quot;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fobj:</span><br><span class="line">        fobj.write(html.content)</span><br><span class="line">    x+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="3-数据清洗常见方法"><a href="#3-数据清洗常见方法" class="headerlink" title="3 数据清洗常见方法"></a>3 数据清洗常见方法</h2><h3 id="3-1-用strip-函数删除空格及换行符等非相关符号"><a href="#3-1-用strip-函数删除空格及换行符等非相关符号" class="headerlink" title="3.1 用strip()函数删除空格及换行符等非相关符号"></a>3.1 用strip()函数删除空格及换行符等非相关符号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res=<span class="string">&#x27; 华能信托本年实现利润32.05亿元 &#x27;</span></span><br><span class="line">res = res.strip()</span><br><span class="line"><span class="built_in">print</span>(res) 华能信托本年实现利润<span class="number">32.05</span>亿元</span><br></pre></td></tr></table></figure><h3 id="3-2-用split-函数截取需求的内容"><a href="#3-2-用split-函数截取需求的内容" class="headerlink" title="3.2 用split()函数截取需求的内容"></a>3.2 用split()函数截取需求的内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date=<span class="string">&#x27;2019-01-20 10:10:10&#x27;</span></span><br><span class="line">date = date.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(date) <span class="number">2019</span>-01-<span class="number">20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-3-用sub-函数进行内容替换"><a href="#3-3-用sub-函数进行内容替换" class="headerlink" title="3.3 用sub()函数进行内容替换"></a>3.3 用sub()函数进行内容替换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">title=<span class="string">&#x27;阿里&lt;em&gt;巴巴&lt;/em&gt;人工智能再发力&#x27;</span></span><br><span class="line">title = re.sub(<span class="string">&#x27;&lt;(.*?)&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,title)</span><br><span class="line"><span class="built_in">print</span>(title) 阿里巴巴人工智能再发力</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朴素贝叶斯</title>
      <link href="/2024/04/08/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
      <url>/2024/04/08/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="1-贝叶斯方法"><a href="#1-贝叶斯方法" class="headerlink" title="1 贝叶斯方法"></a>1 贝叶斯方法</h2><h3 id="1-1背景知识"><a href="#1-1背景知识" class="headerlink" title="1.1背景知识"></a>1.1背景知识</h3><h4 id="了解贝叶斯决策论"><a href="#了解贝叶斯决策论" class="headerlink" title="了解贝叶斯决策论"></a>了解贝叶斯决策论</h4><p>贝叶斯决策论更多地从观察者的角度出发,事件的随机性是由观察者掌握的信息不够充分造成的,观察者所掌握的信息充分程度将影响观察者对于事件的认知<br>贝叶斯决策理论的核心思想是 ：选择具有最高发生概率的事件作为最优决策，新的数据点被归类到了概率较高的那一个类别</p><h4 id="贝叶斯分类：以贝叶斯定理为基础的分类算法"><a href="#贝叶斯分类：以贝叶斯定理为基础的分类算法" class="headerlink" title="贝叶斯分类：以贝叶斯定理为基础的分类算法"></a>贝叶斯分类：以贝叶斯定理为基础的分类算法</h4><h4 id="先验概率：𝑃-𝑌"><a href="#先验概率：𝑃-𝑌" class="headerlink" title="先验概率：𝑃(𝑌)"></a>先验概率：𝑃(𝑌)</h4><p>根据以往经验和分析得到的概率。我们用𝑃(𝑌)来代表在没有训练数据前假设𝑌拥有的初始概率 </p><h4 id="后验概率：𝑃-𝑌-𝑋"><a href="#后验概率：𝑃-𝑌-𝑋" class="headerlink" title="后验概率：𝑃(𝑌|𝑋)"></a>后验概率：𝑃(𝑌|𝑋)</h4><p>根据已经发生的事件来分析得到的概率。反映了在看到训练数据𝑋后𝑌成立的置信度<br>联合概率：𝑋与𝑌的联合概率表示为𝑃(𝑋,𝑌) 、𝑃(𝑋𝑌) 或𝑃(𝑋 ∩ 𝑌)<br>假设𝑋和𝑌都服从正态分布，那么𝑃(𝑋 &lt; 5, 𝑌 &lt; 0)就是一个联合概率，表示 𝑋 &lt; 5, 𝑌 &lt; 0两个条件同时成立的概率。表示两个事件共同发生的概率。 </p><h3 id="1-2贝叶斯公式"><a href="#1-2贝叶斯公式" class="headerlink" title="1.2贝叶斯公式"></a>1.2贝叶斯公式</h3><p><img src="https://picmd.tangwan16.cn/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%85%AC%E5%BC%8F.png"></p><h2 id="2-朴素贝叶斯原理"><a href="#2-朴素贝叶斯原理" class="headerlink" title="2 朴素贝叶斯原理"></a>2 朴素贝叶斯原理</h2><h3 id="2-1-判别模型和生成模型"><a href="#2-1-判别模型和生成模型" class="headerlink" title="2.1 判别模型和生成模型"></a>2.1 判别模型和生成模型</h3><p>监督学习方法又分：生成方法（Generative approach）和判别方法（Discriminative approach）<br>所学到的模型分别称为：生成模型（Generative Model）和判别模型（Discriminative Model)<br> <img src="https://picmd.tangwan16.cn/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/%E5%88%A4%E5%88%AB%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B.png"></p><h3 id="2-2基本原理"><a href="#2-2基本原理" class="headerlink" title="2.2基本原理"></a>2.2基本原理</h3><p>  朴素贝叶斯法是典型的生成学习方法<br> 朴素贝叶斯方法在传统的贝叶斯方法上作出基本假设:条件独立性<br>条件独立性假设：<br><img src="https://picmd.tangwan16.cn/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/%E6%9D%A1%E4%BB%B6%E7%8B%AC%E7%AB%8B%E6%80%A7.png"><br> 优点：高效、且易于实现，缺点：对于属性特征之间作出相互独立的假设，导致分类性能不一定很高<br> 朴素贝叶斯法利用贝叶斯定理与学到的联合概率模型进行分类预测<br><img src="https://picmd.tangwan16.cn/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/%E5%90%8E%E9%AA%8C%E6%A6%82%E7%8E%87%E6%9C%80%E5%A4%A7.png"><br>贝叶斯公式：<br><img src="https://picmd.tangwan16.cn/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%85%AC%E5%BC%8F2.2.png"><br>根据全概率公式，以下公式对于所有贝叶斯定理都成立，包括朴素贝叶斯<br><img src="https://picmd.tangwan16.cn/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%85%AC%E5%BC%8F2.2_2.png"><br>根据条件独立假设：以下公式只对朴素贝叶斯成立<br><img src="https://picmd.tangwan16.cn/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/2.2_3.png"></p><h2 id="3-朴素贝叶斯案例"><a href="#3-朴素贝叶斯案例" class="headerlink" title="3 朴素贝叶斯案例"></a>3 朴素贝叶斯案例</h2><p><img src="https://picmd.tangwan16.cn/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/3_1.png"><br> <img src="https://picmd.tangwan16.cn/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/3_2.png"><br> <img src="https://picmd.tangwan16.cn/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/3_3.png"><br><img src="https://picmd.tangwan16.cn/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/3_4.png"><br>采用拉普拉斯平滑方法：为每个计数加1，因此它永远不会为零。为了平衡这一点，我们将可能单词的数量添加到除数中，因此计算结果永远不会大于1<br> <img src="https://picmd.tangwan16.cn/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/3_5.png"><br>拉普拉斯平滑方法：<br>是一种用于平滑分类数据的技术。引入拉普拉斯平滑法来解决零概率问题,通过应用此方法,先验概率和条件概率可以写为 ：<br><img src="https://picmd.tangwan16.cn/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/3_6.png"><br>加入拉普拉斯平滑之后，避免了出现概率为0的情况，又保证了每个值都在0到1的范围内，又保证了最终和为1的概率性质。<br> <img src="https://picmd.tangwan16.cn/posts/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/3_7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 朴素贝叶斯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Butterfly</title>
      <link href="/2024/03/23/Hexo+Butterfly/"/>
      <url>/2024/03/23/Hexo+Butterfly/</url>
      
        <content type="html"><![CDATA[<p>#Hexo+Butterfly</p>]]></content>
      
      
      <categories>
          
          <category> 建站教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo+Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pinia的部署与使用</title>
      <link href="/2024/03/23/pinia/"/>
      <url>/2024/03/23/pinia/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装pinia到项目中"><a href="#1-安装pinia到项目中" class="headerlink" title="1 安装pinia到项目中"></a>1 安装pinia到项目中</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add pinia</span><br><span class="line">或 </span><br><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; createPinia &#125; from &#x27;pinia&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">const pinia = createPinia()</span><br><span class="line">const app = createApp(App)</span><br><span class="line">app.use(pinia).mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h2 id="store的定义与使用"><a href="#store的定义与使用" class="headerlink" title="store的定义与使用"></a>store的定义与使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">store/counter.js</span><br><span class="line">defineStore(仓库的唯一标识，()=&gt;&#123;&#125;)</span><br><span class="line"></span><br><span class="line">export const userCounterStore =defineStore(&#x27;counter&#x27;,()=&gt;&#123;</span><br><span class="line">//声明数据state使用ref()</span><br><span class="line">const count =ref(100)</span><br><span class="line">//声明操作数据的方法（普通函数）</span><br><span class="line">const addCount =()=&gt;count.value++</span><br><span class="line">const subCount =()=&gt;count.value--</span><br><span class="line">//声明基于数据派生的计算属性getters使用computed</span><br><span class="line">const doubleCount =computed(()=&gt;count.value*2)</span><br><span class="line">return &#123;</span><br><span class="line">count,</span><br><span class="line">addCount,</span><br><span class="line">subCount,</span><br><span class="line">doubleCount</span><br><span class="line">&#125;</span><br><span class="line">//异步请求</span><br><span class="line">const channels = ref([])</span><br><span class="line">const getList = async ()=&gt;&#123;</span><br><span class="line">const data = await axios.get(&#x27;http://geek.itheima.net/v1_0/channels&#x27;)</span><br><span class="line">channels.value =data.data.data.channels</span><br><span class="line">console.log(channels.value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="数据的解构同时保持数据-storeToRefs"><a href="#数据的解构同时保持数据-storeToRefs" class="headerlink" title="数据的解构同时保持数据 storeToRefs"></a>数据的解构同时保持数据 storeToRefs</h2><p>&#x2F;&#x2F;响应式丢失，视图不再更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//响应式丢失，视图不再更新</span><br><span class="line">const &#123;count,doubleCount &#125; = counterStore</span><br><span class="line">//保持数据响应式</span><br><span class="line">const &#123;count,doubleCount &#125; =storeToRefs(counterStore)</span><br><span class="line">//函数结构不需要的使用storeToRefs</span><br></pre></td></tr></table></figure><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>官方文档：<a href="https://prazdevs.github.io/pinia-plugin-persistedstate/zh/">https://prazdevs.github.io/pinia-plugin-persistedstate/zh/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add pinia-plugin-persistedstate</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createPinia &#125; from &#x27;pinia&#x27;</span><br><span class="line">import piniaPluginPersistedstate from &#x27;pinia-plugin-persistedstate&#x27;</span><br><span class="line"></span><br><span class="line">const pinia = createPinia()</span><br><span class="line">pinia.use(piniaPluginPersistedstate)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export const useCounterStore = defineStore(&#x27;counter&#x27;, () =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line">  return &#123;</span><br><span class="line">    count,</span><br><span class="line">    doubleCount,</span><br><span class="line">    increment</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  persist: true</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">persist: &#123;</span><br><span class="line">  key: &#x27;my-custom-key&#x27;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">export const useStore = defineStore(&#x27;store&#x27;, &#123;</span><br><span class="line">  state: () =&gt; (&#123;</span><br><span class="line">    save: &#123;</span><br><span class="line">      me: &#x27;saved&#x27;,</span><br><span class="line">      notMe: &#x27;not-saved&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    saveMeToo: &#x27;saved&#x27;,</span><br><span class="line">  &#125;),</span><br><span class="line">  persist: &#123;</span><br><span class="line">    paths: [&#x27;save.me&#x27;, &#x27;saveMeToo&#x27;],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pinia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot</title>
      <link href="/2024/03/19/springboot/"/>
      <url>/2024/03/19/springboot/</url>
      
        <content type="html"><![CDATA[<p>#springboot</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/2024/03/19/vue3/"/>
      <url>/2024/03/19/vue3/</url>
      
        <content type="html"><![CDATA[<p>#vue3</p>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么逻辑回归不用MSE而用交叉熵</title>
      <link href="/2024/03/12/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%B8%8D%E7%94%A8MSE%E8%80%8C%E7%94%A8%E4%BA%A4%E5%8F%89%E7%86%B5/"/>
      <url>/2024/03/12/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%B8%8D%E7%94%A8MSE%E8%80%8C%E7%94%A8%E4%BA%A4%E5%8F%89%E7%86%B5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>桑榆非晚</title>
      <link href="/2024/03/12/%E6%A1%91%E6%A6%86%E9%9D%9E%E6%99%9A/"/>
      <url>/2024/03/12/%E6%A1%91%E6%A6%86%E9%9D%9E%E6%99%9A/</url>
      
        <content type="html"><![CDATA[<p>#莫道桑榆晚，为霞尚满天</p>]]></content>
      
      
      <categories>
          
          <category> 生活趣闻 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/universe.css"/>
      <url>/css/universe.css</url>
      
        <content type="html"><![CDATA[/* 背景宇宙星光  */#universe{    display: block;    position: fixed;    margin: 0;    padding: 0;    border: 0;    outline: 0;    left: 0;    top: 0;    width: 100%;    height: 100%;    pointer-events: none;    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */    z-index: -1;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h3 id="about界面"><a href="#about界面" class="headerlink" title="about界面"></a>about界面</h3>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>gallery</title>
      <link href="/gallery/index.html"/>
      <url>/gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/runtime.css"/>
      <url>/css/runtime.css</url>
      
        <content type="html"><![CDATA[/*电子钟字体*/@font-face {    font-family: 'UnidreamLED';    src: url(/font/UnidreamLED.ttf);    font-display: auto;  }  div#runtime {    width: 180px;    margin: auto;    color: #fff;    padding-inline: 5px;    border-radius: 10px;    background-color: rgba(0,0,0,0.7);    font-family: 'UnidreamLED';  }  [data-theme="dark"] div#runtime {    color: #a9e1ea;    box-shadow: 0 0 5px rgba(28,69,218,0.71);    animation: flashlight 1s linear infinite alternate;  }  [data-theme=dark] a.github-badge:hover:before {    background-color: rgba(18,18,18,0.8);  }  @-moz-keyframes flashlight {    from {      box-shadow: 0 0 5px #1478d2;    }    to {      box-shadow: 0 0 2px #1478d2;    }  }  @-webkit-keyframes flashlight {    from {      box-shadow: 0 0 5px #1478d2;    }    to {      box-shadow: 0 0 2px #1478d2;    }  }  @-o-keyframes flashlight {    from {      box-shadow: 0 0 5px #1478d2;    }    to {      box-shadow: 0 0 2px #1478d2;    }  }  @keyframes flashlight {    from {      box-shadow: 0 0 5px #1478d2;    }    to {      box-shadow: 0 0 2px #1478d2;    }  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML =  `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='rgb(57, 197, 187)'/></svg>") 4 4, auto}`    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }  #ft {    max-width: 1200px;    margin: 0 auto 12px;    display: flex;    color: rgb(255 255 255 / 80%) !important;    text-align: left;    flex-wrap: wrap;  }    .ft-item-1,  .ft-item-2 {    display: flex;    height: 100%;    padding: 2px 14px;  }    .ft-item-1 {    flex-direction: column;    flex: 2;  }    .ft-item-2 {    flex: 1;    flex-direction: column;  }    .t-top {    display: flex;  }    .t-top .t-t-l {    display: flex;    flex-direction: column;    flex: 1.4;    margin-right: 10px;  }    .t-top .t-t-l .bg-ad {    width: 85%;    border-radius: 10px;    padding: 0 10px;  }    .btn-xz-box {    margin-top: 10px;  }    .btn-xz {    display: block;    background-color: var(--btn-bg);    color: var(--btn-color);    text-align: center;    line-height: 2.4;    margin: 8px 0;  }    .btn-xz:hover {    text-decoration: none !important;  }    .btn-xz-box:hover .btn-xz {    background-color: var(--text-bg-hover) !important;  }    .t-top .t-t-r {    display: flex;    flex-direction: column;    flex: 1;  }    .ft-links {    padding: 0 14px;    list-style: none;    margin-top: 0 !important;  }    .ft-links li a {    display: inline-block !important;    width: 50%;  }    .ft-links li a:hover {    text-decoration: none !important;    color: var(--theme-color) !important;  }    .ft-item-2 .ft-img-group {    width: 100%;  }    .ft-t {    font-size: 1.1rem;    margin-bottom: 20px;    line-height: 1;    font-weight: 600;  }    .t-l-t {    padding-left: 14px;  }    .ft-item-2 .ft-img-group .img-group-item {    display: inline-block;    width: 18.4%;    margin-right: 14px;    margin-bottom: 6px;  }    .ft-item-2 .ft-img-group .img-group-item a {    display: inline-block;    width: 100%;    height: 100%;  }    .ft-item-2 .ft-img-group .img-group-item a img {    width: 100%;    max-height: 80px;    border-radius: 10px;  }    .ft-item-2 .ft-img-group .img-group-item a img:hover {    scale: 1.1;    transition: all 0.3s ease-in-out;  }    @media screen and (max-width: 768px) {    .ft-item-1 {      flex-basis: 100% !important;    }      .ft-item-2 {      flex-basis: 100% !important;    }      .t-top .t-t-l .bg-ad {      width: 100%;    }  }    @media screen and (max-width: 576px) {    .t-top {      flex-wrap: wrap;    }      .t-top .t-t-l {      flex-basis: 100% !important;    }      .t-top .t-t-r {      margin-top: 16px;      flex-basis: 100% !important;    }  }  #footer-wrap a {    border-radius: 30px;  }  #footer-wrap {    padding: 20px 20px;  }  /* 自定义底部  End */  /* 小冰分类分类磁铁黑夜模式适配 *//* 一般状态 */[data-theme="dark"] .magnet_link_context {  background: #1e1e1e;  color: antiquewhite;}/* 鼠标悬浮状态 */[data-theme="dark"] .magnet_link_context:hover {  background: #3ecdf1;  color: #f2f2f2;}/* 自定义字体 */@font-face {  /* 为载入的字体取名字(随意) */  font-family: 'YSHST';  /* 字体文件地址(相对或者绝对路径都可以) */  src: url(/font/YSHaoShenTi-2.ttf);  /* 定义加粗样式(加粗多少) */  font-weight: normal;  /* 定义字体样式(斜体/非斜体) */  font-style: normal;  /* 定义显示样式 */  font-display: auto;}/* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/* 导航栏魔改 *//* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(6) .menus_item_child {  left: -75px;}/* 黑夜灯光 *//* 日间模式不生效 */[data-theme="light"] #site-name,[data-theme="light"] #site-title,[data-theme="light"] #site-subtitle,[data-theme="light"] #post-info {  animation: none;}/* 夜间模式生效 */[data-theme="dark"] #site-name,[data-theme="dark"] #site-title {  animation: light_15px 10s linear infinite;}[data-theme="dark"] #site-subtitle {  animation: light_10px 10s linear infinite;}[data-theme="dark"] #post-info {  animation: light_5px 10s linear infinite;}/* 关键帧描述 */@keyframes light_15px {  0% {    text-shadow: #5636ed 0 0 15px;  }  12.5% {    text-shadow: #11ee5e 0 0 15px;  }  25% {    text-shadow: #f14747 0 0 15px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 15px;  }  50% {    text-shadow: #b347f1 0 0 15px;  }  62.5% {    text-shadow: #002afa 0 0 15px;  }  75% {    text-shadow: #ed709b 0 0 15px;  }  87.5% {    text-shadow: #39c5bb 0 0 15px;  }  100% {    text-shadow: #5636ed 0 0 15px;  }}@keyframes light_10px {  0% {    text-shadow: #5636ed 0 0 10px;  }  12.5% {    text-shadow: #11ee5e 0 0 10px;  }  25% {    text-shadow: #f14747 0 0 10px;  }  37.5% {    text-shadow: #f1a247 0 0 10px;  }  50% {    text-shadow: #f1ee47 0 0 10px;  }  50% {    text-shadow: #b347f1 0 0 10px;  }  62.5% {    text-shadow: #002afa 0 0 10px;  }  75% {    text-shadow: #ed709b 0 0 10px;  }  87.5% {    text-shadow: #39c5bb 0 0 10px;  }  100% {    text-shadow: #5636ed 0 0 10px;  }}@keyframes light_5px {  0% {    text-shadow: #5636ed 0 0 5px;  }  12.5% {    text-shadow: #11ee5e 0 0 5px;  }  25% {    text-shadow: #f14747 0 0 5px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 5px;  }  50% {    text-shadow: #b347f1 0 0 5px;  }  62.5% {    text-shadow: #002afa 0 0 5px;  }  75% {    text-shadow: #ed709b 0 0 5px;  }  87.5% {    text-shadow: #39c5bb 0 0 5px;  }  100% {    text-shadow: #5636ed 0 0 5px;  }}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 鼠标样式 */#cursor {  position: fixed;  width: 16px;  height: 16px;  /* 这里改变跟随的底色 */  background: rgb(57, 197, 187);  border-radius: 8px;  opacity: 0.25;  z-index: 10086;  pointer-events: none;  transition: 0.2s ease-in-out;  transition-property: background, opacity, transform;}#cursor.hidden {  opacity: 0;}#cursor.hover {  opacity: 0.1;  transform: scale(2.5);  -webkit-transform: scale(2.5);  -moz-transform: scale(2.5);  -ms-transform: scale(2.5);  -o-transform: scale(2.5);}#cursor.active {  opacity: 0.5;  transform: scale(0.5);  -webkit-transform: scale(0.5);  -moz-transform: scale(0.5);  -ms-transform: scale(0.5);  -o-transform: scale(0.5);}/* 页面样式调节 */:root {  --trans-light: rgba(255, 255, 255, 0.88);  --trans-dark: rgba(25, 25, 25, 0.88);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(5px) saturate(150%);}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}/* 阿里的iconfont */.iconfont {  font-family: "iconfont" !important;  /* 这里可以自定义图标大小 */  font-size: 3em;  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}svg.icon {  width: 1.28em;  height: 1.28em;  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/githubcalendar.js"/>
      <url>/js/githubcalendar.js</url>
      
        <content type="html"><![CDATA[var github_canlendar = (git_user, git_color) => {    var git_githubapiurl = "https://github-calendar-api.meta-code.top/api?user=" + git_user;    var git_fixed = 'fixed';    var git_px = 'px';    var git_month = ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'];    var git_monthchange = [];    var git_oneyearbeforeday = '';    var git_thisday = '';    var git_amonthago = '';    var git_aweekago = '';    var git_weekdatacore = 0;    var git_datacore = 0;    var git_total = 0;    var git_datadate = '';    var git_git_data = [];    var git_positionplusdata = [];    var git_firstweek = [];    var git_lastweek = [];    var git_beforeweek = [];    var git_thisweekdatacore = 0;    var git_mounthbeforeday = 0;    var git_mounthfirstindex = 0;    var git_crispedges = 'crispedges';    var git_thisdayindex = 0;    var git_amonthagoindex = 0;    var git_amonthagoweek = [];    var git_firstdate = [];    var git_first2date = [];    var git_montharrbefore = [];    var git_monthindex = 0;    var retinaCanvas = (canvas, context, ratio) => {        if (ratio > 1) {            var canvasWidth = canvas.width;            var canvasHeight = canvas.height;            canvas.width = canvasWidth * ratio;            canvas.height = canvasHeight * ratio;            canvas.style.width = '100%';            canvas.style.height = canvasHeight + 'px';            context.scale(ratio, ratio);        }    };    function responsiveChart() {        var ratio = window.devicePixelRatio || 1        var git_tooltip_container = document.getElementById('git_tooltip_container');        var git_x = '';        var git_y = '';        var git_span1 = '';        var git_span2 = '';        var c = document.getElementById("gitcanvas");        c.style.width ='100%';        c.style.height ='';        var cmessage = document.getElementById("gitmessage");        var ctx = c.getContext("2d");        width = c.width = document.getElementById("gitcalendarcanvasbox").offsetWidth;        height = c.height = 9 * 0.96 * c.width / git_data.length;        retinaCanvas(c,ctx, ratio)        var linemaxwitdh = height/ 9;        var lineminwitdh = 0.8 * linemaxwitdh;        var setposition = {x: 0.02 * width, y: 0.025 * width};        for (var week in git_data) {            weekdata = git_data[week];            for (var day in weekdata) {                var dataitem = {date: "", count: "", x: 0, y: 0};                git_positionplusdata.push(dataitem);                ctx.fillStyle = git_thiscolor(git_color, weekdata[day].count);                setposition.y = Math.round(setposition.y * 100) / 100;                dataitem.date = weekdata[day].date;                dataitem.count = weekdata[day].count;                dataitem.x = setposition.x;                dataitem.y = setposition.y;                ctx.fillRect(setposition.x, setposition.y, lineminwitdh, lineminwitdh);                setposition.y = setposition.y + linemaxwitdh            }            setposition.y = 0.025 * width;            setposition.x = setposition.x + linemaxwitdh        }        if (document.body.clientWidth > 700) {            ctx.font = "600  Arial";            ctx.fillStyle = '#aaa';            ctx.fillText("日", 0, 1.9 * linemaxwitdh);            ctx.fillText("二", 0, 3.9 * linemaxwitdh);            ctx.fillText("四", 0, 5.9 * linemaxwitdh);            ctx.fillText("六", 0, 7.9 * linemaxwitdh);            var monthindexlist = width / 24;            for (var index in git_monthchange) {                ctx.fillText(git_monthchange[index], monthindexlist, 0.7 * linemaxwitdh);                monthindexlist = monthindexlist + width / 12            }        }        c.onmousemove = function (event) {            if (document.querySelector('.gitmessage')) {                git_tooltip_container.innerHTML = ""            }            getMousePos(c, event)        };        git_tooltip_container.onmousemove = function (event) {            if (document.querySelector('.gitmessage')) {                git_tooltip_container.innerHTML = ""            }        };        function getMousePos(canvas, event) {            var rect = canvas.getBoundingClientRect();            var x = event.clientX - rect.left * (canvas.width / rect.width);            var y = event.clientY - rect.top * (canvas.height / rect.height);            for (var item of git_positionplusdata) {                var lenthx = x - item.x;                var lenthy = y - item.y;                if (0 < lenthx && lenthx < lineminwitdh) {                    if (0 < lenthy && lenthy < lineminwitdh) {                        git_span1 = item.date;                        git_span2 = item.count;                        git_x = event.clientX - 100;                        git_y = event.clientY - 60;                        html = tooltip_html(git_x, git_y, git_span1, git_span2);                        append_div_gitcalendar(git_tooltip_container, html)                    }                }            }        }    }    function addlastmonth() {        if (git_thisdayindex === 0) {            thisweekcore(52);            thisweekcore(51);            thisweekcore(50);            thisweekcore(49);            thisweekcore(48);            git_thisweekdatacore += git_firstdate[6].count;            git_amonthago = git_firstdate[6].date        } else {            thisweekcore(52);            thisweekcore(51);            thisweekcore(50);            thisweekcore(49);            thisweek2core();            git_amonthago = git_first2date[git_thisdayindex - 1].date        }    }    function thisweek2core() {        for (var i = git_thisdayindex - 1; i < git_first2date.length; i++) {            git_thisweekdatacore += git_first2date[i].count        }    }    function thisweekcore(index) {        for (var item of git_data[index]) {            git_thisweekdatacore += item.count        }    }    function addlastweek() {        for (var item of git_lastweek) {            git_weekdatacore += item.count        }    }    function addbeforeweek() {        for (var i = git_thisdayindex; i < git_beforeweek.length; i++) {            git_weekdatacore += git_beforeweek[i].count        }    }    function addweek(data) {        if (git_thisdayindex === 6) {            git_aweekago = git_lastweek[0].date;            addlastweek()        } else {            lastweek = data.contributions[51];            git_aweekago = lastweek[git_thisdayindex + 1].date;            addlastweek();            addbeforeweek()        }    }    fetch(git_githubapiurl).then(data => data.json()).then(data => {        git_data = data.contributions;        git_total = data.total;        git_first2date = git_data[48];        git_firstdate = git_data[47];        git_firstweek = data.contributions[0];        git_lastweek = data.contributions[52];        git_beforeweek = data.contributions[51];        git_thisdayindex = git_lastweek.length - 1;        git_thisday = git_lastweek[git_thisdayindex].date;        git_oneyearbeforeday = git_firstweek[0].date;        git_monthindex = git_thisday.substring(5, 7) * 1;        git_montharrbefore = git_month.splice(git_monthindex, 12 - git_monthindex);        git_monthchange = git_montharrbefore.concat(git_month);        addweek(data);        addlastmonth();        var html = github_main_box(git_monthchange, git_data, git_user, git_color, git_total, git_thisweekdatacore, git_weekdatacore, git_oneyearbeforeday, git_thisday, git_aweekago, git_amonthago);        append_div_gitcalendar(github_container, html);        if(document.getElementById('github_loading')){            document.getElementById('github_loading').remove()};        responsiveChart()    }).catch(function (error) {        console.log(error)    });    window.onresize = function () {        responsiveChart()    };    window.onscroll = function () {        if (document.querySelector('.gitmessage')) {            git_tooltip_container.innerHTML = ""        }    };    var git_thiscolor = (color, x) => {        if (x === 0) {            var i = parseInt(x / 2);            return color[0]        } else if (x < 2) {            return color[1]        } else if (x < 20) {            var i = parseInt(x / 2);            return color[i]        } else {            return color[9]        }    };    var tooltip_html = (x, y, span1, span2) => {        var html = '';        html += '<div class="gitmessage" style="top:' + y + 'px;left:' + x + 'px;position: fixed;z-index:9999"><div class="angle-wrapper" style="display:block;"><span>' + span1 + '&nbsp;</span><span>' + span2 + ' 次上传</span></div></div>';        return html    };    var github_canvas_box = () => {        var html = '<div id="gitcalendarcanvasbox"> <canvas id="gitcanvas" style="animation: none;"></canvas></div>';        return html    };    var github_info_box = (user, color) => {        var html = '';        html += '<div id="git_tooltip_container"></div><div class="contrib-footer clearfix mt-1 mx-3 px-3 pb-1"><div class="float-left text-gray">数据来源 <a href="https://github.com/' + user + '" target="blank">@' + user + '</a></div><div class="contrib-legend text-gray">Less <ul class="legend"><li style="background-color:' + color[0] + '"></li><li style="background-color:' + color[2] + '"></li><li style="background-color:' + color[4] + '"></li><li style="background-color:' + color[6] + '"></li><li style="background-color:' + color[8] + '"></li></ul>More </div></div>';        return html    };    var github_main_box = (monthchange, git_data, user, color, total, thisweekdatacore, weekdatacore, oneyearbeforeday, thisday, aweekago, amonthago) => {        var html = '';        var canvasbox = github_canvas_box();        var infobox = github_info_box(user, color);        var style = github_main_style();        html += '<div class="position-relative"><div class="border py-2 graph-before-activity-overview"><div class="js-gitcalendar-graph mx-md-2 mx-3 d-flex flex-column flex-items-end flex-xl-items-center overflow-hidden pt-1 is-graph-loading graph-canvas gitcalendar-graph height-full text-center">' + canvasbox + '</div>' + infobox + '</div></div>';        html += '<div style="display:flex;width:100%"><div class="contrib-column contrib-column-first table-column"><span class="text-muted">过去一年提交</span><span class="contrib-number">' + total + '</span><span class="text-muted">' + oneyearbeforeday + '&nbsp;-&nbsp;' + thisday + '</span></div><div class="contrib-column table-column"><span class="text-muted">最近一月提交</span><span class="contrib-number">' + thisweekdatacore + '</span><span class="text-muted">' + amonthago + '&nbsp;-&nbsp;' + thisday + '</span></div><div class="contrib-column table-column"><span class="text-muted">最近一周提交</span><span class="contrib-number">' + weekdatacore + '</span><span class="text-muted">' + aweekago + '&nbsp;-&nbsp;' + thisday + '</span></div></div>' + style;        return html    };    var github_main_style = () => {        style = '<style>#github_container{text-align:center;margin:0 auto;width:100%;display:flex;display:-webkit-flex;justify-content:center;align-items:center;flex-wrap:wrap;}.gitcalendar-graph text.wday,.gitcalendar-graph text.month{font-size:10px;fill:#aaa;}.contrib-legend{text-align:right;padding:0 14px 10px 0;display:inline-block;float:right;}.contrib-legend .legend{display:inline-block;list-style:none;margin:0 5px;position:relative;bottom:-1px;padding:0;}.contrib-legend .legend li{display:inline-block;width:10px;height:10px;}.text-small{font-size:12px;color:#767676;}.gitcalendar-graph{padding:15px 0 0;text-align:center;}.contrib-column{text-align:center;border-top:1px dashed #818181;font-size:11px;}.contrib-column-first{border-left:0;}.table-column{padding:10px;display:table-cell;flex:1;vertical-align:top;}.contrib-number{font-weight:300;line-height:1.3em;font-size:24px;display:block;}.gitcalendar img.spinner{width:70px;margin-top:50px;min-height:70px;}.monospace{text-align:center;color:#000;font-family:monospace;}.monospace a{color:#1D75AB;text-decoration:none;}.contrib-footer{font-size:11px;padding:0 10px 12px;text-align:left;width:100%;box-sizing:border-box;height:26px;}.left.text-muted{float:left;margin-left:9px;color:#767676;}.left.text-muted a{color:#4078c0;text-decoration:none;}.left.text-muted a:hover,.monospace a:hover{text-decoration:underline;}h2.f4.text-normal.mb-3{display:none;}.float-left.text-gray{float:left;}#user-activity-overview{display:none;}.day-tooltip{white-space:nowrap;position:absolute;z-index:99999;padding:10px;font-size:12px;color:#959da5;text-align:center;background:rgba(0,0,0,.85);border-radius:3px;display:none;pointer-events:none;}.day-tooltip strong{color:#dfe2e5;}.day-tooltip.is-visible{display:block;}.day-tooltip:after{position:absolute;bottom:-10px;left:50%;width:5px;height:5px;box-sizing:border-box;margin:0 0 0 -5px;content:" ";border:5px solid transparent;border-top-color:rgba(0,0,0,.85)}.position-relative{width:100%;}@media screen and (max-width:650px){.contrib-column{display:none}}.angle-wrapper{z-index:9999;display:inline;width:200px;height:40px;position:relative;padding:5px 0;background:rgba(0,0,0,0.8);border-radius:8px;text-align:center;color:white;}.angle-box{position:fixed;padding:10px}.angle-wrapper span{padding-bottom:1em;}.angle-wrapper:before{content:"";width:0;height:0;border:10px solid transparent;border-top-color:rgba(0,0,0,0.8);position:absolute;left:47.5%;top:100%;}</style>';        return style    }};var append_div_gitcalendar = (parent, text) => {    if (typeof text === 'string') {        var temp = document.createElement('div');        temp.innerHTML = text;        var frag = document.createDocumentFragment();        while (temp.firstChild) {            frag.appendChild(temp.firstChild)        }        parent.appendChild(frag)    } else {        parent.appendChild(text)    }};var loading_git = (color) => {    loading = '<div id="github_loading" style="width:10%;height:100%;margin:0 auto;display: block"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"  viewBox="0 0 50 50" style="enable-background:new 0 0 50 50" xml:space="preserve"><path fill="' + color + '" d="M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z" transform="rotate(275.098 25 25)"><animateTransform attributeType="xml" attributeName="transform" type="rotate" from="0 25 25" to="360 25 25" dur="0.6s" repeatCount="indefinite"></animateTransform></path></svg></div>';    return loading};(function(){var git_user = 'Barry-Flynn';    var github_container = document.getElementById('github_container');    var github_loading = document.getElementById('github_loading');    var git_purple = ['#ebedf0', '#fdcdec', '#fc9bd9', '#fa6ac5', '#f838b2', '#f5089f', '#c4067e', '#92055e', '#540336', '#48022f', '#30021f',];    var git_green = ['#ebedf0', '#f0fff4', '#dcffe4', '#bef5cb', '#85e89d', '#34d058', '#28a745', '#22863a', '#176f2c', '#165c26', '#144620'];    var git_blue = ['#ebedf0', '#f1f8ff', '#dbedff', '#c8e1ff', '#79b8ff', '#2188ff', '#0366d6', '#005cc5', '#044289', '#032f62', '#05264c',];    var git_color = git_green;    append_div_gitcalendar(github_container, loading_git(git_color[4]));    github_canlendar(git_user, git_color)})()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[setInterval(() => {    let create_time = Math.round(new Date('2024-03-10 00:00:00').getTime() / 1000); //在此行修改建站时间    let timestamp = Math.round((new Date().getTime()) / 1000);    let second = timestamp - create_time;    let time = new Array(0, 0, 0, 0, 0);      var nol = function(h){      return h>9?h:'0'+h;    }    if (second >= 24 * 3600) {      time[1] = parseInt(second / (24 * 3600));      second %= 24 * 3600;    }    if (second >= 3600) {      time[2] = nol(parseInt(second / 3600));      second %= 3600;    }    if (second >= 60) {      time[3] = nol(parseInt(second / 60));      second %= 60;    }    if (second > 0) {      time[4] = nol(second);    }      currentTimeHtml =`<img class='boardsign' src= 'https://img.shields.io/badge/不晚-科研摸鱼中-6adea8?style=social&logo=data%3Aimage%2Fjpeg%3Bbase64%2CUklGRjQKAABXRUJQVlA4TCgKAAAvP8APEBWHgrZtJIc%2F7O0eCBExAVC1QCNKhdNvStr%2BKZKUf9kY7u6uESnt3l0RiVfhbqOX4PQZmsUF%2Fjt8LHAI9ATOzt0drmB7d2fP3kmWdYJc4bLjJDyxHp5Hbm1tjqRsMpsFYkQEJICPpTV4uNJbrbXe7VL%2FV%2F%2F3118FgQHJtt22TRuFkmwTHyQApncXEUjZ%2F3Yydpk650iWZNu0Ldu2bePZVuv%2BwLPt1ovXtW39gL157Xts2%2Bds4y4IbttIkmRojj3dNV2FvEGOA0COpHzJYTJvzlu8h%2B497%2F1Ndw%2F7dqar1s0H5gd4opqIJ%2FCRC%2FkEXyBskc8%2FEHFpc0IXr0hbIiwROcmBALBl9OKz2SzJrLNt276fOYwkt20FcYR%2FEASYSUcnAgCoSSORl3BI1smkfQD9BNF5g0PlI%2FMNm%2BDu7u5%2BDtxGUqTMeuFw8RPtlXNCe%2BUcj6b0X3utt10KVzyooKwOSdL2oRSuw8GPUkQsZxy5nIMZy%2FpKwOS5wrszAXAIYDJIdJ7hmQuAFQAG%2BNryqCZHeHfFIwDz5xw9ycCMz%2Bk9yQ0y4UdeEFNELDcs5nKWmBHEFAG%2BWjZ5TpBN%2FMTnRCJKEbGOo1Y7Dxy3ZwczZeSwzUWNeK6ICC4OKsjIhM5y1M7evSbdHLQboK5zyeBi7LMJT4SBCC4y4eJM8lzggL1333XOUVfDwOmqja1NNZ8IA8HF8HWoMyFNCFXvfsM56gooFRA1b%2FshvxMq0J5hyaHb3uZ6ux1gt5a5VBX0pxOjuRo2XSU9b7eB7NZS2J%2FIBamCjvm6E56320B2ayl8ccBEEbRcXvWm5%2B02kN1aCp%2BImogccOhwhPnF%2B%2FmVArvPy24thc5NocI6VguGA5Xdx223lpIucTNysKDiUL6TqzUCQtFztw5J5AhBR4jWIYnh7kQqjNC5uVpGFOKOwhR0UMm0zLsfP3%2B1drdYFpjIEViXShDYnUETqZNI3HSZECcRe1OL2QfCEQ9ZIlGHBL0n%2BtLa3fJIEjNRNMDejo9aUWdOCJWQv03RCoBlx0konHK0QAWWTemILSJKQczwbjETmW1WlvshGD8VxZvB73cCo73RHJCHEPkAtTl0vHdo7LRmuuWvLEdqSFGmRBRN%2FLGBB8hMhtkALwYBF4Wcv10GLZImVg4yVpwAB5PLMYPk7qAxuhWgKCyLyRFPHidxsTd2xt7UsmR7HJaz4dDLvvjVkToKkZOfD4%2BmuIlvJgJZtYwc3e4dMr1dbAjFn68Abyg58CAf9od5ty3eGodF1SXbY3POku20a%2FHOIH4uRbUC6GrZ9TyiFOXvCC6RoduZ9f3%2FJ4l8A5XIyGUfVTvmITiC0xF%2FkBXyrpXLTtUcHEld31%2B8k3YgDqndP%2FZ0AS%2FZToRkVW2rKgBENHQ7S5EL95ujbkuyfWTodv73e5ENQbVjSRAnQB55ZN0%2FiKTbaZe4eo86W0KLdwa%2FsFrIG43QxGGyIjKpFZLtQ3Jz0vAQwlwjcgivm8YAS7ZT%2BJizPJaa%2BtyjiMOX98nUTelcYhI5%2FDLDZ24MrixV870lvgh2czLwLA4WhpuMS74IXV71zIes1WLBEQP81BplF0I4c3fyHHW6gJOmQee%2BvQkRY69DpJuQX2GkQk6OBvmwHqfqaNdUDrVYdVZEAheiB6GL0vYFJverqFvxCFnbdmYhNixcCA87dTe5WAQdjXLO%2FURHW44iZNhN6QoTqO%2Bo0xW8eGdkVqzfYAoHmq6yKs8SAmkVhdh%2Fvsn9qqp2PQWfZSyhuOUopVt%2BvTyexNsXIqS3Gyix19%2BnRKImk67QDalaT94f8Py2QB%2Fseu95JGIIZe4JJ5jazaJu%2BRn4j6QozxuDhhx%2FftYvwPj2JmUHxzd1Na0iyjs9bhI59jz%2FOev7tVZm4rBz3VKEAeSoVVxwebUY3fJ7AOlmZaEDTQszq5l%2BDVFX8WXNuUtF7ggHmupmapngQCRkUphzHPHjuzEZeAmf9DAHxmM389hpjx%2Ff7ui%2BXHYL4bPE1Z1hy4h8%2FH3s9637vtadu%2FEnSiNuskvHWNFrg5TLq1mzzAFRnC86h4QQdCsAVm3qmcvaNXJm7LR2AsbFx%2B2eeryI2GuAuqpu0p27LHMvE%2F78ZVAzcjmXPYPpyHvMZQOhgSoBLNkKeapWzUiD8eV%2FHNyrnLuHfBhz2R2OcMF00Kerqk4b4IcvHc8SCw2oallwInFyeTnrzfaPRczym3z0gfx57gcVsQRrZapTljf6jbNCruPrzTbYF6yqlQt7iGyPH9a6%2Bf55FmGd%2B4MifC07XPRY6P3RpyvJMZfLP0FF9avFa%2BnHwSkTNv18Flcd2EcOPphJDpjqsASRRZjaE03OCKARM4iDPSqqp26OcyPg6Rkw1BZMcMDEAdEkjxRgwgdRhGOZw4F7HCwo8ALXHHhmOjE6lgs2KFUSqRLiJkpdVRzsV1A8fSNJEwrh8kRN2LSpdqTp6BQYntUyyiprH5O9hAV8bIdagEoy4R4OoHe2BRO3j7HgA00UdBglb1Xp1B9klSp3guzpG4MmZQk4XS69YEwZnwmAb%2FyZBWD8hAZQmwN720WGmZxzqlKGrU4%2FJiF55kYKDlUxOk3kfoRmix5k7%2BjqOQENSSZLIb1dI73RBp27Xlpf4ZkbSZx94EmjRI0jYg9Gvw15NvNHVLmOVv1i0JHe6JlasRAqL%2Bic0k%2Fqxpik0C%2FJITXbji%2FxTdlCq8pUiZtrX7%2Bd3MGf4Q1ss1in0w1zoi3FUHnBKTujpGZdqLHzC7nVbu1v6F79Dj%2FQTatKVNU01D0Fpp%2Fx5%2F8plHqKjBZ0pDf%2BgNHku7UnZKv2hrfczWABpGxc13IeiRMs3k7EJmVtKKW0ODs38c%2FJndoLvF%2B%2FnSHDKNoNUFeCiF1PXuf0YsPTtv2te4O2ltRaMKUaYIAaHBwQ75Ccp9Pre6TU5aUNbC3Z8fqpv%2BjsBfRHpdaaOKiLi7MTS3kEePqk%2FdUCMJZKfZd6mh8XFMZvMTBova%2B%2FvnFeq7kQt2Q7sZuWjdbg6zVxdr3tdV0hEcwfmvT%2Fx%2FUWap8WyOTrr9fT%2FKSQ4L0MLBijZZNd0tSYMeqBwYDsyguIX5oFcy99dXN%2B8MX1MaC7zV2A8bjA3Hn9JcaKwFCBRWt3vn%2FdmR9egfVGoBtNXcq3L7CfO8H8gUmwYMH8Dky%2FKfD%2FIro729uOWJ7s%2F8K%2Fng3mb%2B%2FWW5ZvWs%2BdwCi9RC%2FQSbB4CR5ViEcs993d%2BQGs7Mz2XYigvR3M34A5qbW8A%2FS3wnbuBPZTOmulU%2FU8%2FwbGQdDfTETEzvxwdeXK7vxwBRGxWd7SG9O8r57m3zXppGpZAuOM7dy5CsxtZQmMCDAcoK6pFUfraX7ZmHYX511tN23%2FcpWOcjqLI7ZyZXe2R5WKuz2jtNb1Zh3QLwPjFVig64Dhz9fmBeDcUXju1HXpzI%2BRlSuvkrvY9yso3rVy5XMFxaJ1jn30l9%2Bd7W9054ebv58N9rYLAg%3D%3D' title='距离百年老店也就差不到一百年~'> \      <div style ='font-size: 13px; font-weight: bold'> \      本站居然运行了${time[1]}天${time[2]}小时${time[3]}分${time[4]}秒  \        <i id="heartbeat" class='fas fa-heartbeat' style='color:red'> </i> \      </div>`;     document.getElementById("workboard").innerHTML = currentTimeHtml;  }, 1000);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle="rgba("+d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle="rgba("+r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener("resize",f,!1),function(){h=s.getContext("2d");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>movies</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
