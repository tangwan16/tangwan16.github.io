<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AcWing 高精度</title>
      <link href="/2024/05/23/AcWing%20%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
      <url>/2024/05/23/AcWing%20%E9%AB%98%E7%B2%BE%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="大整数存储的思路"><a href="#大整数存储的思路" class="headerlink" title="大整数存储的思路"></a>大整数存储的思路</h2><p>将大整数的每一位存入数组中<br>a[0]存个位，a[1]存十位,数组末尾存高位<br>因为如果发生进位，直接在数组的末尾加一位。<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405261543760.jpg" alt="IMG_20240526_145539.jpg"></p><h2 id="791-高精度加法"><a href="#791-高精度加法" class="headerlink" title="791.高精度加法"></a><a href="https://www.acwing.com/problem/content/793/">791.高精度加法</a></h2><h3 id="题目重述"><a href="#题目重述" class="headerlink" title="题目重述"></a>题目重述</h3><p>给定两个正整数(不含前导0)，计算它们的和，整数的长度&lt;=100000</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>高精度模拟的是手动加法，大于10进位，小于10不进位。<br>每一次计算，都是Ai,Bi，ti(上一位的进位)<br>例如百位A2,B2,t2，十位上的进位<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405261543761.jpg" alt="IMG_20240526_150301.jpg"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">add</span>(vector&lt;<span class="type">int</span>&gt;&amp;A,vector&lt;<span class="type">int</span>&gt;&amp;B)&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;C;</span><br><span class="line">    <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.<span class="built_in">size</span>()||i&lt;B.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;A.<span class="built_in">size</span>())t+=A[i];</span><br><span class="line">        <span class="keyword">if</span>(i&lt;B.<span class="built_in">size</span>())t+=B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(t%<span class="number">10</span>);</span><br><span class="line">        t=t/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t)C.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;A,B;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)A.<span class="built_in">push_back</span>(a[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=b.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)B.<span class="built_in">push_back</span>(b[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">auto</span> C=<span class="built_in">add</span>(A,B);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)cout&lt;&lt;C[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="792-高精度减法"><a href="#792-高精度减法" class="headerlink" title="792.高精度减法"></a><a href="https://www.acwing.com/problem/content/794/">792.高精度减法</a></h2><h3 id="题目重述-1"><a href="#题目重述-1" class="headerlink" title="题目重述"></a>题目重述</h3><p>给定两个正整数（不含前导 00），计算它们的差，计算结果可能为负数。正整数长度&lt;=1e5</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405261543762.jpg" alt="IMG_20240526_151019.jpg"><br>大整数是不能直接通过相减来判断大小的，要通过大整数存储数组一位一位判断。<br>大整数长度越长，值越大。长度相等情况下，判断每一位的大小</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;A,vector&lt;<span class="type">int</span>&gt;&amp;B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A.<span class="built_in">size</span>()!=B.<span class="built_in">size</span>())<span class="keyword">return</span> A.<span class="built_in">size</span>()&gt;B.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=A.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span>(A[i]!=B[i])</span><br><span class="line">            <span class="keyword">return</span> A[i]&gt;B[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">sub</span>(vector&lt;<span class="type">int</span>&gt;&amp;A,vector&lt;<span class="type">int</span>&gt;&amp;B)&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;C;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,t=<span class="number">0</span>;i&lt;A.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        t=A[i]-t;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;B.<span class="built_in">size</span>())t-=B[i];</span><br><span class="line">        <span class="keyword">if</span>(t&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            C.<span class="built_in">push_back</span>(t+<span class="number">10</span>);</span><br><span class="line">            t=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            C.<span class="built_in">push_back</span>(t);</span><br><span class="line">            t=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(C.<span class="built_in">size</span>()&gt;<span class="number">1</span>&amp;&amp;C.<span class="built_in">back</span>()==<span class="number">0</span>)C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;A,B;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)A.<span class="built_in">push_back</span>(a[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=b.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)B.<span class="built_in">push_back</span>(b[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;C;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">cmp</span>(A,B))&#123;</span><br><span class="line">        C=<span class="built_in">sub</span>(A,B);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        C=<span class="built_in">sub</span>(B,A);</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;-&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)cout&lt;&lt;C[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="793-高精度乘法"><a href="#793-高精度乘法" class="headerlink" title="793.高精度乘法"></a><a href="https://www.acwing.com/problem/content/795/">793.高精度乘法</a></h2><h3 id="题目重述-2"><a href="#题目重述-2" class="headerlink" title="题目重述"></a>题目重述</h3><p>给定两个非负整数（不含前导0）,A和B， 计算A*B的值，A的长度&lt;=1e5,B&lt;=10000</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405261543763.jpg" alt="IMG_20240526_153727.jpg">  </p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">mul</span>(vector&lt;<span class="type">int</span>&gt;&amp;A,<span class="type">int</span> b)&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;C;</span><br><span class="line">    <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.<span class="built_in">size</span>()||t;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;A.<span class="built_in">size</span>())t+=A[i]*b;</span><br><span class="line">        C.<span class="built_in">push_back</span>(t%<span class="number">10</span>);</span><br><span class="line">        t=t/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(C.<span class="built_in">size</span>()&gt;<span class="number">1</span>&amp;&amp;C.<span class="built_in">back</span>()==<span class="number">0</span>)C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;A;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)A.<span class="built_in">push_back</span>(a[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">auto</span> C=<span class="built_in">mul</span>(A,b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,C[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="794-高精度除法"><a href="#794-高精度除法" class="headerlink" title="794.高精度除法"></a><a href="https://www.acwing.com/problem/content/796/">794.高精度除法</a></h2><h3 id="题目重述-3"><a href="#题目重述-3" class="headerlink" title="题目重述"></a>题目重述</h3><p>给定两个非负整数(不含前导0)A,B，计算A/B的商和余数</p><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405261543764.png" alt="image.png"></p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">div</span>(vector&lt;<span class="type">int</span>&gt;&amp;A,<span class="type">int</span> b,<span class="type">int</span> &amp;r)&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;C;</span><br><span class="line">    r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=A.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        r=r*<span class="number">10</span>+A[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(r/b);</span><br><span class="line">        r%=b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(),C.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span>(C.<span class="built_in">size</span>()&gt;<span class="number">1</span>&amp;&amp;C.<span class="built_in">back</span>()==<span class="number">0</span>)C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;A;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)A.<span class="built_in">push_back</span>(a[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="keyword">auto</span> C=<span class="built_in">div</span>(A,b,r);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)cout&lt;&lt;C[i];</span><br><span class="line">    cout&lt;&lt;endl&lt;&lt;r;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing 二分</title>
      <link href="/2024/05/22/AcWing%20%E4%BA%8C%E5%88%86/"/>
      <url>/2024/05/22/AcWing%20%E4%BA%8C%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="789-数的范围"><a href="#789-数的范围" class="headerlink" title="789.数的范围"></a><a href="https://www.acwing.com/problem/content/description/791/">789.数的范围</a></h2><h3 id="题目重述"><a href="#题目重述" class="headerlink" title="题目重述"></a>题目重述</h3><p>有个升序排列的整数数组，返回一个元素k的起始位置和终止位置。</p><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>整数二分。<br>二分的本质不是单调性，假如存在一个分界点，在分界点的右边所有数都满足一个性质，但是分界点的左边都不满足这个性质。二分的作用就是找到分界点。<br>每一次二分都保证整个区间都包含分界点，当区间长度等于1，这个数就是分界点。二分法一定有解，但是不一定是题目的解<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405261444770.jpg" alt=""><br>所以当一个序列有相等的数时，第一个模版可以求出x出现的最左端，第二个模版可以求出x出现的最右端。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.<span class="property">h</span>&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n,m;</span><br><span class="line"><span class="keyword">const</span> int N=<span class="number">100010</span>;</span><br><span class="line">int q[N];</span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)<span class="title function_">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        int x;</span><br><span class="line">        <span class="title function_">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">        int l=<span class="number">0</span>,r=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            int mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(q[mid]&gt;=x)r=mid;</span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q[l]!=x) cout&lt;&lt;<span class="string">&quot;-1 -1&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            int l=<span class="number">0</span>,r=n-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                int mid=l+r+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(q[mid]&lt;=x)l=mid;</span><br><span class="line">                <span class="keyword">else</span> r=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="790-数的三次方根"><a href="#790-数的三次方根" class="headerlink" title="790.数的三次方根"></a><a href="https://www.acwing.com/problem/content/792/">790.数的三次方根</a></h2><h3 id="题目重述-1"><a href="#题目重述-1" class="headerlink" title="题目重述"></a>题目重述</h3><p>给定一个浮点数n，求它的三次方根</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.<span class="property">h</span>&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    double x;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    double l=-<span class="number">10000</span>,r=<span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">while</span>(r-l&gt;<span class="number">1e-8</span>)&#123;</span><br><span class="line">        double mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(mid*mid*mid&gt;=x)r=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">printf</span>(<span class="string">&quot;%.6lf&quot;</span>,l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 类和对象</title>
      <link href="/2024/05/22/C++%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
      <url>/2024/05/22/C++%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="第三章-类和对象"><a href="#第三章-类和对象" class="headerlink" title="第三章 类和对象"></a>第三章 类和对象</h2><h3 id="类与对象的基本概念"><a href="#类与对象的基本概念" class="headerlink" title="类与对象的基本概念"></a>类与对象的基本概念</h3><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名 </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">private</span>:  (可缺省)</span><br><span class="line">私有数据成员和函数成员</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">保护数据成员和函数成员</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">公有数据成员和函数成员</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>说明<br>1 类内函数能访问private、protected、public三类成员<br>2 类外函数只能访问public成员<br>3 protected成员：类外不能访问，但是派生类的函数成员可以访问<br>4 private、protected、public不一定要全有，但至少要有一个<br>5 private、protected、public三者顺序随意<br>6 缺省时，默认为private</p><h4 id="成员函数的定义"><a href="#成员函数的定义" class="headerlink" title="成员函数的定义"></a>成员函数的定义</h4><h5 id="第一种-类内声明，类外定义"><a href="#第一种-类内声明，类外定义" class="headerlink" title="第一种 类内声明，类外定义"></a>第一种 类内声明，类外定义</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//外部定义的一般形式</span></span><br><span class="line">返回类型  类名::函数名(参数表)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="type">int</span> point:: <span class="built_in">gety</span>()     <span class="comment">//类point的成员函数gety具体定义</span></span><br><span class="line">&#123;<span class="keyword">return</span>  y; &#125;</span><br></pre></td></tr></table></figure><p>说明：<br>1 函数名前记得加     类名::<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">point::gety</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><br>2 在定义成员函数时，对函数所带的参数，不但要说明它的类型，还要指出其参数名。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">circle::draw</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> r)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><br>3 在定义成员函数时，其返回类型一定要与函数原型中声明的返回类型匹配<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gety</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">point::gety</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></p><h5 id="第二种-类内定义"><a href="#第二种-类内定义" class="headerlink" title="第二种 类内定义"></a>第二种 类内定义</h5><h6 id="隐式定义"><a href="#隐式定义" class="headerlink" title="隐式定义"></a>隐式定义</h6><p>函数的原型和定义都在类的内部完成<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getx</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> x&#125;</span><br></pre></td></tr></table></figure></p><h6 id="显式定义"><a href="#显式定义" class="headerlink" title="显式定义"></a>显式定义</h6><p>类内声明，类外定义，但是函数前用inline，显示的说明为内置函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span></span>;  <span class="comment">//类内声明</span></span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span> 类名::<span class="built_in">getx</span>()&#123;<span class="keyword">return</span> x&#125;   类外显式定义</span><br></pre></td></tr></table></figure><br>显示定义格式上=类外定义+加前缀inline，但是属于类内定义<br>可提高程序的执行效率，较长成员函数不设置为内置。</p><h4 id="对象的定义与引用"><a href="#对象的定义与引用" class="headerlink" title="对象的定义与引用"></a>对象的定义与引用</h4><h5 id="对象的定义"><a href="#对象的定义" class="headerlink" title="对象的定义"></a>对象的定义</h5><p>在声明类的同时，直接定义对象<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">&#125;op1,op2;</span><br></pre></td></tr></table></figure><br>声明类之后,使用时再定义对象。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">point op1,op2;</span><br></pre></td></tr></table></figure></p><p>特点：<br>1声明一个类便声明了一种类型，，声明类的时候不分配存储空间，定义类的对象的时候再分配存储空间。<br>2 声明类同时定义的对象是一种全局对象，所有函数都可以使用他。</p><h5 id="对象中成员的访问"><a href="#对象中成员的访问" class="headerlink" title="对象中成员的访问"></a>对象中成员的访问</h5><p>对象名.数据成员名或对象名.成员函数名(实参表)<br>若是对象指针，则用”-&gt;”操作符<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">point  *op;</span><br><span class="line">op-&gt;<span class="built_in">setpoint</span>(<span class="number">5</span>,<span class="number">6</span>);</span><br></pre></td></tr></table></figure></p><h3 id="构造函数与析构函数"><a href="#构造函数与析构函数" class="headerlink" title="构造函数与析构函数"></a>构造函数与析构函数</h3><h4 id="如何给数据成员赋值"><a href="#如何给数据成员赋值" class="headerlink" title="如何给数据成员赋值"></a>如何给数据成员赋值</h4><p>定义类的时候不能给数据成员赋值。<br>使用成员函数<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Point p1;</span><br><span class="line">p1.<span class="built_in">set</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></p><h4 id="使用构造函数"><a href="#使用构造函数" class="headerlink" title="使用构造函数"></a>使用构造函数</h4><p>1 构造函数的名字和类名相同<br>2 构造函数可以有任意类型的参数，但是不能有返回参数，也不能写void<br>3 定义对象时，编译系统会自动调用构造函数<br>如果没有定义构造函数，系统自动生成一个缺省的构造函数 Point(){}<br>4 可以类内定义，也可以（类内声明，类外定义，加类名：：）<br>5 构造函数被声明为公有函数，但他不能被显示调用，是在定义对象的同时被调用的。<br>当构造函数被定义为私有函数的时候，在创建对象的时候，构造函数被调用，程序会报错。<br>6 构造函数可以不带参数 Point(){}<br>7构造函数的类内声明类外定义<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">complex</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">double</span>  real,  imag;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">complex</span>(<span class="type">double</span>  r=<span class="number">0.0</span>,  <span class="type">double</span>  i=<span class="number">0.0</span>); </span><br><span class="line">&#125;;</span><br><span class="line">complex::<span class="built_in">complex</span>(<span class="type">double</span>  r,  <span class="type">double</span>  i) </span><br><span class="line">&#123; real=r;  imag=i; &#125;</span><br></pre></td></tr></table></figure></p><p>8 构造函数可以进行重载,但是可能引起二义性<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">x</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">   <span class="built_in">x</span>( );                      <span class="comment">//无参数构造函数</span></span><br><span class="line">   <span class="built_in">x</span>(<span class="type">int</span>  i=<span class="number">0</span>);          <span class="comment">//带默认参数的构造函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;        </span><br><span class="line">      <span class="function">x   <span class="title">one</span><span class="params">(<span class="number">10</span>)</span></span>;     <span class="comment">//正确，调用x(int  i=0)</span></span><br><span class="line">      x   two;           <span class="comment">// 存在二义性，不知调用那一个构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><p>用构造函数直接创建对象<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类名 对象名(实参表）    </span></span><br><span class="line"><span class="function">Point <span class="title">p</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span></span><br></pre></td></tr></table></figure><br>用new动态分配对象空间<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类名*对象指针= new 类名（实参表）</span></span><br><span class="line">Point *p=<span class="keyword">new</span> <span class="built_in">Point</span>(a,b)</span><br><span class="line">p-&gt;<span class="built_in">draw</span>()</span><br></pre></td></tr></table></figure></p><h4 id="初始化列表对数据成员进行初始化"><a href="#初始化列表对数据成员进行初始化" class="headerlink" title="初始化列表对数据成员进行初始化"></a>初始化列表对数据成员进行初始化</h4><p>类名::构造函数（参数表）：成员初始化表<br>成员初始化表格式：<br>成员1（初值1），成员2（初值2），…<br>成员按在类声明中的顺序初始化，与初始化表中的顺序无关<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">A</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">float</span>  f;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> I, <span class="type">int</span>  J, <span class="type">float</span>  F):<span class="built_in">i</span>(I),<span class="built_in">j</span>(J),<span class="built_in">f</span>(F)&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>初始化列表在继承中多次出现<br>构造函数用初始化列表  ：之后无需写参数类型</p><h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><p>1 析构函数名与类名不完全相同，前面必须加一个波浪号(~)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="built_in">Point</span>()&#123;&#125;</span><br></pre></td></tr></table></figure><br>2 析构函数没有参数,没有返回值，而且不能重载，在一个类中只能由一个析构函数。<br>3.当撤销对象时，编译系统自动调用析构函数<br>对象被定义函数体中，当函数运行结束后会自动撤销所有的局部变量，也会自动撤销对象，析构函数自动调用。<br>new动态创建，delete释放时会调用析构函数<br>不用delete释放是不会调用析构函数的<br>4.每一个类必有一个析构函数，但没有定义析构函数的时候，编译系统自动地生成一个默认地析构函数。<br>5析构函数的类外定义<br>A::~A（）{}</p><h3 id="对象数组和对象指针"><a href="#对象数组和对象指针" class="headerlink" title="对象数组和对象指针"></a>对象数组和对象指针</h3><h4 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;Point ob[<span class="number">4</span>];</span><br><span class="line"> <span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)  </span><br><span class="line">    ob[i].<span class="built_in">set_x</span>(i);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++) </span><br><span class="line">   cout&lt;&lt;ob[i].<span class="built_in">get_x</span>()&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">   cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象数组的初始化</span></span><br><span class="line">Point p[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">Point p[<span class="number">4</span>]=&#123;<span class="built_in">Point</span>(<span class="number">1</span>),<span class="built_in">Point</span>(<span class="number">2</span>),<span class="built_in">Point</span>(<span class="number">3</span>),<span class="built_in">Point</span>(<span class="number">4</span>)&#125;</span><br></pre></td></tr></table></figure><h4 id="对象指针"><a href="#对象指针" class="headerlink" title="对象指针"></a>对象指针</h4><p>1 指针引用单个对象成员<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Point p1,*p</span><br><span class="line">p=&amp;p1;</span><br><span class="line">p1-&gt;<span class="built_in">show</span>();</span><br></pre></td></tr></table></figure><br>2 对象指针引用对象数组<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Point p[<span class="number">2</span>]，*p0</span><br><span class="line">p0=p  <span class="comment">//p指向ob[0]</span></span><br><span class="line">p0++;  p指向ob[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><h4 id="this-指针"><a href="#this-指针" class="headerlink" title="this 指针"></a>this 指针</h4><p>当一个成员函数被调用时，C++自动产生一个参数，这个参数是一个类指针this ，可以指向该类的一个对象，这个对象就是接受函数调用的对象。<br>c++中同一个类的不同对象有着相同的成员函数和数据，编译系统给这个成员函数开辟了内存空间，同时有this指针指向不同的对象地址从而调用不同的对象的函数指令<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Void area（*<span class="keyword">this</span>）</span><br><span class="line"><span class="keyword">this</span>-&gt;x</span><br><span class="line">A.<span class="built_in">area</span>(&amp;a)</span><br></pre></td></tr></table></figure></p><h3 id="向函数传递对象"><a href="#向函数传递对象" class="headerlink" title="向函数传递对象"></a>向函数传递对象</h3><h4 id="对象作为函数的参数"><a href="#对象作为函数的参数" class="headerlink" title="对象作为函数的参数"></a>对象作为函数的参数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sqr_it</span><span class="params">(tr ob)</span></span></span><br><span class="line"><span class="function"></span>&#123; ob.<span class="built_in">set_i</span>(ob.<span class="built_in">get_i</span>( )*ob.<span class="built_in">get_i</span>( ));       <span class="comment">//形参对象i=i*i</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;形参对象 i 的值为 &quot;</span>&lt;&lt;ob.<span class="built_in">get_i</span>( )&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">tr  <span class="title">obj</span><span class="params">(<span class="number">10</span>)</span></span>;  </span><br><span class="line"><span class="built_in">sqr_it</span>(obj); </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="对象指针作为函数的参数"><a href="#对象指针作为函数的参数" class="headerlink" title="对象指针作为函数的参数"></a>对象指针作为函数的参数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sqr_it</span><span class="params">(tr *ob)</span></span></span><br><span class="line"><span class="function"></span>&#123;  ob-&gt;<span class="built_in">set_i</span>(ob-&gt;<span class="built_in">get_i</span>()*ob-&gt;<span class="built_in">get_i</span>());  </span><br><span class="line">    cout &lt;&lt; “形参对象指针ob-&gt; i 的值为 <span class="string">&quot;&lt;&lt;ob-&gt;get_i()&lt;&lt;endl;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">tr  obj(10); </span></span><br><span class="line"><span class="string">sqr_it(&amp;obj); </span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h4 id="对象引用作为函数的参数"><a href="#对象引用作为函数的参数" class="headerlink" title="对象引用作为函数的参数"></a>对象引用作为函数的参数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sqr_it</span><span class="params">(tr  &amp;ob)</span></span></span><br><span class="line"><span class="function"></span>&#123;  ob-&gt;<span class="built_in">set_i</span>(ob.<span class="built_in">get_i</span>()*ob.<span class="built_in">get_i</span>());  </span><br><span class="line">    cout &lt;&lt; “形参ob对象 i 的值为 <span class="string">&quot;&lt;&lt;ob.get_i()&lt;&lt;endl;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">tr  obj(10);  </span></span><br><span class="line"><span class="string">sqr_it(obj); </span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="对象赋值与赋值"><a href="#对象赋值与赋值" class="headerlink" title="对象赋值与赋值"></a>对象赋值与赋值</h3><h4 id="对象赋值语句"><a href="#对象赋值语句" class="headerlink" title="对象赋值语句"></a>对象赋值语句</h4><p>同类型对象可以进行赋值。赋值时，数据成员逐位复制<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myclass  o1, o2;</span><br><span class="line">o1.<span class="built_in">set</span>(<span class="number">20</span>,<span class="number">5</span>);</span><br><span class="line">o2=o1;               </span><br></pre></td></tr></table></figure></p><h4 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h4><p>1 特殊的构造函数，用于对象赋值和赋值<br>2 函数名与类名相同，没有返回值类型<br>3 系统提供了默认拷贝构造函数，也可以自己定义<br>4 函数只有一个参数，是同类对象的引用<br>自定义拷贝函数的格式<br>类名(const  类名 &amp;对象名){<br>//函数体<br>}<br>调用拷贝构造函数的情况<br>1 函数的形参是对象，在将实参和形参相互结合的过程中会调用析构函数<br>2函数的返回值是对象，函数调用完毕，返回对象<br>3 用对象去初始化同类的另一个对象<br>o2(o1)    o2=o1<br>4 当程序中含有拷贝构造函数时，系统不会有默认构造函数</p><h3 id="string类"><a href="#string类" class="headerlink" title="string类"></a>string类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1[<span class="number">5</span>]=<span class="string">&quot;abcd&quot;</span> ;</span><br><span class="line"><span class="type">char</span> str2[]=<span class="string">&quot;efgh&quot;</span> ;</span><br><span class="line">cout&lt;&lt;<span class="built_in">strcat</span>(str1,str2);    <span class="comment">//调用strcat函数,C语言</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line">string str1,str2;  </span><br><span class="line"><span class="function">string <span class="title">str3</span><span class="params">(“China”)</span></span>; 或者string st3=<span class="string">&quot;China&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405221958534.png" alt="image.png"></p><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><h4 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a>静态数据成员</h4><p>用static说明的成员称为静态成员，有静态数据成员和静态函数成员，静态成员由同一类的多个对象共享，即无论一个类定义多少个对象，都共用一个静态数据成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> count； <span class="comment">//静态数据成员</span></span><br><span class="line"><span class="comment">//类外进行初始化</span></span><br><span class="line"><span class="type">int</span> A::count=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//静态数据成员可以在其他函数内进行赋值</span></span><br><span class="line">A：：count=<span class="number">200</span>  <span class="comment">//不用写int</span></span><br><span class="line"><span class="comment">//静态数据成员可在程序中访问</span></span><br></pre></td></tr></table></figure><p>1 静态数据成员属于类(不属于某个对象)，在编译时分配空间，在对象被建立之前就存在，公有的静态数据成员可以在对象定义之前被访问。<br>访问方式：类名::静态数据成员名<br>也可以对象定义之后进行访问，公有的静态数据成员，也可通过对象进行访问。<br>访问格式：<br>对象名.静态数据成员名<br>对象指针-&gt;静态数据成员名<br>2静态数据承成员必须在类外进行初始化（main函数之前）<br>数据类型 类名::静态数据成员名=初始值<br>类外进行初始化的时候不用写static<br>3.静态数据成员是多个对象公有的数据，可以避免采用全局变量.<br>4私有静态数据成员不能被类外函数进行访问，同时也不能通过对象进行访问。</p><h4 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h4><p>静态成员函数:被static修饰的成员函数<br>1.静态成员函数在类外进行定义时，不要用static<br>2.静态成员函数一般只访问静态数据成员，两者结合达成同类对象共享数据目的<br>3.私有静态成员函数不能被外部函数和对象进行访问。<br>4.静态成员函数可在定义对象之前处理静态数据成员<br>5 编译系统将静态成员函数定为内联<br>6 静态成员函数没有this指针，调用格式:<br>类名::静态成员函数名<br>7 静态成员函数不访问类中的非静态成员,只能访问静态成员.如果实在需要访问，用对象引用做函数参数，再通过对象访问。</p><h3 id="类组合"><a href="#类组合" class="headerlink" title="类组合"></a>类组合</h3><p>一个类的对象可以作为另一个类的数据成员，即对象成员</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span></span><br><span class="line">&#123;</span><br><span class="line">类名<span class="number">1</span> 对象<span class="number">1</span>；</span><br><span class="line">类名<span class="number">2</span> 对象<span class="number">2</span>；</span><br><span class="line">&#125;；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//类组合的构造函数可以用初始化表</span></span><br><span class="line">X::X（参数表<span class="number">0</span>):对象<span class="number">1</span>(参数表<span class="number">1</span>),对象<span class="number">2</span>(参数表<span class="number">2</span>)...</span><br><span class="line">&#123;</span><br><span class="line">...构造函数体；</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>用关键字friend可以将普通函数、别类的成员函数或者别类定义为某类的友元。这些友元可以访问该类的私有成员。友元分友元普通函数、友元函数成员、友元类。<br>友元函数作用之一是提高程序的效率，而不是加强类的封装性和隐蔽性，<br>友元函数可以直接访问不同类的私有成员。（数据成员和函数成员）<br>友元函数是独立于当前类的外部函数<br>友元普通函数，友元成员函数，友元类<br>关键词friend</p><h4 id="普通函数为友元函数"><a href="#普通函数为友元函数" class="headerlink" title="普通函数为友元函数"></a>普通函数为友元函数</h4><p>在类定义时，在类内定义一个函数，该函数前加上 friend表示该函数不是成员函数，而是本类的友元函数。友元函数可以内嵌或外部定义。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">girl</span> &#123;</span><br><span class="line">       <span class="type">char</span> *name;</span><br><span class="line">       <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">       <span class="built_in">girl</span>(<span class="type">char</span> *n, <span class="type">int</span> d);                <span class="comment">//构造函数</span></span><br><span class="line">       &#123; name=<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(n)+<span class="number">1</span>]; <span class="built_in">strcpy</span>(name,n); age=d; &#125;           </span><br><span class="line">       <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">disp</span><span class="params">(girl &amp; x)</span></span>;                <span class="comment">//声明disp友元函数</span></span><br><span class="line">        ~<span class="built_in">girl</span>() &#123; <span class="keyword">delete</span> name; &#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">disp</span><span class="params">(girl &amp;x)</span>                     <span class="comment">//定义友元函数</span></span></span><br><span class="line"><span class="function"></span>&#123; cout &lt;&lt;<span class="string">&quot;女孩名字: &quot;</span>&lt;&lt;x.name&lt;&lt;<span class="string">&quot;,年龄: &quot;</span>&lt;&lt;x.age&lt;&lt;endl; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="function">girl <span class="title">e</span><span class="params">(<span class="string">&quot;Chen Xingwei&quot;</span>,<span class="number">18</span>)</span></span>;</span><br><span class="line">   <span class="built_in">disp</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>友元函数不是类的成员函数，在类外定义定义友元函数时，不需要添加类名::,也不需要friend<br>友元函数不是类的成员，不能直接访问类的私有数据。需要通过对象，对象引用，对象指针来访问本类的私有成员</p><p>友元的作用：<br>1友元可以让函数访问多个类，共享数据<br>2.友元用于运算符重载<br>3.封装机制的补充，开了一个小口子，不会彻底丧失数据安全性，不会大幅降低可维护性</p><h4 id="成员函数为友元函数"><a href="#成员函数为友元函数" class="headerlink" title="成员函数为友元函数"></a>成员函数为友元函数</h4><p>一个函数既是某个类(类1)的成员函数，又在另一个类（类2）中声明为友元函数。该函数称为友元成员函数。它能访问类1和类2私有成员。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">girl</span> &#123;</span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">girl</span>(<span class="type">char</span> *n, <span class="type">int</span> d) </span><br><span class="line">    &#123;  name=<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(n)+<span class="number">1</span>]; <span class="built_in">strcpy</span>(name,n); age=d;&#125;</span><br><span class="line">    <span class="comment">//声明boy类的成员函数disp()是本类girl的友元函数</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">boy::disp</span><span class="params">(girl &amp;x)</span></span>;  </span><br><span class="line">    ~<span class="built_in">girl</span>() &#123; <span class="keyword">delete</span> name; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">boy::disp</span><span class="params">(girl &amp;x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line">     cout &lt;&lt; <span class="string">&quot;男孩名字: &quot;</span>&lt;&lt;name</span><br><span class="line">    &lt;&lt;<span class="string">&quot;,年龄: &quot;</span>&lt;&lt;age&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;女孩名字: &quot;</span> &lt;&lt;x.name</span><br><span class="line">    &lt;&lt; <span class="string">&quot;,年龄: &quot;</span>&lt;&lt;x.age&lt;&lt;endl;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h4 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h4><p>在一个类1中可以说明另一个类2，前面加friend，则类2为类1的友元类。类2的函数成员可以访问类1的私有成员和类2的私有成员<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">girl</span> &#123;</span><br><span class="line"><span class="type">char</span> *name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="keyword">friend</span> boy;         <span class="comment">//声明 boy 类是 girl 类的友元类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">girl</span>(<span class="type">char</span> *n, <span class="type">int</span> d) </span><br><span class="line">  &#123; name=<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(n)+<span class="number">1</span>]; <span class="built_in">strcpy</span>(name,n); age=d;&#125;</span><br><span class="line">  ~<span class="built_in">girl</span>() &#123; <span class="keyword">delete</span> name; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">boy::disp</span><span class="params">(girl &amp;x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;  <span class="comment">//访问本类对象成员</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;男孩名字: &quot;</span>&lt;&lt;name&lt;&lt;<span class="string">&quot;,年龄: &quot;</span>&lt;&lt;age&lt;&lt;endl; </span><br><span class="line">    <span class="comment">//访问友类对象成员</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;女孩名字: &quot;</span>&lt;&lt;x.name&lt;&lt;<span class="string">&quot;,年龄: &quot;</span>&lt;&lt;x.age&lt;&lt;endl;                                                    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="常类型"><a href="#常类型" class="headerlink" title="常类型"></a>常类型</h3><p>常类型：被关键字const修饰的类型就是常类型。常类型变量不可改变。</p><h4 id="常引用"><a href="#常引用" class="headerlink" title="常引用"></a>常引用</h4><p>const 类型&amp;引用名<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span>  <span class="type">int</span>  &amp;i,  <span class="type">const</span>  <span class="type">int</span>  &amp;j)</span></span>;   <span class="comment">//常引用</span></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="type">int</span> a=<span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">30</span>;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;<span class="string">&quot;+&quot;</span>&lt;&lt;b&lt;&lt;<span class="string">&quot;=&quot;</span>&lt;&lt;<span class="built_in">add</span>(a,b)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span>  <span class="type">int</span>  &amp;i,  <span class="type">const</span>  <span class="type">int</span>  &amp;j)</span> </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line">      <span class="comment">//i=i+20;       错误，i值不可改变</span></span><br><span class="line">      <span class="keyword">return</span>  i+j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="常数据成员"><a href="#常数据成员" class="headerlink" title="常数据成员"></a>常数据成员</h4><p>值无法修改，初始化只能通过初始化表<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream.h&gt;</span></span></span><br><span class="line"> <span class="keyword">class</span>  <span class="title class_">Date</span>&#123;                   </span><br><span class="line">      <span class="keyword">private</span>:</span><br><span class="line">         <span class="type">const</span>  <span class="type">int</span>  year;                      <span class="comment">//常数据成员</span></span><br><span class="line">         <span class="type">const</span>  <span class="type">int</span>  month;</span><br><span class="line">         <span class="type">const</span>  <span class="type">int</span>  day;</span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">         <span class="built_in">Date</span>(<span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d);</span><br><span class="line">         <span class="function"><span class="type">void</span> <span class="title">showDate</span><span class="params">( )</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">Date::<span class="built_in">Date</span>(<span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d):<span class="built_in">year</span>(y),<span class="built_in">month</span>(m),<span class="built_in">day</span>(d)</span><br><span class="line">&#123;    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h4 id="常对象"><a href="#常对象" class="headerlink" title="常对象"></a>常对象</h4><p>const A a(1,2)<br>常对象只能调用常成员函数</p><h4 id="常成员函数"><a href="#常成员函数" class="headerlink" title="常成员函数"></a>常成员函数</h4><p> int function(int x) const ；<br>常成员函数可以使用数据成员，但是不能进行修改</p><h3 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h3><p>构造函数和析构函数的主要重用和特性<br>构造函数的作用：为对象分配内存空间，进行初始化。<br>特性：<br>1函数名与类名相同。<br>2.构造函数没有返回值<br>3一般被定义为公有成员，私有成员会导致定义对象时发生错误<br>4.在定义对象的同时被自动调用，而且只执行一次<br>5每个类都有构造函数，如果自己没定义，系统自动生成构造函数</p><p>析构函数的作用： 释放为对象分配的内存空间<br>特性：<br>1析构函数名与类名不完全相同，前面得加~<br>2，无返回任何值<br>3.析构函数没有参数，因此不能被重载<br>4.撤销对象时，系统自动调用析构函数。</p><p>什么是对象数组<br>对象数组的元素是对象，不仅具有数据成员，还有函数成员</p><p>什么是this指针<br>c++为成员函数提供了this指针，是自引用指针，每当创建一个对象时，this就指向该对象，this指针的值是被调用成员函数所在对象的起始地址<br>每当调用一个成员函数时，系统就将this指针作为一个隐含的参数传递给该函数。</p><p>友元函数的作用<br>运算符重载，当一个函数需要访问多个类的时候需要用到友元函数，<br>友元函数不是当前类的成员函数，而是当前类的外部函数，但是访问该类的所有数据成员和成员函数。</p>]]></content>
      
      
      <categories>
          
          <category> 生活趣闻 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五章_栈与队列_part03</title>
      <link href="/2024/05/22/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97_part03/"/>
      <url>/2024/05/22/%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97_part03/</url>
      
        <content type="html"><![CDATA[<h2 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239.滑动窗口最大值"></a><a href="https://leetcode.cn/problems/sliding-window-maximum/description/">239.滑动窗口最大值</a></h2><h3 id="题目重述"><a href="#题目重述" class="headerlink" title="题目重述"></a>题目重述</h3><p>有一个整数数组nums，大小为k的滑动窗口从最左侧移动到数组最右侧，每次滑动窗口都有一个最大值，返回由最大值组成的数组</p><h3 id="看到题目的第一想法"><a href="#看到题目的第一想法" class="headerlink" title="看到题目的第一想法"></a>看到题目的第一想法</h3><p>两层循环，时间复杂度o(n*k)，超出时间限制41/51<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n-k;i++)&#123;</span><br><span class="line">            <span class="type">int</span> count=nums[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;i+k;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]&gt;count)count=nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">            res.<span class="built_in">push_back</span>(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录"></a>代码随想录</h3><p>整个滑动窗口移动的过程，与队列的pop掉移除元素，push移进元素。并且每次获得最大值的时候都是front()，这样就好了。<br>我们用到了单调队列，本体中的单调递减的，我们使用双端队列deque实现，front存当前滑动窗口的最大值。每次push时，将dq中元素小于等于nums[i]的元素都删掉(小于nums[i]的值是不可能添加到res的，删除就可以了)，双端队列size不超过k。<br>双端队列存的是元素的下标，当dq.front()==i-k时，说明当前最大值是滑动窗口要移除的值。<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405221650010.jpg" alt="IMG_20240522_152722.jpg"><br>代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">maxSlidingWindow</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">        deque&lt;<span class="type">int</span>&gt;dq;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!dq.<span class="built_in">empty</span>()&amp;&amp;dq.<span class="built_in">front</span>()==i-k)&#123;</span><br><span class="line">                dq.<span class="built_in">pop_front</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(!dq.<span class="built_in">empty</span>()&amp;&amp;nums[dq.<span class="built_in">back</span>()]&lt;=nums[i])&#123;</span><br><span class="line">                dq.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            dq.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=k<span class="number">-1</span>)&#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(nums[dq.<span class="built_in">front</span>()]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="347-前k个高频元素"><a href="#347-前k个高频元素" class="headerlink" title="347.前k个高频元素"></a>347.前k个高频元素</h2><h3 id="题目重述-1"><a href="#题目重述-1" class="headerlink" title="题目重述"></a>题目重述</h3><p>有一个整数数组nums，和一个整数k，返回频率前k高的元素</p><h3 id="看到题目的第一想法-1"><a href="#看到题目的第一想法-1" class="headerlink" title="看到题目的第一想法"></a>看到题目的第一想法</h3><p>unordered_map将值与频率映射，然后返回前k高的元素，遍历一次nums，然后在while(k—)再遍历k次unordered_map,时间复杂度o(k*n)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;umap;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            umap[nums[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;res;</span><br><span class="line">        <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">            <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> iter=umap.<span class="built_in">begin</span>();iter!=umap.<span class="built_in">end</span>();iter++)&#123;</span><br><span class="line">                <span class="type">int</span> num=iter-&gt;second;</span><br><span class="line">                <span class="keyword">if</span>(num&gt;count)&#123;</span><br><span class="line">                    count=num;</span><br><span class="line">                    index=iter-&gt;first;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            umap[index]=<span class="number">0</span>;</span><br><span class="line">            res.<span class="built_in">push_back</span>(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="代码随想录-1"><a href="#代码随想录-1" class="headerlink" title="代码随想录"></a>代码随想录</h3><p>使用了最小堆和最大堆的方式，最小堆和最大堆的底层实现都是优先队列，特征就是自动排序，我们按照umap的value进行排序，使用最小堆，如果当前元素&gt;k，就pop，即将当前出现频率最小的弹出去了<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;res;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;umap;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            umap[nums[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;,greater&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;&gt;min_heap;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> iter=umap.<span class="built_in">begin</span>();iter!=umap.<span class="built_in">end</span>();iter++)&#123;</span><br><span class="line">            min_heap.<span class="built_in">push</span>(&#123;iter-&gt;second,iter-&gt;first&#125;);</span><br><span class="line">            <span class="keyword">if</span>(min_heap.<span class="built_in">size</span>()&gt;k)min_heap.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!min_heap.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(min_heap.<span class="built_in">top</span>().second);</span><br><span class="line">            min_heap.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 栈与队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing 归并排序</title>
      <link href="/2024/05/21/AcWing%20%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2024/05/21/AcWing%20%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="787-归并排序"><a href="#787-归并排序" class="headerlink" title="787.归并排序"></a><a href="https://www.acwing.com/problem/content/789/">787.归并排序</a></h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>1确定分界点，mid=(l+r)/2;<br>注意：归并排序的分界点是数组中点下标，就是将数组一分为二。<br>而快速排序的分界点是数组的值。<br>2递归排序左部分和右部分数组，使两个数组都是有序的<br>3归并排序，将两个数组合二为一，将两个有序数组合成排好序的最终数组</p><h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><p>如何将两个数组合二为一？<br>新建一个数组temp，通过比较left数组和right数组的最左端的值，将较小的值放入temp。如果left数组或者right数组遍历完了，将另外一个数组剩余元素加到temp里。之后将temp数组元素的值赋给q<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int k=<span class="number">0</span>,i=l,j=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">    <span class="keyword">if</span>(q[i]&lt;=q[j])temp[k++]=q[i++];</span><br><span class="line">    <span class="keyword">else</span> temp[k++]=q[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid)temp[k++]=q[i++];</span><br><span class="line"><span class="keyword">while</span>(j&lt;=r)temp[k++]=q[j++];</span><br><span class="line"><span class="keyword">for</span>(int i=l,k=<span class="number">0</span>;i&lt;=r;i++,k++)&#123;</span><br><span class="line">    q[i]=temp[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.<span class="property">h</span>&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n;</span><br><span class="line"><span class="keyword">const</span> int N=<span class="number">1000010</span>;</span><br><span class="line">int q[N],temp[N];</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">merge_sort</span>(<span class="params">int q[],int l,int r</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">    int mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="title function_">merge_sort</span>(q,l,mid);</span><br><span class="line">    <span class="title function_">merge_sort</span>(q,mid+<span class="number">1</span>,r);</span><br><span class="line">    int k=<span class="number">0</span>,i=l,j=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i]&lt;=q[j])temp[k++]=q[i++];</span><br><span class="line">        <span class="keyword">else</span> temp[k++]=q[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)temp[k++]=q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)temp[k++]=q[j++];</span><br><span class="line">    <span class="keyword">for</span>(int i=l,k=<span class="number">0</span>;i&lt;=r;i++,k++)&#123;</span><br><span class="line">        q[i]=temp[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)<span class="title function_">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">    <span class="title function_">merge_sort</span>(q,<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)<span class="title function_">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="788-逆序对的数量"><a href="#788-逆序对的数量" class="headerlink" title="788.逆序对的数量"></a><a href="https://www.acwing.com/problem/content/790/">788.逆序对的数量</a></h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>对于数列的第 𝑖 个和第 𝑗 个元素，如果满足 𝑖&lt;𝑗 且 𝑎[𝑖]&gt;𝑎[𝑗]，则其为一个逆序对；否则不是。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>使用归并排序来计算逆序对的数量<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405261436463.jpg" alt=""></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.<span class="property">h</span>&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line"><span class="keyword">const</span> int N=<span class="number">100010</span>;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line">int n;</span><br><span class="line">int q[N],temp[N];</span><br><span class="line"></span><br><span class="line">ll <span class="title function_">merge_sort</span>(<span class="params">int l,int r</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    int mid =l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="title function_">merge_sort</span>(l,mid);</span><br><span class="line">    <span class="title function_">merge_sort</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">    int i=l,j=mid+<span class="number">1</span>,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i]&lt;=q[j]) temp[k++]=q[i++];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[k++]=q[j++];</span><br><span class="line">            res+=mid-i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)temp[k++]=q[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)temp[k++]=q[j++];</span><br><span class="line">    <span class="keyword">for</span>(int k=<span class="number">0</span>,i=l;i&lt;=r;i++,k++)&#123;</span><br><span class="line">        q[i]=temp[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)<span class="title function_">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">    cout&lt;&lt;<span class="title function_">merge_sort</span>(<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing 快排与快速选择</title>
      <link href="/2024/05/21/AcWing%20%E5%BF%AB%E6%8E%92%E4%B8%8E%E5%BF%AB%E9%80%9F%E9%80%89%E6%8B%A9/"/>
      <url>/2024/05/21/AcWing%20%E5%BF%AB%E6%8E%92%E4%B8%8E%E5%BF%AB%E9%80%9F%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="快速排序模版"><a href="#快速排序模版" class="headerlink" title="快速排序模版"></a><a href="https://www.acwing.com/problem/content/787/">快速排序模版</a></h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>快排的基本思想的基于分而治之<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> q[N];</span><br></pre></td></tr></table></figure><br>1 确定分界点x，分界点x=q<a href="左端点">l</a>，q<a href="右端点">r</a>，q[l+r&gt;&gt;1]中点，随机点<br>注意：分界点原位置上的数不一定是x，例如选择中点为x，一轮快排后的q[l+r&gt;&gt;1]不一定等于x。<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405211715942.jpg" alt=""><br>2 调整区间<br>左区间所有的数都小于等于x，<br>右区间所有的数都大于等于x<br>3递归处理左右两端</p><h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><p>难点：如何调整区间<br>1 开辟两个额外空间，数组a[],b[]<br>遍历原数组q，对于q[i]&gt;x,放入a[]中<br>  对于q[i]<x,放入b[]中2设置左右指针，i指针从left-1开始遍历，如果q[i]<x,i指针右移，j 指针从right+1开始遍历，如果q[i]>x,指针左移,对于一个i,j移动的时候，可以多次重复操作，直到两者交叉<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int  i=l-<span class="number">1</span>,j=r+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">  <span class="keyword">while</span>(q[++i]&lt;x);</span><br><span class="line">  <span class="keyword">while</span>(q[--j]&gt;x);</span><br><span class="line">  <span class="keyword">if</span>(i&lt;j)<span class="title function_">swap</span>(q[i],q[j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.<span class="property">h</span>&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int N=<span class="number">100010</span>;</span><br><span class="line">int q[N];</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">quick_sort</span>(<span class="params">int q[],int l,int r</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span>;</span><br><span class="line">    int i=l-<span class="number">1</span>,j=r+<span class="number">1</span>,x=q[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">do</span> i++;<span class="keyword">while</span>(q[i]&lt;x);</span><br><span class="line">        <span class="keyword">do</span> j--;<span class="keyword">while</span>(q[j]&gt;x);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j) <span class="title function_">swap</span>(q[i],q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">quick_sort</span>(q,l,j);</span><br><span class="line">    <span class="title function_">quick_sort</span>(q,j+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    int n;</span><br><span class="line">    <span class="title function_">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++) <span class="title function_">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">    <span class="title function_">quick_sort</span>(q,<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++) <span class="title function_">printf</span>(<span class="string">&quot;%d &quot;</span>,q[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h3><p><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405211715944.jpg" alt=""></p><h2 id="786-第k个数"><a href="#786-第k个数" class="headerlink" title="786.第k个数"></a><a href="https://www.acwing.com/problem/content/788/">786.第k个数</a></h2><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p>使用快速选择算法求出数列从小到大排序后的第k个数。<br>当然可以先将数组进行快排，然后q[k-1]，但是也可以使用快速选择算法。<br>快速选择算法是在快排模版的基础上进行修改的<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405211715945.jpg" alt=""><br>当k=3时，第3个数肯定在快排后数组的右边及SR那部分，那完全没必要对左边进行快排<br>quick_sort(j+1,r,k-sl)</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.<span class="property">h</span>&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">const</span> int N=<span class="number">100010</span>;</span><br><span class="line">int q[N];</span><br><span class="line">int n,k;</span><br><span class="line">int <span class="title function_">quick_sort</span>(<span class="params">int l,int r,int k</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> q[l];</span><br><span class="line">    int i=l-<span class="number">1</span>,j=r+<span class="number">1</span>,x=q[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">while</span>(q[++i]&lt;x);</span><br><span class="line">        <span class="keyword">while</span>(q[--j]&gt;x);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)<span class="title function_">swap</span>(q[i],q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    int sl=j-l+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k&gt;sl) <span class="keyword">return</span> <span class="title function_">quick_sort</span>(j+<span class="number">1</span>,r,k-sl);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="title function_">quick_sort</span>(l,j,k);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;n;i++)<span class="title function_">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">    cout&lt;&lt;<span class="title function_">quick_sort</span>(<span class="number">0</span>,n-<span class="number">1</span>,k);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟-1"><a href="#模拟-1" class="headerlink" title="模拟"></a>模拟</h3><p><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405211715946.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 快排 快速选择 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 概论</title>
      <link href="/2024/05/21/C++%20%E6%A6%82%E8%AE%BA/"/>
      <url>/2024/05/21/C++%20%E6%A6%82%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-面向对象方法概述"><a href="#第一章-面向对象方法概述" class="headerlink" title="第一章 面向对象方法概述"></a>第一章 面向对象方法概述</h2><h3 id="面向过程和面向对象的区别"><a href="#面向过程和面向对象的区别" class="headerlink" title="面向过程和面向对象的区别"></a>面向过程和面向对象的区别</h3><h4 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h4><p>面向过程关注要解决什么问题，以及解决问题的实现步骤<br>面向对象关注解决问题的对象，以及解决这个问题时各个对象之间的交互</p><h4 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h4><p>面向过程使用函数组织代码<br>面向对象使用类和对象组织代码</p><h4 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h4><p>面向过程适合简单任务和快速开发<br>面向对象更易于维护和扩展。</p><h3 id="面向对象的基本概念"><a href="#面向对象的基本概念" class="headerlink" title="面向对象的基本概念"></a>面向对象的基本概念</h3><h4 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h4><p>对象：现实世界的任何事物，具有属性和行为<br>类：对一组具有共同的属性和行为的对象的抽象<br>类是对象的抽象<br>对象是类的实例</p><h4 id="消息和方法"><a href="#消息和方法" class="headerlink" title="消息和方法"></a>消息和方法</h4><p>消息：一个对象对于另一个对象发出的请求，称为“消息”，对象之间的交互<br>方法：对象所能实现的行为，通过成员函数来实现<br>对象接受消息，实现相应的方法<br>有了方法，才能响应响应的消息</p><h3 id="面向对象程序设计的基本特征"><a href="#面向对象程序设计的基本特征" class="headerlink" title="面向对象程序设计的基本特征"></a>面向对象程序设计的基本特征</h3><p>抽象：将有关事物的共性归纳，集中。<br>封装：封装是指把数据和实现操作的代码都集中的放在对象内部，尽可能隐蔽对象的内部细节。<br>继承：后者继承前者的基本特征，同时增加一些新的特征。<br>多态：不同对象收到相同消息时，执行不同的操作。<br>编译时的多态性：通过函数重载和运算符重载来实现。<br>运行时的多态性：通过虚函数来实现。</p><h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><p>C++是面向对象语言吗？<br>C++是一门面向对象和面向过程相结合的语言，而不是纯面向对象语言。<br>什么是面向对象程序设计？<br>什么是对象？</p><h2 id="第二章-C-概述"><a href="#第二章-C-概述" class="headerlink" title="第二章 C++概述"></a>第二章 C++概述</h2><h3 id="C-起源和特点"><a href="#C-起源和特点" class="headerlink" title="C++起源和特点"></a>C++起源和特点</h3><p>1.是C的拓展，兼容c<br>2.保持C的简洁，高效，增加了可重用性，可扩展性，，可靠性，可维护性。<br>3.增加面向对象的机制：<br>抽象<br>封装<br>继承<br>多态：函数重载，运算符重载，虚函数。</p><h3 id="C-源程序构成"><a href="#C-源程序构成" class="headerlink" title="C++源程序构成"></a>C++源程序构成</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream.<span class="property">h</span>&gt;</span><br><span class="line"><span class="comment">//类的声明部分</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">A</span>  &#123;</span><br><span class="line">   int  x,y,z;        <span class="comment">//类A的数据成员声明</span></span><br><span class="line">   <span class="title function_">fun</span>(<span class="params"> </span>)   &#123;</span><br><span class="line">        …</span><br><span class="line">   &#125;                      <span class="comment">//类A的成员函数声明</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类的使用部分</span></span><br><span class="line"><span class="keyword">void</span>  <span class="title function_">main</span>(<span class="params"> </span>) </span><br><span class="line">&#123;   A  a;              <span class="comment">//创建一个类A的对象a</span></span><br><span class="line">    a.<span class="title function_">fun</span>( );         <span class="comment">//给对象a发消息，调用成员函数fun( )</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-在非面向对象方面扩充"><a href="#C-在非面向对象方面扩充" class="headerlink" title="C++在非面向对象方面扩充"></a>C++在非面向对象方面扩充</h3><h4 id="注释行"><a href="#注释行" class="headerlink" title="注释行"></a>注释行</h4><p>/<em>    </em>/     C的注释<br>//         C++的注释</p><h4 id="新的I-O流"><a href="#新的I-O流" class="headerlink" title="新的I/O流"></a>新的I/O流</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream.<span class="property">h</span>&gt;</span><br><span class="line">cin&gt;&gt;</span><br><span class="line">cout&lt;&lt;</span><br></pre></td></tr></table></figure><h4 id="灵活的局部变量说明"><a href="#灵活的局部变量说明" class="headerlink" title="灵活的局部变量说明"></a>灵活的局部变量说明</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int <span class="title function_">f</span>(<span class="params">  </span>)</span><br><span class="line">&#123; </span><br><span class="line">    int  i;</span><br><span class="line">    i=<span class="number">10</span>;</span><br><span class="line">    int  j;</span><br><span class="line">    j=<span class="number">25</span>;</span><br><span class="line">    <span class="keyword">for</span>(int k=<span class="number">5</span>;k&gt;=<span class="number">0</span>;k--) …..</span><br><span class="line">    …….</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C语言中，变量必须在块的开头声明，不能在其他地方声明。C++没这个要求</span></span><br></pre></td></tr></table></figure><h4 id="结构、联合和枚举名可直接作为类型名"><a href="#结构、联合和枚举名可直接作为类型名" class="headerlink" title="结构、联合和枚举名可直接作为类型名"></a>结构、联合和枚举名可直接作为类型名</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定义枚举类型名*/</span></span><br><span class="line">enum bool &#123;<span class="variable constant_">FALSE</span>,  <span class="variable constant_">TRUE</span>&#125;;</span><br><span class="line"><span class="comment">/*定义结构枚举类型名*/</span></span><br><span class="line"><span class="title class_">Struct</span>  student  &#123;</span><br><span class="line">         int    sno;</span><br><span class="line">         char *sneme;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">C定义枚举类型变量：  enum  bool   done;</span><br><span class="line">定义结构类型变量： struct  student  s1, s2;</span><br><span class="line"></span><br><span class="line">C++定义枚举类型变量： bool   done;</span><br><span class="line">定义结构类型变量： student  s1, s2;</span><br></pre></td></tr></table></figure><h4 id="const-修饰符"><a href="#const-修饰符" class="headerlink" title="const 修饰符"></a>const 修饰符</h4><p>常量一旦建立，就不能更改<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#define  <span class="variable constant_">LIMIT</span>   <span class="number">100</span>                 C</span><br><span class="line"><span class="keyword">const</span>  int  <span class="variable constant_">LIMIT</span>=<span class="number">100</span>;               C++</span><br><span class="line"></span><br><span class="line">#include &lt;bits/stdc++.<span class="property">h</span>&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">int a=<span class="number">1</span>;</span><br><span class="line">#define <span class="variable constant_">T1</span> a+a</span><br><span class="line">#define <span class="variable constant_">T2</span> <span class="variable constant_">T1</span>-<span class="variable constant_">T1</span></span><br><span class="line">cout&lt;&lt;<span class="variable constant_">T2</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-2 &lt;&lt;a+a-a+a&lt;&lt;1+1-1+1</span></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">int a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> int <span class="variable constant_">T1</span>=a+a</span><br><span class="line"><span class="keyword">const</span> int <span class="variable constant_">T2</span>=<span class="variable constant_">T1</span>-<span class="variable constant_">T1</span></span><br><span class="line">cout&lt;&lt;<span class="variable constant_">T2</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//0</span></span><br></pre></td></tr></table></figure><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针常量</span></span><br><span class="line">char* name=<span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="keyword">const</span> char* name =<span class="string">&quot;jack&quot;</span>  <span class="comment">//指针常量</span></span><br><span class="line"><span class="comment">//不可以改变数据，即不可给name[1]=&#x27;a&#x27;;</span></span><br><span class="line"><span class="comment">//但是可以改变地址，即可以name=&quot;alice&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常指针</span></span><br><span class="line"><span class="keyword">const</span> name=<span class="string">&quot;jack&quot;</span></span><br><span class="line">char* <span class="keyword">const</span> name=<span class="string">&quot;jack&quot;</span> <span class="comment">//常指针</span></span><br><span class="line"><span class="comment">//name的地址恒定不可改变，即不允许name=&quot;alice&quot;;</span></span><br><span class="line"><span class="comment">//但是可以改变数据，即name[1]=&#x27;a&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指向常量的常指针</span></span><br><span class="line"><span class="keyword">const</span> char* <span class="keyword">const</span> name=<span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="comment">//地址和数据都不可以改变</span></span><br></pre></td></tr></table></figure><br>函数的形参用const说明，保证形参在该函数内部不被改动<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int <span class="title function_">i_Max</span>(<span class="keyword">const</span> int*ptr);<span class="comment">//寻找整型数组a[200]中的最大值</span></span><br><span class="line"><span class="title function_">i_Max</span>(a);</span><br></pre></td></tr></table></figure></p><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><p><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405212242357.png" alt="image.png"></p><p>1 在内联函数体内不要有for语句和switch语句等较为复杂的控制语句。<br>2 若内联函数较长(1-5条语句最佳),且调用太频繁时,程序将加长很多<br>3 内置函数与#define相同的作用和相似的机理，但消除了#define的不安全因素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#define <span class="title function_">doub</span>(x)  x*<span class="number">2</span></span><br><span class="line">cout&lt;&lt;<span class="title function_">doub</span>(<span class="number">1</span>+<span class="number">2</span>)   <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">inline int <span class="title function_">doub</span>(<span class="params">int x</span>)</span><br><span class="line">&#123; <span class="keyword">return</span> x*<span class="number">2</span>; &#125;</span><br><span class="line">cout&lt;&lt;<span class="title function_">doub</span>(<span class="number">1</span>+<span class="number">2</span>) <span class="comment">//9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">返回类型 函数名(参数表)</span><br><span class="line">#include &lt;iostream.<span class="property">h</span>&gt;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span>(char *s);         <span class="comment">//函数原型、函数声明</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">main</span>(<span class="params"> </span>)                        </span><br><span class="line">&#123;<span class="title function_">write</span>(<span class="string">&quot;Hello, world!&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">write</span>(char *s)无分号</span><br><span class="line">&#123; cout&lt;&lt;s&lt;&lt;endl;  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用在前，定义在后，要先声明</span></span><br></pre></td></tr></table></figure><p>函数原型：<br>Int area(int,int);和我之前理解的函数声明一致，叫函数原型，有‘’ ；‘’号<br>函数原型中的参数名是可以进行省略的<br>函数的第一行必须包括参数名，无；有{}</p><h4 id="带有缺省参数的函数"><a href="#带有缺省参数的函数" class="headerlink" title="带有缺省参数的函数"></a>带有缺省参数的函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int  <span class="title function_">special</span>(int x=<span class="number">5</span>, float y=<span class="number">5.3</span>);</span><br><span class="line"><span class="comment">//调用；</span></span><br><span class="line"><span class="title function_">special</span>( );                  <span class="comment">//合法</span></span><br><span class="line"><span class="title function_">special</span>(<span class="number">25</span>);                 <span class="comment">//合法</span></span><br><span class="line"><span class="title function_">special</span>(<span class="number">100</span>,<span class="number">79.8</span>);           <span class="comment">//合法</span></span><br><span class="line"><span class="title function_">special</span>(,<span class="number">21.5</span>);              <span class="comment">//不合法</span></span><br></pre></td></tr></table></figure><p>所有取缺省值参数都必须出现在不取缺省值参数的右边<br>说白了，参数有赋值的都先写在左边，没写的都取默认值在右边<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int <span class="title function_">fun</span>(int i,int j=<span class="number">5</span>, int k)          <span class="comment">//错误</span></span><br><span class="line">int <span class="title function_">fun</span>(int i, int k,int j=<span class="number">5</span>)          <span class="comment">//正确</span></span><br></pre></td></tr></table></figure><br>函数原型和定义都可以指定参数的默认值。</p><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><p>定义：函数的参数类型不同，或者参数个数不同，或者二者兼有，但是有相同的函数名。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int <span class="title function_">square</span>(<span class="params">int i</span>)</span><br><span class="line">&#123;  <span class="keyword">return</span> i*i; &#125;</span><br><span class="line">float <span class="title function_">square</span>(<span class="params">float f</span>)</span><br><span class="line">&#123;  <span class="keyword">return</span> f*f; &#125;</span><br><span class="line">double <span class="title function_">square</span>(<span class="params">double d</span>)</span><br><span class="line">&#123;  <span class="keyword">return</span> d*d; &#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">mul</span>(<span class="params">int x, int y</span>)</span><br><span class="line">&#123; <span class="keyword">return</span> x*y; &#125;</span><br><span class="line"></span><br><span class="line">int <span class="title function_">mul</span>(<span class="params">int x, int y, int z</span>)</span><br><span class="line">&#123; <span class="keyword">return</span> x*y*z; &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>仅仅返回类型不同不是重载函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int <span class="title function_">mul</span>(int x, int y) ;</span><br><span class="line">double <span class="title function_">mul</span>(int x, int y); </span><br></pre></td></tr></table></figure><br>重载函数应对不同的参数情况执行相同的功能<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">abs</span>(int x); </span><br><span class="line"><span class="title function_">abs</span>(float x);</span><br></pre></td></tr></table></figure><br>函数的重载与带默认值的函数一起使用时，可能引起二义性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>   <span class="title class_">Drawcircle</span>(int  r=<span class="number">0</span>; int x=<span class="number">0</span>;  int y=<span class="number">0</span>);</span><br><span class="line"><span class="keyword">void</span>   <span class="title class_">Drawcircle</span>(int   r);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Drawcircle</span>(<span class="number">20</span>)<span class="comment">//无法确定使用哪一个函数</span></span><br></pre></td></tr></table></figure></p><h4 id="作用域运算符"><a href="#作用域运算符" class="headerlink" title="作用域运算符::"></a>作用域运算符::</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int a=<span class="number">25</span>    <span class="comment">//全局变量</span></span><br><span class="line">int <span class="title function_">main</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">  int a=<span class="number">10</span>     <span class="comment">//局部变量</span></span><br><span class="line">  ::a  <span class="comment">//全局变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="无名联合"><a href="#无名联合" class="headerlink" title="无名联合"></a>无名联合</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C语言的共用体</span></span><br><span class="line">union data </span><br><span class="line">&#123;  int   i;</span><br><span class="line">    char  ch;</span><br><span class="line">    float  f;</span><br><span class="line">&#125;</span><br><span class="line">union data a,b,c;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++的无名联合</span></span><br><span class="line">union </span><br><span class="line">&#123; int i;</span><br><span class="line">  char  ch;</span><br><span class="line">  float  f;</span><br><span class="line">&#125; a; <span class="comment">//引用:a.i,a.ch a.f                                 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C语言的强制类型转换：</span></span><br><span class="line">int  i=<span class="number">10</span>;</span><br><span class="line">float  x=(float)i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++的强制类型转换：</span></span><br><span class="line">int  i=<span class="number">10</span>;</span><br><span class="line">float  x=<span class="title function_">float</span>(i);</span><br><span class="line">float  y=(float)i;</span><br></pre></td></tr></table></figure><h4 id="new和delete"><a href="#new和delete" class="headerlink" title="new和delete"></a>new和delete</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C动态分配内存与释放：malloc()  free()</span></span><br><span class="line">int *p =(int * ) <span class="title function_">malloc</span>(<span class="title function_">sizeof</span>(int));</span><br><span class="line">*p=<span class="number">10</span>;</span><br><span class="line"><span class="title function_">free</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++动态分配内存与释放：                        </span></span><br><span class="line">int *p;             </span><br><span class="line">p=<span class="keyword">new</span> int;      </span><br><span class="line">*p=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">delete</span> p;          </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>new 动态分配优点：<br>1 new自动计算所要分配内存大小，不必要sizeof()<br>2 new不必进行指针类型转换。</p><p>1，new可以动态分配数组内存空间<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int *p=<span class="keyword">new</span> int[<span class="number">10</span>]</span><br><span class="line">int *p=<span class="keyword">new</span> int[<span class="number">2</span>][<span class="number">3</span>][<span class="number">4</span>]</span><br></pre></td></tr></table></figure><br>2.new可以在动态分配数组内存空间的同时，进行初始化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int *p=<span class="keyword">new</span> <span class="title function_">int</span>(<span class="number">99</span>)</span><br><span class="line"><span class="keyword">delete</span> p  <span class="comment">//注意没有*号</span></span><br></pre></td></tr></table></figure></p><p>3 有new必有delete<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int *p=<span class="keyword">new</span> <span class="title function_">int</span>(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">int *p=<span class="keyword">new</span> int[<span class="number">10</span>]</span><br><span class="line"><span class="keyword">delete</span> []p</span><br></pre></td></tr></table></figure><br>4.动态分配内存失败后，将返回空指针（Null）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream.<span class="property">h</span>&gt;</span><br><span class="line"><span class="keyword">void</span>  <span class="title function_">main</span>(<span class="params"> </span>)                        </span><br><span class="line">&#123; int *p;</span><br><span class="line">  p=<span class="keyword">new</span> int;      </span><br><span class="line">  <span class="keyword">if</span>(!p)              <span class="comment">//若分配内存失败</span></span><br><span class="line">  &#123; cout&lt;&lt;<span class="string">&quot;allocation failure\n&quot;</span>;</span><br><span class="line">     <span class="title function_">exit</span>(<span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line">  *p=<span class="number">20</span>;</span><br><span class="line">  cout&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5使用new创建对象时会调用构造函数<br>使用delete删除对象时会调用析构函数<br>6对一个指针只能使用一次delete</p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>引用就是别名，就是一种隐式指针可以少用*</p><h5 id="变量引用"><a href="#变量引用" class="headerlink" title="变量引用"></a>变量引用</h5><p><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405212242358.png" alt="image.png"><br>定义引用需要立即进行初始化，以后不能再赋值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int  i;    int  &amp;j;   j=i;      <span class="comment">//错误 </span></span><br><span class="line">int i; int &amp;j=i;</span><br></pre></td></tr></table></figure><br>i，j共用一个地址<br>当i的值改变时，j的值也改变；<br>j的值改变时，i的值也改变。<br>引用可以用于初始化另外一个引用，但是不存在二级引用<br>不存在指针引用，二级引用，数组引用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int i</span><br><span class="line">int &amp;j=i</span><br><span class="line">int &amp;k=j </span><br><span class="line"><span class="comment">//ijk三者共用一个地址，当一个值改变另外2个值也发生改变。</span></span><br></pre></td></tr></table></figure><br>地址与引用运算符的区别<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int  num=<span class="number">50</span>;</span><br><span class="line">int  &amp;ref=num;</span><br><span class="line">int  *p=&amp;ref;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream.<span class="property">h</span>&gt;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">main</span>(<span class="params"> </span>)                        </span><br><span class="line">&#123; int i=<span class="number">15</span>;                                 <span class="comment">//整型变量i</span></span><br><span class="line">  int *iptr=&amp;i;                            <span class="comment">//iptr指向i</span></span><br><span class="line">  int &amp;rptr=i;                             <span class="comment">//rptr引用i</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;i is &quot;</span>&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;*iptr is &quot;</span>&lt;&lt;*iptr&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;rptr is &quot;</span>&lt;&lt;rptr&lt;&lt;endl;</span><br><span class="line">  i=<span class="number">29</span>;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot; After changing i to 29&quot;</span>&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;i is &quot;</span>&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;*iptr is &quot;</span>&lt;&lt;*iptr&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;rptr is &quot;</span>&lt;&lt;rptr&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i   is  <span class="number">15</span>              i    is  <span class="number">29</span></span><br><span class="line">*iptr is <span class="number">15</span>             *iptr  is  <span class="number">29</span></span><br><span class="line">rptr  is <span class="number">15</span>              rptr  is <span class="number">29</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="引用作为函数参数"><a href="#引用作为函数参数" class="headerlink" title="引用作为函数参数"></a>引用作为函数参数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">swap</span>(<span class="params">int *m, int *n</span>)</span><br><span class="line">&#123; int temp;</span><br><span class="line">   temp=*m;</span><br><span class="line">  *m=*n;</span><br><span class="line">  *n=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">swap</span>(&amp;a,&amp;b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">swap</span>(<span class="params">int &amp;m, int &amp;n</span>)</span><br><span class="line">&#123; int temp;</span><br><span class="line">  temp=m;</span><br><span class="line">  m=n;</span><br><span class="line">  n=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">swap</span>(a,b);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="引用作为函数返回值"><a href="#引用作为函数返回值" class="headerlink" title="引用作为函数返回值"></a>引用作为函数返回值</h5><p>函数可返回一个引用，当在函数定义时加上&amp;，那么就可以将函数写在赋值运算符的左边。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream.<span class="property">h</span>&gt;</span><br><span class="line">int a[]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">int &amp;<span class="title function_">index</span>(int);                     <span class="comment">//声明返回引用的函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">main</span>(<span class="params"> </span>)</span><br><span class="line">&#123; <span class="title function_">index</span>(<span class="number">2</span>)=<span class="number">25</span>;                       <span class="comment">//将a[2]重新赋值为25</span></span><br><span class="line">  cout&lt;&lt;<span class="title function_">index</span>(<span class="number">2</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int &amp; <span class="title function_">index</span>(<span class="params">int i</span>)</span><br><span class="line">&#123; <span class="keyword">return</span> a[i]; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>注意引用函数与内联函数的区别<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Inline</span> int area（）</span><br><span class="line"><span class="title class_">Int</span> &amp;area（）</span><br></pre></td></tr></table></figure></p><h4 id="void-指针"><a href="#void-指针" class="headerlink" title="void 指针"></a>void 指针</h4><p>void 指针是通用型指针，可指任何类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>  pa;   <span class="comment">//错误，不能声明void类型的变量</span></span><br><span class="line"><span class="keyword">void</span>  *pa;  <span class="comment">//正确，可以声明void类型的指针</span></span><br><span class="line">int  i=<span class="number">456</span>;         </span><br><span class="line">pa=&amp;i;     </span><br><span class="line">char  c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">pa=&amp;c</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream.<span class="property">h</span>&gt;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">main</span>(<span class="params"></span>)</span><br><span class="line">&#123;   <span class="keyword">void</span>  *pc; </span><br><span class="line">     int  i=<span class="number">456</span>;</span><br><span class="line">     char  c=‘a’;</span><br><span class="line">     pc=&amp;i;</span><br><span class="line">     cout&lt;&lt;*(int*)pc&lt;&lt;endl;</span><br><span class="line">     pc=&amp;c;</span><br><span class="line">    cout&lt;&lt;*(char*)pc&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 生活趣闻 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五章_栈与队列_part01</title>
      <link href="/2024/05/19/%E7%AC%AC%E4%BA%94%E7%AB%A0_%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97_part01/"/>
      <url>/2024/05/19/%E7%AC%AC%E4%BA%94%E7%AB%A0_%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97_part01/</url>
      
        <content type="html"><![CDATA[<h2 id="栈与队列的理论基础"><a href="#栈与队列的理论基础" class="headerlink" title="栈与队列的理论基础"></a>栈与队列的理论基础</h2><p>栈不提供迭代器(iterator)，不像是set或者map提供迭代器iterator遍历所有元素<br>栈提供top，push，pop等接口<br>栈是以底层容器完成其所有工作，对外提供统一的接口，我们可以控制选择哪种底层容器来实现栈的功能<br>STL中栈不归为容器，而是容器适配器，<br>栈的底层容器一般是数组和链表，或者deque(双向队列)封住其中一段。<br>队列同理。</p><h2 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232.用栈实现队列"></a><a href="https://leetcode.cn/problems/implement-queue-using-stacks/description/">232.用栈实现队列</a></h2><h3 id="题目重述："><a href="#题目重述：" class="headerlink" title="题目重述："></a>题目重述：</h3><p>使用两个栈实现先入先出队列。实现push，pop，peek，empty方法<br>push(x)—将一个元素放入队列的尾部<br>pop()—从队列首部移除元素<br>peek()—返回队列首部的元素<br>empty()—返回队列是否为空</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>两次进栈实现先进先出</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt;In;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt;Out;</span><br><span class="line">    <span class="built_in">MyQueue</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        In.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Out.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!In.<span class="built_in">empty</span>())&#123;</span><br><span class="line">                <span class="type">int</span> res=In.<span class="built_in">top</span>();</span><br><span class="line">                In.<span class="built_in">pop</span>();</span><br><span class="line">                Out.<span class="built_in">push</span>(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res=Out.<span class="built_in">top</span>();</span><br><span class="line">        Out.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res=<span class="keyword">this</span>-&gt;<span class="built_in">pop</span>();</span><br><span class="line">        Out.<span class="built_in">push</span>(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> In.<span class="built_in">empty</span>()&amp;&amp;Out.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225.用队列实现栈"></a><a href="https://leetcode.cn/problems/implement-stack-using-queues/description/">225.用队列实现栈</a></h2><h3 id="题目重述"><a href="#题目重述" class="headerlink" title="题目重述:"></a>题目重述:</h3><p>使用两个队列实现一个后入先出的栈，实现栈的四种操作<br>push(x)，将元素x压入栈顶元素<br>pop() 移除并返回栈顶元素。<br>top() 返回栈顶元素<br>empty() 如果栈为空，返回true。否则返回false</p><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>将队列q2作为q1的备份队列</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;q1;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;q2;</span><br><span class="line">    <span class="built_in">MyStack</span>()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        q1.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size=q1.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(size--)&#123;</span><br><span class="line">            q2.<span class="built_in">push</span>(q1.<span class="built_in">front</span>());</span><br><span class="line">            q1.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res=q1.<span class="built_in">front</span>();</span><br><span class="line">        q1.<span class="built_in">pop</span>();</span><br><span class="line">        q1=q2;</span><br><span class="line">        <span class="keyword">while</span>(!q2.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            q2.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q1.<span class="built_in">back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q1.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 栈与队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五章_栈与队列_part02</title>
      <link href="/2024/05/19/%E7%AC%AC%E4%BA%94%E7%AB%A0_%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97_part02/"/>
      <url>/2024/05/19/%E7%AC%AC%E4%BA%94%E7%AB%A0_%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97_part02/</url>
      
        <content type="html"><![CDATA[<h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20.有效的括号"></a><a href="https://leetcode.cn/problems/valid-parentheses/description/">20.有效的括号</a></h2><h3 id="题目重述："><a href="#题目重述：" class="headerlink" title="题目重述："></a>题目重述：</h3><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><h3 id="看到题目的第一想法："><a href="#看到题目的第一想法：" class="headerlink" title="看到题目的第一想法："></a>看到题目的第一想法：</h3><p>遇到左括号就入栈，遇到右括号，就将栈顶元素取出进行比较，然后出栈<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt;st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;(&#x27;</span>||s[i]==<span class="string">&#x27;[&#x27;</span>||s[i]==<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                st.<span class="built_in">push</span>(s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (st.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="type">char</span> c;</span><br><span class="line">                <span class="keyword">if</span>(st.<span class="built_in">top</span>()==<span class="string">&#x27;(&#x27;</span>) c=<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(st.<span class="built_in">top</span>()==<span class="string">&#x27;[&#x27;</span>) c=<span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(st.<span class="built_in">top</span>()==<span class="string">&#x27;&#123;&#x27;</span>) c=<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(s[i]==c)&#123;</span><br><span class="line">                    st.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录:"></a>代码随想录:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>()%<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt;st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;(&#x27;</span>) st.<span class="built_in">push</span>(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;[&#x27;</span>) st.<span class="built_in">push</span>(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;&#123;&#x27;</span>) st.<span class="built_in">push</span>(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(st.<span class="built_in">empty</span>()||st.<span class="built_in">top</span>()!=s[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> st.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047.删除字符串中的所有相邻重复项"></a><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/description/">1047.删除字符串中的所有相邻重复项</a></h2><h3 id="题目重述"><a href="#题目重述" class="headerlink" title="题目重述:"></a>题目重述:</h3><p>有一个字符串s，删除操作会选择两个相邻且相同的字母，然后删除。重复删除操作。</p><h3 id="看到题目的第一想法：-1"><a href="#看到题目的第一想法：-1" class="headerlink" title="看到题目的第一想法："></a>看到题目的第一想法：</h3><p>创建stack<char>st,如果栈空就push<br>每遇到一个字符就比较st.top，如果相等就st.pop()，不相等就push<br>输出栈元素<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt;st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(st.<span class="built_in">empty</span>())st.<span class="built_in">push</span>(s[i]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==st.<span class="built_in">top</span>()) st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">else</span> st.<span class="built_in">push</span>(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            res+=st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="代码随想录："><a href="#代码随想录：" class="headerlink" title="代码随想录："></a>代码随想录：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">removeDuplicates</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(res.<span class="built_in">empty</span>()||res.<span class="built_in">back</span>()!=c) res.<span class="built_in">push_back</span>(c);</span><br><span class="line">            <span class="keyword">else</span> res.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150.逆波兰表达式求值"></a><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/description/">150.逆波兰表达式求值</a></h2><h3 id="题目重述：-1"><a href="#题目重述：-1" class="headerlink" title="题目重述："></a>题目重述：</h3><p>有个字符串数组tokens，表示逆波兰表示法表示的算术表达式。计算该表达式，返回结果。<br>注意：</p><ul><li>有效的算符为 ‘+’、’-‘、’*’ 和 ‘/‘ 。</li><li>每个操作数（运算对象）都可以是一个整数或者另一个表达式。</li><li>两个整数之间的除法总是 向零截断 。</li><li>表达式中不含除零运算。</li><li>输入是一个根据逆波兰表示法表示的算术表达式。</li><li>答案及所有中间计算结果可以用 32 位 整数表示。<h3 id="看到题目的第一想法：-2"><a href="#看到题目的第一想法：-2" class="headerlink" title="看到题目的第一想法："></a>看到题目的第一想法：</h3>创建栈stack<char>st;<br>st.push(tokens[0]);st.push(tokens[1]);<br>如果tokens[]是算符，取出栈顶的两个元素进行计算，将结果返回栈。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">evalRPN</span><span class="params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">long</span> <span class="type">long</span>&gt;st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tokens.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tokens[i]==<span class="string">&quot;+&quot;</span>||tokens[i]==<span class="string">&quot;-&quot;</span>||tokens[i]==<span class="string">&quot;*&quot;</span>||tokens[i]==<span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> a= st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> b = st.<span class="built_in">top</span>();</span><br><span class="line">                st.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> res;</span><br><span class="line">                <span class="keyword">if</span>(tokens[i]==<span class="string">&quot;+&quot;</span>) res=b+a;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(tokens[i]==<span class="string">&quot;-&quot;</span>)res=b-a;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(tokens[i]==<span class="string">&quot;*&quot;</span>)res=b*a;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(tokens[i]==<span class="string">&quot;/&quot;</span>)res=b/a;</span><br><span class="line">                st.<span class="built_in">push</span>(res);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> st.<span class="built_in">push</span>(<span class="built_in">stoll</span>(tokens[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  st.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 栈与队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章_字符串_part02</title>
      <link href="/2024/05/19/%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E5%AD%97%E7%AC%A6%E4%B8%B2_part02/"/>
      <url>/2024/05/19/%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E5%AD%97%E7%AC%A6%E4%B8%B2_part02/</url>
      
        <content type="html"><![CDATA[<h2 id="28-找出字符串中第一个匹配项的下标"><a href="#28-找出字符串中第一个匹配项的下标" class="headerlink" title="28.找出字符串中第一个匹配项的下标"></a><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/">28.找出字符串中第一个匹配项的下标</a></h2><h3 id="题目重述："><a href="#题目重述：" class="headerlink" title="题目重述："></a>题目重述：</h3><p>有两个字符串s1，s2，在s1字符串中找出s2字符串的第一个匹配项的下标（下标从0开始）。<br>如果s2不是s1的一部分，返回-1</p><h3 id="看到题目的想法："><a href="#看到题目的想法：" class="headerlink" title="看到题目的想法："></a>看到题目的想法：</h3><p>创造一个s2.size()大小的移动窗口。然后遍历s1，slow=0,fast=s2.size()-1.<br>如果[slow,fast]==s1,则返回slow，否则返回-1；<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201639424.jpg" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cmp1</span><span class="params">(string s1,string s2,<span class="type">int</span> start,<span class="type">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;=end;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1[i]==s2[count++])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=needle.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(needle.<span class="built_in">size</span>()&gt;haystack.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;haystack.<span class="built_in">size</span>()-n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> flag = <span class="built_in">cmp1</span>(haystack,needle,i,i+n<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="number">1</span>) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="代码随想录："><a href="#代码随想录：" class="headerlink" title="代码随想录："></a>代码随想录：</h3><p>使用了KMP方法</p><h4 id="我自己的KMP理解"><a href="#我自己的KMP理解" class="headerlink" title="我自己的KMP理解"></a>我自己的KMP理解</h4><h5 id="KMP有什么用？"><a href="#KMP有什么用？" class="headerlink" title="KMP有什么用？"></a>KMP有什么用？</h5><p>当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配。<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201639425.jpg" alt=""></p><h5 id="为什么可以这么做？"><a href="#为什么可以这么做？" class="headerlink" title="为什么可以这么做？"></a>为什么可以这么做？</h5><p>即aabaabf中f匹配错误时，从aab开始匹配<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201639426.jpg" alt=""></p><h5 id="如何构造next数组"><a href="#如何构造next数组" class="headerlink" title="如何构造next数组"></a>如何构造next数组</h5><p>next[i]存的就是s2[0]~s2[i]这个字符串头尾对称元素的长度<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201639427.jpg" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>,right=i;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[left]==s[right])count++;</span><br><span class="line">        left++,right--;</span><br><span class="line">    &#125;</span><br><span class="line">    s[i]=count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这样有点复杂，我们可以从next数组定义出发<br>next[i-1]时0-i-1中头尾对称元素的长度，而next[i]只是在末尾上加一个字符s[i];<br>还有就是为什么构建了next数组，数组的值不仅是头尾对称元素的长度，还是当我们不匹配时，不从头开始匹配，而是从s2中下标next[i]的元素开始匹配</p><p>我们把新添加的字符s[i+1]想成aabaaf中的f,<br>如果aabaaf的f匹配失败，从aab开始匹配，b匹配失败，继续前移<br>写出代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=s[j])&#123;</span><br><span class="line">    j=next[j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其中j是头尾对称元素的长度，匹配失败。不从头开始匹配，从该元素开始匹配<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(s[i]==s[j])&#123;</span><br><span class="line">    j++;</span><br><span class="line">&#125;</span><br><span class="line">next[i]=j;</span><br></pre></td></tr></table></figure><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=s[j])&#123;</span><br><span class="line">        j=next[j<span class="number">-1</span>];</span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="keyword">if</span>(s[i]==s[j])&#123;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    next[i]=j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201639428.jpg" alt=""><br>其实可以把0-j看做模版字符串，0-i看做原字符串<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[j]!=s[i])&#123;</span><br><span class="line">        j=next[j<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s[j]==s[i])&#123;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    next[i]=j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="从前缀表的角度进行"><a href="#从前缀表的角度进行" class="headerlink" title="从前缀表的角度进行"></a>从前缀表的角度进行</h4><h5 id="前缀表的作用？"><a href="#前缀表的作用？" class="headerlink" title="前缀表的作用？"></a>前缀表的作用？</h5><p>前缀表是用来回退的，它记录了模式串与主串(文本串)不匹配的时候，模式串应该从哪里开始重新匹配<br>前缀表中记录着：记录下标i之前(包括i)的字符串中，有多大长度的相同前缀后缀</p><h5 id="前缀和后缀"><a href="#前缀和后缀" class="headerlink" title="前缀和后缀"></a>前缀和后缀</h5><p>前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串。<br>后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串。<br>以aabaaf为例子：<br>前缀:a,aa,aab,aaba,aabaa.<br>后缀:f,af,aaf,baaf,abaaf<br>前缀表要求的就是相同前后缀的长度<br>next{0,1,0,1,2,0}<br>next[4]=2<br>aabaa的前缀a,aa,aab,aaba<br>aabaa的后缀a,aa,baa,abaa<br>相同前后缀的长度。</p><h5 id="为什么一定要用前缀表"><a href="#为什么一定要用前缀表" class="headerlink" title="为什么一定要用前缀表"></a>为什么一定要用前缀表</h5><p>因为前缀表可以告诉我们匹配失败之后跳到哪里重新匹配<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201639429.png" alt=""><br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201639430.png" alt=""><br>下标5之前这部分字符串(aabaa)的最长相等的前缀和后缀字符串是aa.<br>因为找到了最长相等的前缀和后缀，匹配失败的位置是后缀子串的后面，那么找到与其相同的前缀的后面重新匹配就可以了</p><h5 id="构造next数组也就是前缀表"><a href="#构造next数组也就是前缀表" class="headerlink" title="构造next数组也就是前缀表"></a>构造next数组也就是前缀表</h5><p>定义两个指针i和j，j指向前缀末尾位置，i指向后缀末尾位置(0-i子字符串的最后一个字符,aa的a,aabaa的a)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">(<span class="type">int</span>* next, <span class="type">const</span> string&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] != s[j]) &#123;</span><br><span class="line">            j = next[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == s[j]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        next[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">(<span class="type">int</span>* next,string&amp; s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=s[j])&#123;</span><br><span class="line">                j=next[j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==s[j])&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i]=j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">next</span>(needle.<span class="built_in">size</span>());</span><br><span class="line">        <span class="built_in">getNext</span>(&amp;next[<span class="number">0</span>],needle);</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;haystack.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;haystack[i]!=needle[j])&#123;</span><br><span class="line">                j=next[j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(haystack[i]==needle[j])&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j==needle.<span class="built_in">size</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> i-j+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="459-重复的子字符串"><a href="#459-重复的子字符串" class="headerlink" title="459.重复的子字符串"></a><a href="https://leetcode.cn/problems/repeated-substring-pattern/description/">459.重复的子字符串</a></h2><h3 id="题目重述"><a href="#题目重述" class="headerlink" title="题目重述:"></a>题目重述:</h3><p>给定一个非空的字符串s，检查是否可以通过由它的一个子串重复多次构成</p><h3 id="看到题目的第一想法"><a href="#看到题目的第一想法" class="headerlink" title="看到题目的第一想法:"></a>看到题目的第一想法:</h3><p>for一层循环为s1子字符串的长度i从1,n/2;<br>s1=s.substr(0,1),<br>s1=s.substr(0,2);<br>s1=s.substr(0,3);<br>第二层循环判断s是否由s1组成,j<br>从s.substr(j,i)==s1<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">repeatedSubstringPattern</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n =s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%i)<span class="keyword">continue</span>;</span><br><span class="line">            string s1=s.<span class="built_in">substr</span>(<span class="number">0</span>,i);</span><br><span class="line">            <span class="type">int</span> j=i;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;n&amp;&amp;s.<span class="built_in">substr</span>(j,i)==s1)&#123;</span><br><span class="line">                j+=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j==n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录:"></a>代码随想录:</h3><h4 id="移动匹配"><a href="#移动匹配" class="headerlink" title="移动匹配"></a>移动匹配</h4><p>让两个s拼接在一起，为t，如果里面还出现一个s的话，就说明由重复子串组成，其中t要去头去尾<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201639431.jpg" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">repeatedSubstringPattern</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string t = s+s;</span><br><span class="line">        t.<span class="built_in">erase</span>(t.<span class="built_in">begin</span>());</span><br><span class="line">        t.<span class="built_in">erase</span>(t.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(t.<span class="built_in">find</span>(s)!=string::npos)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="KMP解法"><a href="#KMP解法" class="headerlink" title="KMP解法"></a>KMP解法</h4><p>首先明确一点，s最长相等前后缀不包含的子串就是最小重复单元<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201639432.jpg" alt=""><br>ab就是重复单元<br>为什么ab就是最小重复单元<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201639433.jpg" alt=""><br>如果s.size()能整出最小重复单元则返回true。同时next[n-1]!=0，没有最小重复单元<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getNext</span><span class="params">(<span class="type">int</span>* next,string &amp;s)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=s[j])&#123;</span><br><span class="line">                j=next[j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==s[j])&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[i]=j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">repeatedSubstringPattern</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> next[n];</span><br><span class="line">        <span class="built_in">getNext</span>(next,s);</span><br><span class="line">        <span class="keyword">if</span>(next[n<span class="number">-1</span>]!=<span class="number">0</span>&amp;&amp;n%(n-next[n<span class="number">-1</span>])==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四章_字符串_part01</title>
      <link href="/2024/05/15/%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E5%AD%97%E7%AC%A6%E4%B8%B2_part01/"/>
      <url>/2024/05/15/%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E5%AD%97%E7%AC%A6%E4%B8%B2_part01/</url>
      
        <content type="html"><![CDATA[<h2 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344.反转字符串"></a><a href="https://leetcode.cn/problems/reverse-string/description/">344.反转字符串</a></h2><h3 id="题目重述："><a href="#题目重述：" class="headerlink" title="题目重述："></a>题目重述：</h3><p>不利用额外的空间，原地修改字符串数组，使字符串反转过来</p><h3 id="看到题目的第一想法："><a href="#看到题目的第一想法：" class="headerlink" title="看到题目的第一想法："></a>看到题目的第一想法：</h3><p>遍历字符串数组，两两交换字符的值<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(s[i],s[n-i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="代码随想录："><a href="#代码随想录：" class="headerlink" title="代码随想录："></a>代码随想录：</h3><p>也是两两交换字符的思路，我是通过数组的下标进行交换的。<br>Carl是通过双指针进行交换的<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201637969.jpg" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverseString</span><span class="params">(vector&lt;<span class="type">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n =s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> left=<span class="number">0</span>,right=n<span class="number">-1</span>;left&lt;n/<span class="number">2</span>;left++,right--)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(s[left],s[right]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="541-反转字符串II"><a href="#541-反转字符串II" class="headerlink" title="541.反转字符串II"></a><a href="https://leetcode.cn/problems/reverse-string-ii/description/">541.反转字符串II</a></h2><h3 id="题目重述：-1"><a href="#题目重述：-1" class="headerlink" title="题目重述："></a>题目重述：</h3><p>给你一个字符串s和一个整数k，<br>每2k个字符，反转这个2k个字符中的前k个字符<br>如果剩余字符少于k个，则将剩余字符全部反转<br>如果剩余字符少于2k但大于或等于k个，则反转前k个字符。</p><h3 id="看到题目的第一想法：-1"><a href="#看到题目的第一想法：-1" class="headerlink" title="看到题目的第一想法："></a>看到题目的第一想法：</h3><p> 当s.size()&lt;=k时，和反转整个字符串<br>之后就是每2*k个进行分析<br>翻转前k个字符串即[0,k-1],[0+2k,k-1+2k],[0+4k,k-1+4k]<br>当恰好2k个字符串时left+2k==s.size()，break<br>如果剩余的字符串小于k时，right&gt;=s.size()，交换剩余的left,size()-1;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseStr</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>()&lt;=k)&#123;</span><br><span class="line">            <span class="type">int</span> left=<span class="number">0</span>,right=s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="built_in">swap</span>(s[left],s[right]);</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> left=<span class="number">0</span>,right=k<span class="number">-1</span>;left&lt;=s.<span class="built_in">size</span>()<span class="number">-1</span>&amp;&amp;right&lt;=s.<span class="built_in">size</span>()<span class="number">-1</span>;)&#123;</span><br><span class="line">            <span class="type">int</span> a=left,b=right;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="built_in">swap</span>(s[left],s[right]);</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            left=a+<span class="number">2</span>*k;</span><br><span class="line">            right=b+<span class="number">2</span>*k;</span><br><span class="line">            <span class="keyword">if</span>(left==s.<span class="built_in">size</span>())<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(right&gt;=s.<span class="built_in">size</span>())&#123;</span><br><span class="line">                <span class="type">int</span> i=left,j=s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">                    <span class="built_in">swap</span>(s[i],s[j]);</span><br><span class="line">                    i++;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="代码随想录：-1"><a href="#代码随想录：-1" class="headerlink" title="代码随想录："></a>代码随想录：</h3><p>可以直接使用reverse库函数，或者使用swap手写reverse函数<br>另外重要的一点是，完全没必要使用right，我们可以发现right=left+k-1，完全可以成为一个变量指针移动为i<br>下面的代码完全可以删除，下面的代码是防止right=k-1不存在<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(s.<span class="built_in">size</span>()&lt;=k)&#123;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>,right=s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="built_in">swap</span>(s[left],s[right]);</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(string&amp;s,<span class="type">int</span> start,<span class="type">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(start&lt;end)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(s[start],s[end]);</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">reverseStr</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n= s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i+=(<span class="number">2</span>*k))&#123;</span><br><span class="line">            <span class="keyword">if</span>(i+k<span class="number">-1</span>&lt;n)&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s,i,i+k<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s,i,n<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="卡码网：54-替换数字"><a href="#卡码网：54-替换数字" class="headerlink" title="卡码网：54.替换数字"></a>卡码网：54.替换数字</h2><h3 id="题目重述：-2"><a href="#题目重述：-2" class="headerlink" title="题目重述："></a>题目重述：</h3><p>给定字符串s，包含小写字母和数字字符，替换s中的所有数字为number，</p><h3 id="看到题目的第一想法：-2"><a href="#看到题目的第一想法：-2" class="headerlink" title="看到题目的第一想法："></a>看到题目的第一想法：</h3><p>考虑使用额外空间<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    string s1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]&lt;=<span class="string">&#x27;z&#x27;</span>&amp;&amp;s[i]&gt;=<span class="string">&#x27;a&#x27;</span>)&#123;</span><br><span class="line">            s1+=s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            s1+=<span class="string">&quot;number&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;s1;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>不使用额外空间，<br>我的想法，先统计数字出现的个数，计算需要拓充的空间<br>每遇到一个数字，将数字之后的内容全部向后移动5个单位，然后插入number。时间复杂度(n^2)</p><h3 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录:"></a>代码随想录:</h3><p>采用从后向前填充，并设置i，j指针，j指针指向拓充后的数组的末尾。i指针指向原数组的末尾。<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201637970.jpg" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s[i]&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s.<span class="built_in">resize</span>(s.<span class="built_in">size</span>()+count*<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>,j=s.<span class="built_in">size</span>()<span class="number">-1</span>;i&lt;j;i--,j--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]&lt;=<span class="string">&#x27;9&#x27;</span>&amp;&amp;s[i]&gt;=<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            s[j]=<span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">            s[j<span class="number">-1</span>]=<span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">            s[j<span class="number">-2</span>]=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">            s[j<span class="number">-3</span>]=<span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">            s[j<span class="number">-4</span>]=<span class="string">&#x27;u&#x27;</span>;</span><br><span class="line">            s[j<span class="number">-5</span>]=<span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">            j=j<span class="number">-5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            s[j]=s[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;s;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="151-翻转字符串里的单词"><a href="#151-翻转字符串里的单词" class="headerlink" title="151.翻转字符串里的单词"></a><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">151.翻转字符串里的单词</a></h2><h3 id="题目重述：-3"><a href="#题目重述：-3" class="headerlink" title="题目重述："></a>题目重述：</h3><p>反转字符串s中单词顺序。返回单词顺序颠倒且单词之间用单个空格连接的结果字符串<br>s可能存在前导空格，尾随空格或者单词间含有多个空格。</p><h3 id="看到题目的第一想法：-3"><a href="#看到题目的第一想法：-3" class="headerlink" title="看到题目的第一想法："></a>看到题目的第一想法：</h3><p>首先去除多余空格，<br>如果s[0]==’ ‘,s.erase(s.begin());<br>如果s[s.size()-1]=’ ‘.s.erase(s.end());<br>中间含有多个空格<br>遍历s，如果有两个连续的空格，则删除一个<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201637971.jpg" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">removeEntraSpaces</span><span class="params">(string&amp;s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=s.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27; &#x27;</span>&amp;&amp;s[i<span class="number">-1</span>]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>()+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>()&gt;<span class="number">1</span>&amp;&amp;s[<span class="number">0</span>]==<span class="string">&#x27; &#x27;</span>) s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>());</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>()&gt;<span class="number">1</span>&amp;&amp;s[s.<span class="built_in">size</span>()<span class="number">-1</span>]==<span class="string">&#x27; &#x27;</span>)s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>()+s.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(string&amp;s,<span class="type">int</span> start,<span class="type">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start,j=end;i&lt;j;i++,j--)&#123;</span><br><span class="line">            <span class="built_in">swap</span>(s[i],s[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">reverseWords</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">removeEntraSpaces</span>(s);</span><br><span class="line">        <span class="built_in">reverse</span>(s,<span class="number">0</span>,s.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="type">int</span> start=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> end=<span class="number">0</span>;end&lt;=s.<span class="built_in">size</span>();end++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(end==s.<span class="built_in">size</span>()||s[end]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                <span class="built_in">reverse</span>(s,start,end<span class="number">-1</span>);</span><br><span class="line">                start=end+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="代码随想录：-2"><a href="#代码随想录：-2" class="headerlink" title="代码随想录："></a>代码随想录：</h3><p>在removeEntraSpaces中没有使用erase，而是使用了双指针，fastIndex是原字符串s的非空字符位置，slowIndex为修改后的字符串s的非空字符位置<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201637972.jpg" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">removeEntraSpaces</span><span class="params">(string&amp;s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> fastIndex=<span class="number">0</span>,slowIndex=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(s.<span class="built_in">size</span>()&gt;<span class="number">0</span>&amp;&amp;fastIndex&lt;s.<span class="built_in">size</span>()&amp;&amp;s[fastIndex]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">        fastIndex++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(;fastIndex&lt;s.<span class="built_in">size</span>();fastIndex++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(fastIndex<span class="number">-1</span>&gt;=<span class="number">0</span>&amp;&amp;s[fastIndex]==s[fastIndex<span class="number">-1</span>]&amp;&amp;s[fastIndex]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            s[slowIndex++]=s[fastIndex];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(slowIndex&gt;<span class="number">0</span>&amp;&amp;s[slowIndex<span class="number">-1</span>]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">        s.<span class="built_in">resize</span>(slowIndex<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        s.<span class="built_in">resize</span>(slowIndex);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> 简化代码，每遇到一个新单词，手动添加空格<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201637973.jpg" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">removeEntraSpaces</span><span class="params">(string&amp;s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> slowIndex=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> fastIndex=<span class="number">0</span>;fastIndex&lt;s.<span class="built_in">size</span>();fastIndex++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[fastIndex]!=<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(slowIndex!=<span class="number">0</span>)s[slowIndex++]=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            <span class="keyword">while</span>(fastIndex&lt;s.<span class="built_in">size</span>()&amp;&amp;s[fastIndex]!=<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                s[slowIndex++]=s[fastIndex++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s.<span class="built_in">resize</span>(slowIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="卡码网：55-右旋转字符串"><a href="#卡码网：55-右旋转字符串" class="headerlink" title="卡码网：55.右旋转字符串"></a><a href="https://kamacoder.com/problempage.php?pid=1065">卡码网：55.右旋转字符串</a></h2><h3 id="题目重述：-4"><a href="#题目重述：-4" class="headerlink" title="题目重述："></a>题目重述：</h3><p>给定字符串s和正整数k，将字符串尾部的k个字符移到字符串的前面</p><h3 id="看到题目的第一想法：-4"><a href="#看到题目的第一想法：-4" class="headerlink" title="看到题目的第一想法："></a>看到题目的第一想法：</h3><p>首先将整个字符串旋转一次，然后分别0，k-1和k到s,size()旋转一次。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(string&amp;s,<span class="type">int</span> start,<span class="type">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=start,j=end;i&lt;j;i++,j--)&#123;</span><br><span class="line">        <span class="built_in">swap</span>(s[i],s[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;k&gt;&gt;s;</span><br><span class="line">    <span class="built_in">reverse</span>(s,<span class="number">0</span>,s.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">reverse</span>(s,<span class="number">0</span>,k<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">reverse</span>(s,k,s.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    cout&lt;&lt;s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>代码随想录：<br>想法基本一致</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章_哈希表_part02</title>
      <link href="/2024/05/14/%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%93%88%E5%B8%8C%E8%A1%A8_part02/"/>
      <url>/2024/05/14/%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%93%88%E5%B8%8C%E8%A1%A8_part02/</url>
      
        <content type="html"><![CDATA[<h2 id="454-四数相加-II"><a href="#454-四数相加-II" class="headerlink" title="454.四数相加 II"></a><a href="https://leetcode.cn/problems/4sum-ii/description/">454.四数相加 II</a></h2><h3 id="题目重述："><a href="#题目重述：" class="headerlink" title="题目重述："></a>题目重述：</h3><p>四个整数数组nums1,nums2,nums3,nums4，长度都为n，计算有多少个元组(i,j,k,l)满足<br>$nums1[i]+nums2[j]+nums3[k]+nums4[l]==0$</p><h3 id="看到题目的第一想法"><a href="#看到题目的第一想法" class="headerlink" title="看到题目的第一想法"></a>看到题目的第一想法</h3><p>四层循环，时间复杂度n^4。<br>nums1,nums2进行两层循环，将计算结果放入map1，关键码为两数之和，值为两数之和的次数，，然后nums3,nums4进行两层循环，同理，形成map2<br>之后，遍历map1的元素x，对map2进行查找-x，然后sum+=map1[x]*map2[-x],<br>最后输出sum。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fourSumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, vector&lt;<span class="type">int</span>&gt;&amp; nums3, vector&lt;<span class="type">int</span>&gt;&amp; nums4)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;map1;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;map2;</span><br><span class="line">        <span class="type">int</span> n = nums1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="type">int</span> temp = nums1[i]+nums2[j];</span><br><span class="line">                <span class="keyword">if</span>(map1.<span class="built_in">find</span>(temp)!=map1.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    map1[temp]++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    map1[temp]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="type">int</span> temp = nums3[i]+nums4[j];</span><br><span class="line">                <span class="keyword">if</span>(map2.<span class="built_in">find</span>(temp)!=map2.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    map2[temp]++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    map2[temp]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> iter=map1.<span class="built_in">begin</span>();iter!=map1.<span class="built_in">end</span>();iter++)&#123;</span><br><span class="line">            <span class="type">int</span> num = iter-&gt;first;</span><br><span class="line">            <span class="keyword">if</span>(map2.<span class="built_in">find</span>(-num)!=map2.<span class="built_in">end</span>())&#123;</span><br><span class="line">                sum+=map1[num]*map2[-num];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="代码随想录："><a href="#代码随想录：" class="headerlink" title="代码随想录："></a>代码随想录：</h3><p>思路大体一致，但是Carl的只用到了一个unordered_map，且将省去了多个步骤。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fourSumCount</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2, vector&lt;<span class="type">int</span>&gt;&amp; nums3, vector&lt;<span class="type">int</span>&gt;&amp; nums4)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;map1;</span><br><span class="line">        <span class="type">int</span> n = nums1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                map1[nums1[i]+nums2[j]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="type">int</span> temp=nums3[i]+nums4[j];</span><br><span class="line">                <span class="keyword">if</span>(map1.<span class="built_in">find</span>(-temp)!=map1.<span class="built_in">end</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    sum+=map1[-temp];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383.赎金信"></a><a href="https://leetcode.cn/problems/ransom-note/description/">383.赎金信</a></h2><h3 id="题目重述：-1"><a href="#题目重述：-1" class="headerlink" title="题目重述："></a>题目重述：</h3><p>判断字符串ransomNote能由magazine组成，magazine中的字符每个只能使用一次</p><h3 id="看到题目的第一想法："><a href="#看到题目的第一想法：" class="headerlink" title="看到题目的第一想法："></a>看到题目的第一想法：</h3><p>将magazine中转化为unordered_map,关键码是字符，值为出现的次数<br>遍历字符串ransomNote，对于magazine中find，如果没找到或者magazine等于0，return false<br>想了想，直接用数组就行了。因为字符刚好可以通过ASCII码转化为int<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canConstruct</span><span class="params">(string ransomNote, string magazine)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> a[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;magazine.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            a[magazine[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ransomNote.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[ransomNote[i]-<span class="string">&#x27;a&#x27;</span>]==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> a[ransomNote[i]-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>代码随想录：<br>想法基本一致</p><h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15.三数之和"></a><a href="https://leetcode.cn/problems/3sum/description/">15.三数之和</a></h2><h3 id="题目重述：-2"><a href="#题目重述：-2" class="headerlink" title="题目重述："></a>题目重述：</h3><p>给你一个整数数组nums<br>求满足<br>$nums[i]+nums[j]+nums[k]=0,其中i,j,k不相同$<br>返回不含重复的三元组<br>$[nums[i],nums[j],nums[k]]$</p><h3 id="看到题目的第一想法-1"><a href="#看到题目的第一想法-1" class="headerlink" title="看到题目的第一想法:"></a>看到题目的第一想法:</h3><p>三个for循环.时间复杂度n^3，因为是不含重复的三元组，考虑使用unordered_set<br>在实践中，set如何设置，我不太明白,unordered<vector<int>&gt;res,报错了<br>错误代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        unordered_set&lt;vector&lt;<span class="type">int</span>&gt;&gt;res;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt;<span class="built_in">set1</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=j+<span class="number">1</span>;k&lt;n;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]==<span class="number">0</span>)&#123;</span><br><span class="line">                        res.<span class="built_in">insert</span>(&#123;i,j,k&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>上面的思路找到满足三数之和为0的三个数，然后通过unordered_set<vector<int>&gt;res，<br>res.insert({i,j,k});进行去重，但是unordered_set<vector<int>&gt;res结构是有问题的。<br>不通过unordered_set进行重合</p><p>看到GPT算法后：<br>首先将nums进行排序，这样每次遍历，如果三个数的nums[i]&gt;0，完全没必要进行下去了<br>此外还有一个好处就是，如果nums[i]=nums[i-1]了，即重复数排在一起了，可以快速进行跳过重复元素</p><h3 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录"></a>代码随想录</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;res;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i<span class="number">-1</span>])<span class="keyword">continue</span>;</span><br><span class="line">            unordered_set&lt;<span class="type">int</span>&gt;set;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">2</span>&amp;&amp;nums[j]==nums[j<span class="number">-1</span>]&amp;&amp;nums[j<span class="number">-1</span>]==nums[j<span class="number">-2</span>])<span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> c = <span class="number">0</span> - (nums[i]+nums[j]);</span><br><span class="line">                <span class="keyword">if</span>(set.<span class="built_in">find</span>(c)!=set.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(&#123;nums[i],c,nums[j]&#125;);</span><br><span class="line">                    set.<span class="built_in">erase</span>(c);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    set.<span class="built_in">insert</span>(nums[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在不考虑重复的的基础代码应该如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;res;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            unordered_set&lt;<span class="type">int</span>&gt;set;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="type">int</span> c = <span class="number">0</span> - (nums[i]+nums[j]);</span><br><span class="line">                <span class="keyword">if</span>(set.<span class="built_in">find</span>(c)!=set.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(&#123;nums[i],c,nums[j]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    set.<span class="built_in">insert</span>(nums[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201635943.jpg" alt=""><br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201635944.jpg" alt=""></p><p>gpt的代码：<br>Carl 是添加两段代码来处理，Y,Z处重复<br>GPT 在处理Y,Z处重复时，添加如下代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(set.<span class="built_in">find</span>(c)!=set.<span class="built_in">end</span>())&#123;</span><br><span class="line">    res.<span class="built_in">push_back</span>(&#123;nums[i],c,nums[j]&#125;);</span><br><span class="line">    <span class="keyword">while</span>(j+<span class="number">1</span>&lt;n&amp;&amp;nums[j]==nums[j+<span class="number">1</span>])&#123;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;res;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i<span class="number">-1</span>])<span class="keyword">continue</span>;</span><br><span class="line">            unordered_set&lt;<span class="type">int</span>&gt;set;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="type">int</span> c = <span class="number">0</span> - (nums[i]+nums[j]);</span><br><span class="line">                <span class="keyword">if</span>(set.<span class="built_in">find</span>(c)!=set.<span class="built_in">end</span>())&#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(&#123;nums[i],c,nums[j]&#125;);</span><br><span class="line">                        <span class="keyword">while</span>(j+<span class="number">1</span>&lt;n&amp;&amp;nums[j]==nums[j+<span class="number">1</span>])&#123;</span><br><span class="line">                            ++j;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    set.<span class="built_in">insert</span>(nums[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>双指针法<br>一层for循环遍历nums，设置left指针为i+1，right = nums.size()-1;<br>当nums[i]时，left与right同时向中间收缩<br>收缩的原则是：<br>如果nums[i]+nums[left]+nums[right]<0,left指针右移如果nums[i]+nums[left]+nums[right]>0,right指针左移<br>如果nums[i]+nums[left]+nums[right]=0,res.push_back</p><p>找到一组之后，还要进行收缩，直到left==right，找到其他等于满足条件的三元组<br>left++,right—</p><p>接下来考虑去重的步骤<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left]==nums[left+<span class="number">1</span>]) left++;</span><br><span class="line"><span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right]==nums[right--] right--;</span><br></pre></td></tr></table></figure><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;res;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i<span class="number">-1</span>])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> left=i+<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right=n<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[left]+nums[right]&lt;<span class="number">0</span>)left++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+nums[left]+nums[right]&gt;<span class="number">0</span>)right--;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    res.<span class="built_in">push_back</span>(&#123;nums[i],nums[left],nums[right]&#125;);</span><br><span class="line">                    <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left]==nums[left+<span class="number">1</span>])left++;</span><br><span class="line">                    <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right]==nums[right<span class="number">-1</span>])right--;</span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18.四数之和"></a><a href="https://leetcode.cn/problems/4sum/description/">18.四数之和</a></h2><h3 id="题目重述：-3"><a href="#题目重述：-3" class="headerlink" title="题目重述："></a>题目重述：</h3><p>和三数之和一样，给你一个nums和target，返回不重复的四元组，其中i,j,k,l不相等。同时<br>nums[i]+nums[j]+nums[k]+nums[l]==0</p><h3 id="看到题目的第一想法：-1"><a href="#看到题目的第一想法：-1" class="headerlink" title="看到题目的第一想法："></a>看到题目的第一想法：</h3><p>做过三数之和和，优先考虑使用双指针法。<br>left指针和right指针分别代码了第三个和第四个数<br>使两层for循环来表示前两个数<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201635945.jpg" alt=""><br>考虑去重的方法，想法和三数之和相同。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;res;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-3</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; target &amp;&amp; nums[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n<span class="number">-2</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">1</span>&amp;&amp;nums[j]==nums[j<span class="number">-1</span>])<span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> left=j+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> right=n<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[i]+nums[j]+nums[left]+nums[right]&lt;target)left++;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (nums[i]+nums[j]+nums[left]+nums[right]&gt;target)right--;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(&#123;nums[i],nums[j],nums[left],nums[right]&#125;);</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left]==nums[left+<span class="number">1</span>])left++;</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right]==nums[right<span class="number">-1</span>])right--;</span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>上面的代码通过了283/294测试用例</p><h3 id="代码随想录-1"><a href="#代码随想录-1" class="headerlink" title="代码随想录"></a>代码随想录</h3><p>想法基本一致<br>使用了对于第二层for也做了减枝<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (nums[j] + nums[i] &gt; target &amp;&amp; nums[j] + nums[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>而且对于int越界问题，改用了long<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((<span class="type">long</span>)nums[i]+nums[j]+nums[left]+nums[right]&lt;target)left++;</span><br></pre></td></tr></table></figure><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;res;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-3</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; target &amp;&amp; nums[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n<span class="number">-2</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>((nums[i]+nums[j])&gt;target&amp;&amp;(nums[i]+nums[j])&gt;=<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">1</span>&amp;&amp;nums[j]==nums[j<span class="number">-1</span>])<span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> left=j+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> right=n<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                    <span class="keyword">if</span>((<span class="type">long</span>)nums[i]+nums[j]+nums[left]+nums[right]&lt;target)left++;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="type">long</span>)nums[i]+nums[j]+nums[left]+nums[right]&gt;target)right--;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(&#123;nums[i],nums[j],nums[left],nums[right]&#125;);</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left]==nums[left+<span class="number">1</span>])left++;</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right]==nums[right<span class="number">-1</span>])right--;</span><br><span class="line">                        left++;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章_哈希表_part01</title>
      <link href="/2024/05/13/%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%93%88%E5%B8%8C%E8%A1%A8_part01/"/>
      <url>/2024/05/13/%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%93%88%E5%B8%8C%E8%A1%A8_part01/</url>
      
        <content type="html"><![CDATA[<h2 id="1-哈希表的理论基础"><a href="#1-哈希表的理论基础" class="headerlink" title="1 哈希表的理论基础"></a>1 哈希表的理论基础</h2><p>哈希表（Hash Table）：根据关键码的值而直接进行访问的数据结构<br>例如：数组是一张哈希表，通过数组的索引(关键码)来访问数组中的元素</p><p>哈希表用来解决的问题？<br>用来快速判断一个元素是否出现在集合中，核心是牺牲了空间换取了时间</p><p>哈希函数：<br>将元素值与哈希表中的关键码进行映射<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201633699.png" alt=""></p><p>哈希碰撞<br>产生原因：不同的元素通过哈希函数，映射到同一关键码<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201633724.png" alt=""><br>解决方法：拉链法和线性探测法<br>拉链法：<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201633759.png" alt=""><br>线性探测法：<br>使用线性探测法，一定要保证tableSize大于dataSize。<br>例如：冲突的位置放了小李，那么就向下找一个空位放置小王的信息。<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201633795.png" alt=""></p><p>常见的三种哈希结构<br>1 数组<br>2 set(集合)<br>3 map(映射)<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201633826.png" alt=""><br>使用来解决哈希问题时。<br>无特殊情况，优先使用unordered_set，查询和增删效率是最优的<br>要求集合是有序的，使用set<br>不仅要求有序还要有重复数据，使用multiset<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201633859.png" alt=""></p><h2 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242.有效的字母异位词"></a><a href="https://leetcode.cn/problems/valid-anagram/description/">242.有效的字母异位词</a></h2><h3 id="题目重述："><a href="#题目重述：" class="headerlink" title="题目重述："></a>题目重述：</h3><p>判断两个字符串中(s与t)，每个字母出现的次数是否相同</p><h3 id="看到题目的第一想法"><a href="#看到题目的第一想法" class="headerlink" title="看到题目的第一想法"></a>看到题目的第一想法</h3><p>创建unordered_map容器mapS,mapT，遍历字符串s与t，如果这个字母在容器中出现过，就将map的value加1，如果没有，将该字母插入到容器中<br>最后判断两个容器是否完全相同<br>代码如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;mapS;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;mapT;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>()!=t.<span class="built_in">size</span>())<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mapS.<span class="built_in">find</span>(s[i])!=mapS.<span class="built_in">end</span>())&#123;</span><br><span class="line">                mapS[s[i]]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                mapS.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(s[i],<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mapT.<span class="built_in">find</span>(t[i])!=mapT.<span class="built_in">end</span>())&#123;</span><br><span class="line">                mapT[t[i]]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                mapT.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(t[i],<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mapS==mapT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录"></a>代码随想录</h3><p>也是用哈希表。但仅使用了数组，且只使用了一个数组，在选取关键码时，我是直接将字符char作为关键码，而carl是将字母根据ASCII，将int作为关键码。刚好可以使用数组这种简单的哈希表<br>同时先遍历s，每个关键码的元素值++，再遍历t，每个关键码的元素值—，最后判断是否有非零元素，还是很巧妙的。<br>代码如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAnagram</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> record[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>()!=t.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            record[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            record[t[i]-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(record[i]!=<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349.两个数组的交集"></a><a href="https://leetcode.cn/problems/intersection-of-two-arrays/description/">349.两个数组的交集</a></h2><h3 id="题目重述：-1"><a href="#题目重述：-1" class="headerlink" title="题目重述："></a>题目重述：</h3><p>返回两个数组的交集，输出结果vector<int>num中每个元素一定是唯一的，不考虑输出结果的顺序。</p><h3 id="看到题目的第一想法："><a href="#看到题目的第一想法：" class="headerlink" title="看到题目的第一想法："></a>看到题目的第一想法：</h3><p>分别遍历nums1和nums2，将两者的元素放入到set_nums1和set_nums2中，然后比较对于set_nums1元素，在set_nums查找，如果找到了到push_back到num中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt;set_nums1;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt;set_nums2;</span><br><span class="line">        set_nums1.<span class="built_in">insert</span>(nums1.<span class="built_in">begin</span>(),nums1.<span class="built_in">end</span>());</span><br><span class="line">        set_nums2.<span class="built_in">insert</span>(nums2.<span class="built_in">begin</span>(),nums2.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;nums;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> iter=set_nums1.<span class="built_in">begin</span>();iter!=set_nums2.<span class="built_in">end</span>();iter++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set_nums2.<span class="built_in">find</span>(*iter)!=set_nums2.<span class="built_in">end</span>())&#123;</span><br><span class="line">                nums.<span class="built_in">push_back</span>(*iter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="代码随想录-1"><a href="#代码随想录-1" class="headerlink" title="代码随想录"></a>代码随想录</h3><p>只将一个vect<int>转化了unordered_set<int>set_nums1，另外创建一个unordered_set<int>res用来存放结果，遍历nums2,如果nums2的元素在set_nums1找到了，存放到res中，最后将unordered_set转化为vector<int>输出。<br>能使用数组就是用数组，unordered_set不仅占用空间比数组大，速度也比数组慢<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt;res;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt;<span class="built_in">set_nums1</span>(nums1.<span class="built_in">begin</span>(),nums1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(set_nums1.<span class="built_in">find</span>(num)!=set_nums1.<span class="built_in">end</span>())&#123;</span><br><span class="line">                res.<span class="built_in">insert</span>(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">intersection</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt;res;</span><br><span class="line">        <span class="type">int</span> hash[<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums2)</span><br><span class="line">        &#123;</span><br><span class="line">            hash[num]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num:nums1)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hash[num]==<span class="number">1</span>)res.<span class="built_in">insert</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202.快乐数"></a><a href="https://leetcode.cn/problems/happy-number/description/">202.快乐数</a></h2><h3 id="题目重述：-2"><a href="#题目重述：-2" class="headerlink" title="题目重述："></a>题目重述：</h3><p>给你一个数，每次将该数替换成每个位置数字的平方和，如果最终这个数字为1，返回true，如果不能变不到1，返回false；</p><h3 id="看到题目第一想法："><a href="#看到题目第一想法：" class="headerlink" title="看到题目第一想法："></a>看到题目第一想法：</h3><p>首先对于任意一个整数，进行各位数的分割，然后计算出新的数<br>然后进行while（n!=1)，一直进行操作，但是有个问题，如果最终数字不是1，就会进行死循环，不知道咋办</p><p>现在我的想法，将每个数字都放入集合，如果新的值在集合中已经有了，那么就会死循环了，也就是可以返回false。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newVal</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n)&#123;</span><br><span class="line">            res+=(n%<span class="number">10</span>)*(n%<span class="number">10</span>);</span><br><span class="line">            n = n/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt;set_n;</span><br><span class="line">        set_n.<span class="built_in">insert</span>(n);</span><br><span class="line">        <span class="keyword">while</span>(n!=<span class="number">1</span>)&#123;</span><br><span class="line">            n = <span class="built_in">newVal</span>(n);</span><br><span class="line">            <span class="keyword">if</span>(set_n.<span class="built_in">find</span>(n)!=set_n.<span class="built_in">end</span>())<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            set_n.<span class="built_in">insert</span>(n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>代码随想录：<br>想法基本一致</p><p><a href="https://leetcode.cn/problems/two-sum/description/">1.两数之和</a></p><h3 id="题目复述"><a href="#题目复述" class="headerlink" title="题目复述:"></a>题目复述:</h3><p>给你一个数组nums和一个整数target，返回在数组中和为target的两个整数的下标。</p><h3 id="看到题目的第一想法-1"><a href="#看到题目的第一想法-1" class="headerlink" title="看到题目的第一想法:"></a>看到题目的第一想法:</h3><p>将nums转化为以数组元素的值为unordered_map中的关键码。元素的下标作为unordered_map的值，<br>然后对于nums的每一个数遍历，在umap中find(target-nums[i])，如果结果!umap.end(),返回<br>i和umap[nums[i]]<br>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;umap;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            umap[nums[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="type">int</span> count=target-nums[i];</span><br><span class="line">            <span class="keyword">if</span>(umap.<span class="built_in">find</span>(count)!=umap.<span class="built_in">end</span>()&amp;&amp;umap[count]!=i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;i,umap[count]&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="代码随想录："><a href="#代码随想录：" class="headerlink" title="代码随想录："></a>代码随想录：</h3><p>我的方法是分成两个for循环进行操作，carl是将两者结合<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;umap;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="type">int</span> count=target-nums[i];</span><br><span class="line">            <span class="keyword">if</span>(umap.<span class="built_in">find</span>(count)!=umap.<span class="built_in">end</span>()&amp;&amp;umap[count]!=i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;i,umap[count]&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                umap[nums[i]]=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章_链表_part02</title>
      <link href="/2024/05/10/%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E9%93%BE%E8%A1%A8_part02/"/>
      <url>/2024/05/10/%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E9%93%BE%E8%A1%A8_part02/</url>
      
        <content type="html"><![CDATA[<h2 id="24-两两交换链表中的节点链接"><a href="#24-两两交换链表中的节点链接" class="headerlink" title="24.两两交换链表中的节点链接"></a><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/description/">24.两两交换链表中的节点</a><a href="">链接</a></h2><h3 id="题目复述："><a href="#题目复述：" class="headerlink" title="题目复述："></a>题目复述：</h3><p>对于一个链表中元素，从链表的头到链表的尾两个一组，交换他们的位置，不是值<br>例如 A-&gt;B 变为B-&gt;A</p><h3 id="看到题目的第一想法"><a href="#看到题目的第一想法" class="headerlink" title="看到题目的第一想法"></a>看到题目的第一想法</h3><p>遍历原链表，如果元素的次序为奇数，添加到奇链表的尾部。如果元素的次序为偶数，添加到偶链表的尾部。<br>这样，题目中的原链表就相当于先从奇链表取一个，偶链表取一个，重复步骤。<br>而题目中要求的新链表就是先从偶链表取一个，再从奇链表取一个，重复步骤<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201630415.jpg" alt=""><br>代码如下，花了我快一个半小时，主要是忘记不同的链表起始是共用一个元素节点了，且共用一个next了，还是就是不能对nullptr的进行操作，这种边界问题<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">nullptr</span>||head-&gt;next==<span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">    ListNode*headA=head;</span><br><span class="line">    ListNode*headB=head-&gt;next;</span><br><span class="line">    ListNode* tempA = headA,*tempB = headB,*temp;</span><br><span class="line">    ListNode*res,*temp_res; </span><br><span class="line">    <span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(head-&gt;next!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(count%<span class="number">2</span>==<span class="number">1</span>) &#123;</span><br><span class="line">            head=head-&gt;next;</span><br><span class="line">            tempA-&gt;next=head-&gt;next;</span><br><span class="line">            tempA=tempA-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            tempB-&gt;next=head-&gt;next;</span><br><span class="line">            tempB=tempB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tempA!=<span class="literal">nullptr</span>)tempA=<span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span>(tempB!=<span class="literal">nullptr</span>)tempB=<span class="literal">nullptr</span>;</span><br><span class="line">    res = headB;</span><br><span class="line"></span><br><span class="line">    temp_res =res;</span><br><span class="line">    count=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(headA!=<span class="literal">nullptr</span>&amp;&amp;headB!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(count%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(headB-&gt;next!=<span class="literal">nullptr</span>) headB= headB-&gt;next;</span><br><span class="line">            <span class="keyword">else</span> headB =<span class="literal">nullptr</span>;</span><br><span class="line">            temp_res-&gt;next = headA;</span><br><span class="line">            temp_res=temp_res-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(headA-&gt;next!=<span class="literal">nullptr</span>) headA= headA-&gt;next;</span><br><span class="line">            <span class="keyword">else</span> headA =<span class="literal">nullptr</span>;</span><br><span class="line">            temp_res-&gt;next = headB;</span><br><span class="line">            temp_res=temp_res-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201630438.jpg" alt=""><br>遗留问题：加不加下面的代码，用时有很大不同，有空继续探究，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(tempA!=nullptr)tempA=nullptr;</span><br><span class="line"><span class="keyword">if</span>(tempB!=nullptr)tempB=nullptr;</span><br></pre></td></tr></table></figure><br>因为我在分割奇偶链表的时候，有一个尾部节点没有设置为nullptr,修改代码如下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(head-&gt;next-&gt;next!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(count%<span class="number">2</span>==<span class="number">1</span>) &#123;</span><br><span class="line">        head=head-&gt;next;</span><br><span class="line">        tempA-&gt;next=head-&gt;next;</span><br><span class="line">        tempA=tempA-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        tempB-&gt;next=head-&gt;next;</span><br><span class="line">        tempB=tempB-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line">tempA-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">tempB-&gt;next=<span class="literal">nullptr</span></span><br></pre></td></tr></table></figure></p><h3 id="代码随想录的思路"><a href="#代码随想录的思路" class="headerlink" title="代码随想录的思路"></a>代码随想录的思路</h3><p>直接模拟：<br>思路如下：<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201630473.jpg" alt=""><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">nullptr</span>||head-&gt;next==<span class="literal">nullptr</span>) <span class="keyword">return</span> head;</span><br><span class="line">    ListNode *vhead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    vhead -&gt;next = head;</span><br><span class="line">    ListNode* cur = vhead;</span><br><span class="line">    ListNode*t1,*t2;</span><br><span class="line">    <span class="keyword">while</span>(cur-&gt;next!=<span class="literal">nullptr</span>&amp;&amp;cur-&gt;next-&gt;next!=<span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t1 = cur-&gt;next;</span><br><span class="line">            t2 = cur-&gt;next-&gt;next-&gt;next;</span><br><span class="line"></span><br><span class="line">            cur -&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">            cur-&gt;next-&gt;next = t1;</span><br><span class="line">            t1 -&gt;next = t2;</span><br><span class="line"></span><br><span class="line">            cur=cur-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> vhead-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19.删除链表的倒数第N个节点"></a><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/">19.删除链表的倒数第N个节点</a></h2><h3 id="题目复述：-1"><a href="#题目复述：-1" class="headerlink" title="题目复述："></a>题目复述：</h3><p>给你一个链表和n，返回删除倒数第n个节点后的连链表</p><h3 id="看到题目的第一想法："><a href="#看到题目的第一想法：" class="headerlink" title="看到题目的第一想法："></a>看到题目的第一想法：</h3><p>先遍历链表，求出链表的元素总个数，然后求出删除结点前的节点个数，<br>第二次遍历链表，定位到删除节点的前一个位置，删除节点，在不是使用虚拟头节点的时候，删除头节点，p不能等于head，使用vhead时，代码如下ac<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode *vhead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    vhead-&gt;next=head;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">nullptr</span>||head-&gt;next==<span class="literal">nullptr</span>)<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    ListNode*p=head;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> num = count-n;</span><br><span class="line">    p = vhead;</span><br><span class="line">    <span class="keyword">while</span>(num--)&#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next=p-&gt;next-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> vhead-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>carl说可以用双指针，我没看详细分析步骤，我自己想的双指针的算法，front，rear初始等于head节点，先让front指针先走n步，然后front，rear指针同步向前移动，当front的next的为nullnptr时，rear指针的位置就是要删除的前一个节点位置，<br>考虑到当n等于链表的长度时，代码会有问题，所以使用带虚拟节点的链表。<br>思路如下：<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201630504.jpg" alt=""><br>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode *vhead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    vhead-&gt;next=head;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">nullptr</span>||head-&gt;next==<span class="literal">nullptr</span>)<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    ListNode *front=vhead,*rear=vhead;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        front=front-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(front-&gt;next!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">        front=front-&gt;next;</span><br><span class="line">        rear= rear-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    rear-&gt;next= rear-&gt;next-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> vhead-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>和代码随想录，思路大致相同</p><h2 id="面试题-链表相交"><a href="#面试题-链表相交" class="headerlink" title="面试题.链表相交"></a><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/">面试题.链表相交</a></h2><h3 id="题目复述：-2"><a href="#题目复述：-2" class="headerlink" title="题目复述："></a>题目复述：</h3><p>给你两个链表，找到他们指向同一个节点位置，返回这个节点，如果没有，返回NULL</p><h3 id="看到题目的第一想法：-1"><a href="#看到题目的第一想法：-1" class="headerlink" title="看到题目的第一想法："></a>看到题目的第一想法：</h3><p>遍历两个链表，求出他们的列表元素的个数，然后长链表指针先走两者差值，之后，长短链表同步移动，当他们节点地址是相同的，则返回该节点<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode *<span class="title">getIntersectionNode</span><span class="params">(ListNode *headA, ListNode *headB)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(headA==<span class="literal">NULL</span>||headB==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> lenA=<span class="number">0</span>,lenB=<span class="number">0</span>;</span><br><span class="line">    ListNode *pA = headA,*pB= headB;</span><br><span class="line">    <span class="keyword">while</span>(pA!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        lenA++;</span><br><span class="line">        pA=pA-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pB!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        lenB++;</span><br><span class="line">        pB=pB-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    pA = headA,pB = headB;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">abs</span>(lenA-lenB);</span><br><span class="line">    <span class="keyword">if</span>(lenA&gt;lenB)&#123;</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            pA = pA-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">            pB = pB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pA!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pA==pB) <span class="keyword">return</span> pA;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            pA= pA-&gt;next;</span><br><span class="line">  -          pB = pB-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>和代码随想录，思路大致相同</p><h2 id="142-环形链表II"><a href="#142-环形链表II" class="headerlink" title="142.环形链表II"></a><a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">142.环形链表II</a></h2><h3 id="题目复述：-3"><a href="#题目复述：-3" class="headerlink" title="题目复述："></a>题目复述：</h3><p>给你一个链表，返回链表开始开始入环到的第一个节点。如果链表无环，则返回null</p><h3 id="看到题目的第一想法：-2"><a href="#看到题目的第一想法：-2" class="headerlink" title="看到题目的第一想法："></a>看到题目的第一想法：</h3><p>遍历链表，将链表节点存到unordered_set中，每次遍历，查找unordered_set是否含有相同节点，如果有返回该节点，如果没有将节点添加到集合set中.<br>自己的想法ac了，真的很开心！<br>代码如下:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;ListNode*&gt;mySet;</span><br><span class="line">        ListNode*p = head;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mySet.<span class="built_in">find</span>(p)!=mySet.<span class="built_in">end</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">            mySet.<span class="built_in">insert</span>(p);</span><br><span class="line">            p= p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录:"></a>代码随想录:</h3><h4 id="判断是否有环："><a href="#判断是否有环：" class="headerlink" title="判断是否有环："></a>判断是否有环：</h4><p>使用快慢指针法，fast指针从头节点出发，每次移动两个节点，<br>slow指针从头节点出发，每次移动一个节点，如果fast和slow指针相遇，则链表中有环。</p><h4 id="如果有环且能相遇，则一定能相遇在环中？"><a href="#如果有环且能相遇，则一定能相遇在环中？" class="headerlink" title="如果有环且能相遇，则一定能相遇在环中？"></a>如果有环且能相遇，则一定能相遇在环中？</h4><p>fast先进环，一直在环里走动，等待slow进环，然后相遇。</p><h4 id="为什么fast指针，slow指针能相遇？"><a href="#为什么fast指针，slow指针能相遇？" class="headerlink" title="为什么fast指针，slow指针能相遇？"></a>为什么fast指针，slow指针能相遇？</h4><p>注意当slow指针和fast指针都在环里时，fast相对slow指针的相对速度为1节点/s，而环的总长为整数，则必定能相遇</p><h4 id="为什么当slow指针，fast指针相遇时。slow仅仅只在第一圈相遇？"><a href="#为什么当slow指针，fast指针相遇时。slow仅仅只在第一圈相遇？" class="headerlink" title="为什么当slow指针，fast指针相遇时。slow仅仅只在第一圈相遇？"></a>为什么当slow指针，fast指针相遇时。slow仅仅只在第一圈相遇？</h4><p>设环的长度为l<br>假设某时刻，slow指针在环入口，fast指针可以在环的任意位置。此次fast距离环口w,<br>则slow指针完成第一圈的时间为l秒<br>注意我们求过两者的相对速度为1节点/s，把fast追上slow的时间为w秒,w秒小于l秒。<br>所以在fast指针追上slow指针时，slow仅仅在第一圈。<br><img src="https://hexo-tangwan16-pic.oss-cn-shanghai.aliyuncs.com/202405201630533.png" alt=""><br>$(x + y) * 2 = x + y + n (y + z)$<br>$x = (n - 1) (y + z) + z$<br>即指针slow指针从相遇节点出发，与p指针(步长也为1节点每秒)两者一定会相遇<br>相遇时，p即为环的入口<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        ListNode *slow = head,*fast = head;</span><br><span class="line">        <span class="comment">// fast-&gt;next!=NULL，防止对NULL指针就行操作</span></span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">NULL</span>&amp;&amp;fast-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            fast=fast-&gt;next-&gt;next;</span><br><span class="line">            slow=slow-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(slow==fast)&#123;</span><br><span class="line">                ListNode*p = head;</span><br><span class="line">                <span class="keyword">while</span>(p!=slow)&#123;</span><br><span class="line">                    p=p-&gt;next;</span><br><span class="line">                    slow=slow-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy练习50</title>
      <link href="/2024/04/13/numpy%20%E7%BB%83%E4%B9%A050/"/>
      <url>/2024/04/13/numpy%20%E7%BB%83%E4%B9%A050/</url>
      
        <content type="html"><![CDATA[<p>1 导入numpy<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><br>2 打印 numpy 版本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.__version__)</span><br><span class="line"><span class="comment"># 1.26.0</span></span><br></pre></td></tr></table></figure><br>3 创建一个大小为 10 的空向量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A =  np.zeros(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]</span></span><br></pre></td></tr></table></figure><br>4 如何查找任何数组的内存大小<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(A.size * A.itemsize)</span><br><span class="line"><span class="comment"># 80</span></span><br></pre></td></tr></table></figure><br>5 如何从命令行获取 numpy add 函数的文档？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print(np.info(np.add))</span></span><br></pre></td></tr></table></figure><br>6 创建一个大小为 10 的空向量，但第五个值为 1<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A = np.zeros(<span class="number">10</span>)</span><br><span class="line">A[<span class="number">4</span>]=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]</span></span><br></pre></td></tr></table></figure><br>7 创建一个数值范围为 10 到 49 的向量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A = np.arange(<span class="number">10</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33</span></span><br><span class="line"><span class="comment">#  34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]</span></span><br></pre></td></tr></table></figure></p><ol><li>倒转向量（第一个元素变为最后一个元素）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(A[::-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># [49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26</span></span><br><span class="line"><span class="comment">#  25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10]</span></span><br></pre></td></tr></table></figure></li></ol><p>9 创建一个 3x3 矩阵，数值范围为 0 至 8<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A = np.arange(<span class="number">0</span>,<span class="number">9</span>).reshape((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [[0 1 2]</span></span><br><span class="line"><span class="comment">#  [3 4 5]</span></span><br><span class="line"><span class="comment">#  [6 7 8]]</span></span><br></pre></td></tr></table></figure></p><p>10 从[1,2,0,0,4,0]中找出非零元素的索引<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.nonzero([<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>]))</span><br><span class="line"><span class="comment"># (array([0, 1, 4], dtype=int64),)</span></span><br></pre></td></tr></table></figure></p><p>11  创建 3x3单位矩阵<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A = np.eye(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [[1. 0. 0.]</span></span><br><span class="line"><span class="comment">#  [0. 1. 0.]</span></span><br><span class="line"><span class="comment">#  [0. 0. 1.]]</span></span><br></pre></td></tr></table></figure></p><p>12 用随机值创建一个 3x3x3 数组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">A = np.random.random((<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [[[0.51701641 0.70356544 0.90246089]</span></span><br><span class="line"><span class="comment">#   [0.93648379 0.99090459 0.28404539]</span></span><br><span class="line"><span class="comment">#   [0.56477766 0.45614644 0.43485708]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  [[0.30986945 0.61224929 0.15321247]</span></span><br><span class="line"><span class="comment">#   [0.08243742 0.52434454 0.16549235]</span></span><br><span class="line"><span class="comment">#   [0.43315058 0.19596346 0.8242506 ]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  [[0.14449149 0.42690064 0.36303689]</span></span><br><span class="line"><span class="comment">#   [0.6005045  0.98059647 0.26418785]</span></span><br><span class="line"><span class="comment">#   [0.33624702 0.3691921  0.96844422]]]</span></span><br></pre></td></tr></table></figure></p><p>13 用随机值创建一个 10x10 数组，并找出最小值和最大值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A = np.random.random((<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(A.<span class="built_in">max</span>())</span><br><span class="line"><span class="built_in">print</span>(A.<span class="built_in">min</span>())</span><br><span class="line"><span class="comment"># 0.9907704759849023</span></span><br><span class="line"><span class="comment"># 0.015057056338748653</span></span><br></pre></td></tr></table></figure><br> 14 创建一个大小为30的随机向量，求其平均值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A = np.random.random(<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(np.mean(A))</span><br><span class="line"><span class="comment"># 0.6084927498936027</span></span><br></pre></td></tr></table></figure></p><p>15 创建一个二维数组，边框为 1，内部为 0<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">A = np.ones((<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">A[<span class="number">1</span>:-<span class="number">1</span>,<span class="number">1</span>:-<span class="number">1</span>]=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]</span></span><br><span class="line"><span class="comment">#  [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]</span></span><br><span class="line"><span class="comment">#  [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]</span></span><br><span class="line"><span class="comment">#  [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]</span></span><br><span class="line"><span class="comment">#  [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]</span></span><br><span class="line"><span class="comment">#  [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]</span></span><br><span class="line"><span class="comment">#  [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]</span></span><br><span class="line"><span class="comment">#  [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]</span></span><br><span class="line"><span class="comment">#  [1. 0. 0. 0. 0. 0. 0. 0. 0. 1.]</span></span><br><span class="line"><span class="comment">#  [1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]]</span></span><br></pre></td></tr></table></figure></p><p>16 如何在现有数组周围添加边框（填充 0）？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">A = np.ones((<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">A = np.pad(A,pad_width=<span class="number">1</span>,mode=<span class="string">&#x27;constant&#x27;</span>,constant_values=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [[0. 0. 0. 0. 0. 0. 0.]</span></span><br><span class="line"><span class="comment">#  [0. 1. 1. 1. 1. 1. 0.]</span></span><br><span class="line"><span class="comment">#  [0. 1. 1. 1. 1. 1. 0.]</span></span><br><span class="line"><span class="comment">#  [0. 1. 1. 1. 1. 1. 0.]</span></span><br><span class="line"><span class="comment">#  [0. 1. 1. 1. 1. 1. 0.]</span></span><br><span class="line"><span class="comment">#  [0. 1. 1. 1. 1. 1. 0.]</span></span><br><span class="line"><span class="comment">#  [0. 0. 0. 0. 0. 0. 0.]]</span></span><br></pre></td></tr></table></figure><br>17 下面表达式的结果是什么？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">0</span> * np.nan)</span><br><span class="line"><span class="built_in">print</span>(np.nan == np.nan)</span><br><span class="line"><span class="built_in">print</span>(np.inf &gt; np.nan)</span><br><span class="line"><span class="built_in">print</span>(np.nan - np.nan)</span><br><span class="line"><span class="built_in">print</span>(np.nan <span class="keyword">in</span> <span class="built_in">set</span>([np.nan]))</span><br><span class="line"><span class="built_in">print</span>(<span class="number">0.3</span> == <span class="number">3</span> * <span class="number">0.1</span>)</span><br><span class="line"><span class="comment"># nan</span></span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="comment"># nan</span></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure></p><p>18 创建一个 5x5 矩阵，数值 1、2、3、4 刚好位于对角线下方<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.diag(v,k),v是二维数组，返回k位置的对角线，v是一维数组，返回一个v作为k位置对角线的二维数组，</span></span><br><span class="line"><span class="comment"># k默认为0，对角线位置，大于零位于对角线上面，小于零则在下面</span></span><br><span class="line">A = np.diag(<span class="number">1</span>+np.arange(<span class="number">4</span>),k=-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [[0 0 0 0 0]</span></span><br><span class="line"><span class="comment">#  [1 0 0 0 0]</span></span><br><span class="line"><span class="comment">#  [0 2 0 0 0]</span></span><br><span class="line"><span class="comment">#  [0 0 3 0 0]</span></span><br><span class="line"><span class="comment">#  [0 0 0 4 0]]</span></span><br></pre></td></tr></table></figure></p><p>19 创建一个 8x8 矩阵并填充棋盘格图案<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">A = np.zeros((<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">A[<span class="number">1</span>::<span class="number">2</span>,::<span class="number">2</span>]=<span class="number">1</span></span><br><span class="line">A[::<span class="number">2</span>,<span class="number">1</span>::<span class="number">2</span>]=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [[0. 1. 0. 1. 0. 1. 0. 1.]</span></span><br><span class="line"><span class="comment">#  [1. 0. 1. 0. 1. 0. 1. 0.]</span></span><br><span class="line"><span class="comment">#  [0. 1. 0. 1. 0. 1. 0. 1.]</span></span><br><span class="line"><span class="comment">#  [1. 0. 1. 0. 1. 0. 1. 0.]</span></span><br><span class="line"><span class="comment">#  [0. 1. 0. 1. 0. 1. 0. 1.]</span></span><br><span class="line"><span class="comment">#  [1. 0. 1. 0. 1. 0. 1. 0.]</span></span><br><span class="line"><span class="comment">#  [0. 1. 0. 1. 0. 1. 0. 1.]</span></span><br><span class="line"><span class="comment">#  [1. 0. 1. 0. 1. 0. 1. 0.]]</span></span><br></pre></td></tr></table></figure></p><p>20 考虑一个 (6,7,8) 形数组，第 100 个元素的索引 (x,y,z) 是多少？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.unravel_index()：求出数组某元素（或某组元素）拉成一维后的索引值在原本维度（或指定新维度）中对应的索引</span></span><br><span class="line"><span class="built_in">print</span>(np.unravel_index(<span class="number">100</span>,(<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)))</span><br><span class="line"><span class="comment"># (1, 5, 4)</span></span><br></pre></td></tr></table></figure></p><p>21 使用tile功能创建一个 8x8 的棋盘矩阵<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.tile() 把数组沿各个方向复制</span></span><br><span class="line">A = np.tile([[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>]],(<span class="number">4</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [[0 1 0 1 0 1 0 1]</span></span><br><span class="line"><span class="comment">#  [1 0 1 0 1 0 1 0]</span></span><br><span class="line"><span class="comment">#  [0 1 0 1 0 1 0 1]</span></span><br><span class="line"><span class="comment">#  [1 0 1 0 1 0 1 0]</span></span><br><span class="line"><span class="comment">#  [0 1 0 1 0 1 0 1]</span></span><br><span class="line"><span class="comment">#  [1 0 1 0 1 0 1 0]</span></span><br><span class="line"><span class="comment">#  [0 1 0 1 0 1 0 1]</span></span><br><span class="line"><span class="comment">#  [1 0 1 0 1 0 1 0]]</span></span><br></pre></td></tr></table></figure></p><p>22 对 5x5 随机矩阵进行归一化处理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 归一化，消除指标指标之间的量纲影响</span></span><br><span class="line">A = np.random.random((<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [[0.92685566 0.39959318 0.3216881  0.78607669 0.16330114]</span></span><br><span class="line"><span class="comment">#  [0.23358891 0.20173894 0.84570086 0.28074804 0.61127835]</span></span><br><span class="line"><span class="comment">#  [0.46738838 0.98496397 0.70750835 0.85889864 0.28920651]</span></span><br><span class="line"><span class="comment">#  [0.11662991 0.37791573 0.21508322 0.06199924 0.52202826]</span></span><br><span class="line"><span class="comment">#  [0.8160796  0.48271711 0.75723249 0.78233383 0.43627365]]</span></span><br><span class="line"><span class="built_in">print</span>(np.std(A))</span><br><span class="line"><span class="comment"># 0.22703384104018048</span></span><br><span class="line">A = (A-np.mean(A))/np.std(A)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [[ 0.99714238  0.68295313  1.15975373  0.49175751  0.16118442]</span></span><br><span class="line"><span class="comment">#  [-0.29521244  0.6671127  -1.4414722   1.02782654 -0.62601601]</span></span><br><span class="line"><span class="comment">#  [-1.65080791  0.20360113  0.18228082 -0.68766934 -1.6732486 ]</span></span><br><span class="line"><span class="comment">#  [ 0.98050326  0.83047499  1.35795965  0.49417816  0.3231739 ]</span></span><br><span class="line"><span class="comment">#  [ 0.14973292 -0.5481092  -1.07215511  0.72507876 -2.44002318]]</span></span><br></pre></td></tr></table></figure></p><p>24 5x3 矩阵乘以 3x2 矩阵（实矩阵乘积）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A = np.dot(np.ones((<span class="number">5</span>,<span class="number">3</span>)),np.ones((<span class="number">3</span>,<span class="number">3</span>)))</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [[3. 3. 3.]</span></span><br><span class="line"><span class="comment">#  [3. 3. 3.]</span></span><br><span class="line"><span class="comment">#  [3. 3. 3.]</span></span><br><span class="line"><span class="comment">#  [3. 3. 3.]</span></span><br><span class="line"><span class="comment">#  [3. 3. 3.]]</span></span><br></pre></td></tr></table></figure><br>25 给定一个一维数组，对于所有介于3和8之间的元素取反。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A = np.arange(<span class="number">0</span>,<span class="number">11</span>)</span><br><span class="line"><span class="comment"># A = np.where( (A&gt;=3) &amp; (A&lt;=8),-A,A)</span></span><br><span class="line">A[(<span class="number">3</span>&lt;=A)&amp;(A&lt;=<span class="number">8</span>)]*=-<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(A)</span><br></pre></td></tr></table></figure><br>26 下列程序的输出是什么？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="built_in">range</span>(<span class="number">5</span>),-<span class="number">1</span>))</span><br><span class="line"><span class="comment"># sum[0,1,2,3,4] 再加上1</span></span><br><span class="line"><span class="comment"># 9</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="built_in">range</span>(<span class="number">5</span>),-<span class="number">1</span>))</span><br><span class="line"><span class="comment"># numpy中的sum函数，第二个参数，求和的轴，-1表示沿着最后一个轴进行求和</span></span><br></pre></td></tr></table></figure><br>30 如何查找两个数组的公共值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.intersect1d()，返回两个数组的交集</span></span><br><span class="line">A1 =np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(A1)</span><br><span class="line"><span class="comment"># [7 0 9 2 2 6 5 4 8 2]</span></span><br><span class="line">A2 =np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(A2)</span><br><span class="line"><span class="comment"># [7 9 9 9 3 4 1 5 3 4]</span></span><br><span class="line"><span class="built_in">print</span>(np.intersect1d(A1,A2))</span><br><span class="line"><span class="comment"># [4 5 7 9]</span></span><br></pre></td></tr></table></figure><br>33 如何获取昨天、今天和明天的日期？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yesterday = np.datetime64(<span class="string">&#x27;today&#x27;</span>,<span class="string">&#x27;D&#x27;</span>) -np.timedelta64(<span class="number">1</span>,<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">today = np.datetime64(<span class="string">&#x27;today&#x27;</span>,<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">tomorrow = np.datetime64(<span class="string">&#x27;today&#x27;</span>,<span class="string">&#x27;D&#x27;</span>)+np.timedelta64(<span class="number">1</span>,<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(yesterday,today,tomorrow)</span><br><span class="line"><span class="comment"># 2024-04-29 2024-04-30 2024-05-01</span></span><br></pre></td></tr></table></figure><br>34 如何获取与 2016 年 7 月相对应的所有日期？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A = np.arange(<span class="string">&#x27;2016-07&#x27;</span>,<span class="string">&#x27;2016-08&#x27;</span>,dtype=<span class="string">&#x27;datetime64[D]&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [&#x27;2016-07-01&#x27; &#x27;2016-07-02&#x27; &#x27;2016-07-03&#x27; &#x27;2016-07-04&#x27; &#x27;2016-07-05&#x27;</span></span><br><span class="line"><span class="comment">#  &#x27;2016-07-06&#x27; &#x27;2016-07-07&#x27; &#x27;2016-07-08&#x27; &#x27;2016-07-09&#x27; &#x27;2016-07-10&#x27;</span></span><br><span class="line"><span class="comment">#  &#x27;2016-07-11&#x27; &#x27;2016-07-12&#x27; &#x27;2016-07-13&#x27; &#x27;2016-07-14&#x27; &#x27;2016-07-15&#x27;</span></span><br><span class="line"><span class="comment">#  &#x27;2016-07-16&#x27; &#x27;2016-07-17&#x27; &#x27;2016-07-18&#x27; &#x27;2016-07-19&#x27; &#x27;2016-07-20&#x27;</span></span><br><span class="line"><span class="comment">#  &#x27;2016-07-21&#x27; &#x27;2016-07-22&#x27; &#x27;2016-07-23&#x27; &#x27;2016-07-24&#x27; &#x27;2016-07-25&#x27;</span></span><br><span class="line"><span class="comment">#  &#x27;2016-07-26&#x27; &#x27;2016-07-27&#x27; &#x27;2016-07-28&#x27; &#x27;2016-07-29&#x27; &#x27;2016-07-30&#x27;</span></span><br><span class="line"><span class="comment">#  &#x27;2016-07-31&#x27;]</span></span><br></pre></td></tr></table></figure><br>35 如何就地计算 ((A+B)*(-A/2)) （无需复制）？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">A = np.ones(<span class="number">3</span>)*<span class="number">1</span></span><br><span class="line">B = np.ones(<span class="number">3</span>)*<span class="number">2</span></span><br><span class="line">C = np.ones(<span class="number">3</span>)*<span class="number">3</span></span><br><span class="line">np.add(A,B,out=B)</span><br><span class="line"><span class="built_in">print</span>(B)</span><br><span class="line"><span class="comment"># [3. 3. 3.]</span></span><br><span class="line">np.divide(A,<span class="number">2</span>,out=A)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [0.5 0.5 0.5]</span></span><br><span class="line">np.negative(A,out=A)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [-0.5 -0.5 -0.5]</span></span><br><span class="line">np.multiply(B,A,out=A)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [-1.5 -1.5 -1.5]</span></span><br></pre></td></tr></table></figure><br>36 用 5 种不同方法提取随机数组的整数部分<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.trunc(A) 函数会返回一个新的数组，其中包含与输入数组 A 中每个元素相同的值，但是将这些值截断为整数部分。</span></span><br><span class="line">A = np.random.uniform(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [0.18262916 6.77946139 9.20108589 6.79791964 6.0110954  4.34951841</span></span><br><span class="line"><span class="comment">#  9.08761797 1.50607495 2.64240807 8.54159946]</span></span><br><span class="line"><span class="built_in">print</span>(A-A%<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(np.floor(A))</span><br><span class="line"><span class="built_in">print</span>(np.ceil(A)-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(np.trunc(A))</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [0. 6. 9. 6. 6. 4. 9. 1. 2. 8.]</span></span><br><span class="line"><span class="built_in">print</span>(A.astype(<span class="built_in">int</span>))</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [0 6 9 6 6 4 9 1 2 8]</span></span><br></pre></td></tr></table></figure><br>37 创建一个 5x5 矩阵，行值范围为 0 至 4<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A =np.zeros((<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line">A += np.arange(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [[0. 1. 2. 3. 4.]</span></span><br><span class="line"><span class="comment">#  [0. 1. 2. 3. 4.]</span></span><br><span class="line"><span class="comment">#  [0. 1. 2. 3. 4.]</span></span><br><span class="line"><span class="comment">#  [0. 1. 2. 3. 4.]</span></span><br><span class="line"><span class="comment">#  [0. 1. 2. 3. 4.]]</span></span><br></pre></td></tr></table></figure><br>38 考虑一个generate函数，生成 10 个整数，并用它建立一个数组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate</span>():</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">yield</span> x</span><br><span class="line"></span><br><span class="line">A = np.fromiter(generate(),dtype=<span class="built_in">float</span>,count=-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [0. 1. 2. 3. 4. 5. 6. 7. 8. 9.]</span></span><br></pre></td></tr></table></figure><br>39 创建一个大小为 10 的向量，其值范围为 0 至 1，开区间<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A = np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">11</span>,endpoint=<span class="literal">False</span>)[<span class="number">1</span>:]</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [0.09090909 0.18181818 0.27272727 0.36363636 0.45454545 0.54545455</span></span><br><span class="line"><span class="comment">#  0.63636364 0.72727273 0.81818182 0.90909091]</span></span><br></pre></td></tr></table></figure><br>40 创建大小为 10 的随机向量并排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A = np.random.random(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [0.88926125 0.27836093 0.85296294 0.33284357 0.79563254 0.94715995</span></span><br><span class="line"><span class="comment">#  0.49433492 0.36834956 0.80960441 0.97186405]</span></span><br><span class="line">A.sort()</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [0.27836093 0.33284357 0.36834956 0.49433492 0.79563254 0.80960441</span></span><br><span class="line"><span class="comment">#  0.85296294 0.88926125 0.94715995 0.97186405]</span></span><br></pre></td></tr></table></figure><br>42 考虑两个随机数组 A 和 B，检查它们是否相等<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A = np.random.random(<span class="number">5</span>)</span><br><span class="line">B = np.random.random(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(A,B)</span><br><span class="line"><span class="comment"># [0.10499542 0.75789007 0.22211449 0.76080379 0.56697285]</span></span><br><span class="line"><span class="comment"># [0.60510406 0.56727591 0.58049127 0.75298729 0.66239856]</span></span><br><span class="line"><span class="built_in">print</span>(np.array_equal(A,B))</span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure><br>45 创建大小为 10 的随机向量，并用 0 替换最大值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A = np.random.random(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [0.46548663 0.26101477 0.98163071 0.03317805 0.44601752]</span></span><br><span class="line">index = np.argmax(A)</span><br><span class="line">A[index]=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [0.46548663 0.26101477 0.         0.03317805 0.44601752]</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy基础</title>
      <link href="/2024/04/12/Numpy/"/>
      <url>/2024/04/12/Numpy/</url>
      
        <content type="html"><![CDATA[<h2 id="1-numpy-基本操作"><a href="#1-numpy-基本操作" class="headerlink" title="1 numpy 基本操作"></a>1 numpy 基本操作</h2><h3 id="1-1-列表转换为矩阵"><a href="#1-1-列表转换为矩阵" class="headerlink" title="1.1 列表转换为矩阵"></a>1.1 列表转换为矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.array()</span></span><br><span class="line">array = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="comment"># [1 2 3]</span></span><br><span class="line"></span><br><span class="line">array2 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">                   [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br><span class="line"><span class="comment"># [[1 2 3]</span></span><br><span class="line"><span class="comment">#  [4 5 6]]</span></span><br></pre></td></tr></table></figure><h3 id="1-2-维度"><a href="#1-2-维度" class="headerlink" title="1.2 维度"></a>1.2 维度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># array.ndim,ndim是矩阵属性而不是方法</span></span><br><span class="line"><span class="built_in">print</span>(array.ndim)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(array2.ndim)</span><br><span class="line"><span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h3 id="1-3-行数和列数"><a href="#1-3-行数和列数" class="headerlink" title="1.3 行数和列数"></a>1.3 行数和列数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># array.shape,shape是矩阵的属性而不是方法</span></span><br><span class="line"><span class="built_in">print</span>(array.shape)</span><br><span class="line"><span class="comment"># (3,) 一维数组只包含维度的长度</span></span><br><span class="line"><span class="built_in">print</span>(array2.shape)</span><br><span class="line"><span class="comment"># (2, 3) 二维，两行三列</span></span><br></pre></td></tr></table></figure><h3 id="1-4-元素个数"><a href="#1-4-元素个数" class="headerlink" title="1.4 元素个数"></a>1.4 元素个数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># array.size,size是矩阵的属性而不是方法</span></span><br><span class="line"><span class="built_in">print</span>(array.size)</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(array2.size)</span><br><span class="line"><span class="comment"># 6</span></span><br></pre></td></tr></table></figure><h2 id="2-numpy-创建array"><a href="#2-numpy-创建array" class="headerlink" title="2 numpy 创建array"></a>2 numpy 创建array</h2><h3 id="2-1-一维array的创建"><a href="#2-1-一维array的创建" class="headerlink" title="2.1 一维array的创建"></a>2.1 一维array的创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array = np.array([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],dtype=np.int32)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="comment"># [2 3 4]</span></span><br><span class="line"><span class="built_in">print</span>(array.dtype)</span><br><span class="line"><span class="comment"># int32</span></span><br></pre></td></tr></table></figure><h3 id="2-2-多维array创建"><a href="#2-2-多维array创建" class="headerlink" title="2.2 多维array创建"></a>2.2 多维array创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array2 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(array2)</span><br><span class="line"><span class="comment"># [[1 2 3]</span></span><br><span class="line"><span class="comment">#  [4 5 6]]</span></span><br></pre></td></tr></table></figure><h3 id="2-3-创建全零数组"><a href="#2-3-创建全零数组" class="headerlink" title="2.3 创建全零数组"></a>2.3 创建全零数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.zeros(),</span></span><br><span class="line">array0 = np.zeros((<span class="number">3</span>,<span class="number">4</span>),dtype=np.int32)</span><br><span class="line"><span class="built_in">print</span>(array0)</span><br><span class="line"><span class="comment"># [[0. 0. 0. 0.]</span></span><br><span class="line"><span class="comment">#  [0. 0. 0. 0.]</span></span><br><span class="line"><span class="comment">#  [0. 0. 0. 0.]]</span></span><br></pre></td></tr></table></figure><h3 id="2-4-创建全1数据"><a href="#2-4-创建全1数据" class="headerlink" title="2.4 创建全1数据"></a>2.4 创建全1数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.ones()</span></span><br><span class="line">array1 = np.ones((<span class="number">3</span>,<span class="number">4</span>),dtype=np.int32)</span><br><span class="line"><span class="built_in">print</span>(array1)</span><br><span class="line"><span class="comment"># [[1. 1. 1. 1.]</span></span><br><span class="line"><span class="comment">#  [1. 1. 1. 1.]</span></span><br><span class="line"><span class="comment">#  [1. 1. 1. 1.]]</span></span><br></pre></td></tr></table></figure><h3 id="2-5-创建全空数组"><a href="#2-5-创建全空数组" class="headerlink" title="2.5 创建全空数组"></a>2.5 创建全空数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其实每个值都是接近于零的数,np.empty()</span></span><br><span class="line">array = np.empty((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="comment"># [[6.23042070e-307 1.89146896e-307 1.37961302e-306 6.23053614e-307]</span></span><br><span class="line"><span class="comment">#  [6.23053954e-307 9.34609790e-307 8.45593934e-307 9.34600963e-307]</span></span><br><span class="line"><span class="comment">#  [1.86921143e-306 6.23061763e-307 8.90104239e-307 3.52937523e-317]]</span></span><br></pre></td></tr></table></figure><h3 id="2-6-创建连续数组"><a href="#2-6-创建连续数组" class="headerlink" title="2.6 创建连续数组"></a>2.6 创建连续数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10-20数组，步长为2,np.arange(begin,end+1,step)</span></span><br><span class="line">array = np.arange(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="comment"># [0 1 2 3]</span></span><br><span class="line">array = np.arange(<span class="number">10</span>,<span class="number">21</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(array)</span><br><span class="line"><span class="comment"># [10 12 14 16 18 20]</span></span><br></pre></td></tr></table></figure><h3 id="2-7-数组的reshape方法"><a href="#2-7-数组的reshape方法" class="headerlink" title="2.7 数组的reshape方法"></a>2.7 数组的reshape方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b = array.reshape((<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># [[10 12 14]</span></span><br><span class="line"><span class="comment">#  [16 18 20]]</span></span><br></pre></td></tr></table></figure><h3 id="2-8-创建连续型数据"><a href="#2-8-创建连续型数据" class="headerlink" title="2.8 创建连续型数据"></a>2.8 创建连续型数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从10开始，20结束，分割成10个数据,np.linspace()</span></span><br><span class="line">a = np.linspace(<span class="number">10</span>,<span class="number">20</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [10.         11.11111111 12.22222222 13.33333333 14.44444444 15.55555556</span></span><br><span class="line"><span class="comment">#  16.66666667 17.77777778 18.88888889 20.        ]</span></span><br></pre></td></tr></table></figure><h3 id="2-9-生成随机性数据"><a href="#2-9-生成随机性数据" class="headerlink" title="2.9 生成随机性数据"></a>2.9 生成随机性数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.random.random()</span></span><br><span class="line">a = np.random.random((<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [[0.88305579 0.1303509  0.62293829 0.30633028]</span></span><br><span class="line"><span class="comment">#  [0.3118289  0.20432204 0.46446014 0.22802355]]</span></span><br></pre></td></tr></table></figure><h2 id="3-numpy-基本运算"><a href="#3-numpy-基本运算" class="headerlink" title="3 numpy 基本运算"></a>3 numpy 基本运算</h2><h3 id="3-1一维矩阵运算"><a href="#3-1一维矩阵运算" class="headerlink" title="3.1一维矩阵运算"></a>3.1一维矩阵运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>])</span><br><span class="line">b = np.arange(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br><span class="line"><span class="comment"># [10 20 30 40] [0 1 2 3]</span></span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br><span class="line"><span class="comment"># [10 21 32 43]</span></span><br><span class="line"><span class="built_in">print</span>(a*b)</span><br><span class="line"><span class="comment"># [  0  20  60 120]</span></span><br><span class="line"><span class="built_in">print</span>(a-b)</span><br><span class="line"><span class="comment"># [10 19 28 37]</span></span><br><span class="line">c = b**<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># [0 1 4 9]</span></span><br><span class="line"><span class="built_in">print</span>(np.sin(b))</span><br><span class="line"><span class="comment"># [0.         0.84147098 0.90929743 0.14112001]</span></span><br><span class="line"><span class="built_in">print</span>(b&lt;<span class="number">2</span>)</span><br><span class="line"><span class="comment"># [ True  True False False]</span></span><br><span class="line"><span class="built_in">print</span>(a==b)</span><br><span class="line"><span class="comment"># [False False False False]</span></span><br></pre></td></tr></table></figure><h3 id="3-2-多维矩阵运算"><a href="#3-2-多维矩阵运算" class="headerlink" title="3.2 多维矩阵运算"></a>3.2 多维矩阵运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">b = np.arange(<span class="number">4</span>).reshape((<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [[1 1]</span></span><br><span class="line"><span class="comment">#  [0 1]]</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># [[0 1]</span></span><br><span class="line"><span class="comment">#  [2 3]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多维矩阵乘法 np.dot()</span></span><br><span class="line">c= np.dot(a,b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># [[2 4]</span></span><br><span class="line"><span class="comment">#  [2 3]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求列表中min和max,sum，使用min()和max()方法,sum()方法,或者np.min(),np.max()，np.sum()</span></span><br><span class="line">a = np.random.random((<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">min</span>())</span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">max</span>())</span><br><span class="line"><span class="comment"># 0.25716551969504853</span></span><br><span class="line"><span class="comment"># 0.6615216818233298</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按行或列进行操作，当axis = 0，按列进行操作,当axis =1 ,对行进行操作</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">min</span>(a,axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment"># [0.00665876 0.28804975 0.35533222 0.30061535]</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">max</span>(a,axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># [0.914875   0.51276219]</span></span><br></pre></td></tr></table></figure><h3 id="3-3-基本计算"><a href="#3-3-基本计算" class="headerlink" title="3.3 基本计算"></a>3.3 基本计算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">A = np.arange(<span class="number">2</span>,<span class="number">14</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [[ 2  3  4  5]</span></span><br><span class="line"><span class="comment">#  [ 6  7  8  9]</span></span><br><span class="line"><span class="comment">#  [10 11 12 13]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最小与最大元素索引,np.argmax(),np.argmin()</span></span><br><span class="line"><span class="built_in">print</span>(np.argmax(A),np.argmin(A))</span><br><span class="line"><span class="comment"># 11 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求矩阵的均值,np.mean(),np.average(),A.mean()</span></span><br><span class="line"><span class="built_in">print</span>(np.mean(A))</span><br><span class="line"><span class="built_in">print</span>(np.average(A))</span><br><span class="line"><span class="comment"># 7.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中位数,np.median(),有两个求均值</span></span><br><span class="line"><span class="built_in">print</span>(np.median(A))</span><br><span class="line"><span class="comment"># 7.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 累加,np.cumsum(A)</span></span><br><span class="line"><span class="built_in">print</span>(np.cumsum(A))</span><br><span class="line"><span class="comment"># [ 2  5  9 14 20 27 35 44 54 65 77 90]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 累差运算,np.diff()</span></span><br><span class="line">B = np.array([[<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>],[<span class="number">4</span>,<span class="number">8</span>,<span class="number">10</span>]])</span><br><span class="line"><span class="built_in">print</span>(np.diff(B))</span><br><span class="line"><span class="comment"># [[2 4]</span></span><br><span class="line"><span class="comment">#  [4 2]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数组中非零元素的索引,np.nonzero()，输出是每个维度上非零元素的索引</span></span><br><span class="line">C = np.array([[<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>],</span><br><span class="line">              [<span class="number">4</span>,<span class="number">0</span>,<span class="number">10</span>]])</span><br><span class="line"><span class="built_in">print</span>(np.nonzero(C))</span><br><span class="line"><span class="comment"># (array([0, 0, 1, 1], dtype=int64), array([1, 2, 0, 2], dtype=int64))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵排序，np.sort()</span></span><br><span class="line">A  = np.arange(<span class="number">14</span>,<span class="number">2</span>,-<span class="number">1</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [[14 13 12 11]</span></span><br><span class="line"><span class="comment">#  [10  9  8  7]</span></span><br><span class="line"><span class="comment">#  [ 6  5  4  3]]</span></span><br><span class="line"><span class="built_in">print</span>(np.sort(A))</span><br><span class="line"><span class="comment"># [[11 12 13 14]</span></span><br><span class="line"><span class="comment">#  [ 7  8  9 10]</span></span><br><span class="line"><span class="comment">#  [ 3  4  5  6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵转置,np.transpose(),A.T</span></span><br><span class="line"><span class="built_in">print</span>(np.transpose(A))</span><br><span class="line"><span class="built_in">print</span>(A.T)</span><br><span class="line"><span class="comment"># [[14 10  6]</span></span><br><span class="line"><span class="comment">#  [13  9  5]</span></span><br><span class="line"><span class="comment">#  [12  8  4]</span></span><br><span class="line"><span class="comment">#  [11  7  3]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将矩阵中值限定在一定的范围内，np.clip(array,min,max)</span></span><br><span class="line"><span class="built_in">print</span>(np.clip(A,<span class="number">5</span>,<span class="number">9</span>))</span><br><span class="line"><span class="comment"># [[9 9 9 9]</span></span><br><span class="line"><span class="comment">#  [9 9 8 7]</span></span><br><span class="line"><span class="comment">#  [6 5 5 5]]</span></span><br></pre></td></tr></table></figure><h2 id="4-numpy-索引与切片"><a href="#4-numpy-索引与切片" class="headerlink" title="4 numpy 索引与切片"></a>4 numpy 索引与切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.arange(<span class="number">3</span>,<span class="number">15</span>)</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [ 3  4  5  6  7  8  9 10 11 12 13 14]</span></span><br><span class="line"><span class="built_in">print</span>(A[<span class="number">3</span>])</span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line">B = A.reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(B)</span><br><span class="line"><span class="comment"># [[ 3  4  5  6]</span></span><br><span class="line"><span class="comment">#  [ 7  8  9 10]</span></span><br><span class="line"><span class="comment">#  [11 12 13 14]]</span></span><br><span class="line"><span class="built_in">print</span>(B[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(B[<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(B[<span class="number">0</span>,<span class="number">2</span>])</span><br><span class="line"><span class="comment"># [11 12 13 14]</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list切片操作</span></span><br><span class="line"><span class="built_in">print</span>(B[<span class="number">1</span>,<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="comment"># [8 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印矩阵的每一行</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> B:</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br><span class="line"><span class="comment"># [3 4 5 6]</span></span><br><span class="line"><span class="comment"># [ 7  8  9 10]</span></span><br><span class="line"><span class="comment"># [11 12 13 14]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印矩阵的每个列</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> np.transpose(B):</span><br><span class="line">    <span class="built_in">print</span>(col)</span><br><span class="line"><span class="comment"># [ 3  7 11]</span></span><br><span class="line"><span class="comment"># [ 4  8 12]</span></span><br><span class="line"><span class="comment"># [ 5  9 13]</span></span><br><span class="line"><span class="comment"># [ 6 10 14]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多维转一维</span></span><br><span class="line">A = np.arange(<span class="number">3</span>,<span class="number">15</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(A.flatten())</span><br><span class="line"><span class="comment"># [ 3  4  5  6  7  8  9 10 11 12 13 14]</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> A.flat:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 7</span></span><br><span class="line"><span class="comment"># 8</span></span><br><span class="line"><span class="comment"># 9</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># 11</span></span><br><span class="line"><span class="comment"># 12</span></span><br><span class="line"><span class="comment"># 13</span></span><br><span class="line"><span class="comment"># 14</span></span><br></pre></td></tr></table></figure><p><img src="https://picmd.tangwan16.cn/posts/机器学习/numpy/1.png" alt=""><br><img src="https://picmd.tangwan16.cn/posts/机器学习/numpy/2.png" alt=""></p><h2 id="5-Numpy-array合并"><a href="#5-Numpy-array合并" class="headerlink" title="5 Numpy array合并"></a>5 Numpy array合并</h2><h3 id="5-1-数组合并"><a href="#5-1-数组合并" class="headerlink" title="5.1 数组合并"></a>5.1 数组合并</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vertical stack 上下合并，对括号的两个整体操作</span></span><br><span class="line">A = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">B = np.array([<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line">C = np.vstack((A,B))</span><br><span class="line"><span class="built_in">print</span>(C)</span><br><span class="line"><span class="comment"># [[1 1 1]</span></span><br><span class="line"><span class="comment">#  [2 2 2]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A.shape,B.shape,C.shape)</span><br><span class="line"><span class="comment"># (3,) (3,) (2, 3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># horizontal stack 左右合并</span></span><br><span class="line">D = np.hstack((A,B))</span><br><span class="line"><span class="built_in">print</span>(D)</span><br><span class="line"><span class="comment"># [1 1 1 2 2 2]</span></span><br><span class="line"><span class="built_in">print</span>(A.shape,B.shape,D.shape)</span><br><span class="line"><span class="comment"># (3,) (3,) (6,)</span></span><br></pre></td></tr></table></figure><h3 id="5-2-数组转置为矩阵"><a href="#5-2-数组转置为矩阵" class="headerlink" title="5.2 数组转置为矩阵"></a>5.2 数组转置为矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.newaxis,插入新维度,且这一维长度是1</span></span><br><span class="line"><span class="comment"># 将A,[1 1 1]转化为[[1 1 1]]</span></span><br><span class="line"><span class="built_in">print</span>(A[np.newaxis,:])</span><br><span class="line"><span class="built_in">print</span>(A[np.newaxis,:].shape)</span><br><span class="line"><span class="comment"># [[1 1 1]]</span></span><br><span class="line"><span class="comment"># (1, 3)</span></span><br><span class="line"><span class="comment"># 将A,[1 1 1]转化为[[1]</span></span><br><span class="line"><span class="comment">#                   [1]</span></span><br><span class="line"><span class="comment">#                   [1]]</span></span><br></pre></td></tr></table></figure><h3 id="5-3-多个矩阵合并"><a href="#5-3-多个矩阵合并" class="headerlink" title="5.3 多个矩阵合并"></a>5.3 多个矩阵合并</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.concatenate(),axis = 0,对列进行操作，纵向合并</span></span><br><span class="line">A = A[:,np.newaxis]</span><br><span class="line">B = B[:,np.newaxis]</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="built_in">print</span>(B)</span><br><span class="line"><span class="comment"># [[1]</span></span><br><span class="line"><span class="comment">#  [1]</span></span><br><span class="line"><span class="comment">#  [1]]</span></span><br><span class="line"><span class="comment"># [[2]</span></span><br><span class="line"><span class="comment">#  [2]</span></span><br><span class="line"><span class="comment">#  [2]]</span></span><br><span class="line">C = np.concatenate((A,B),axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(C)</span><br><span class="line"><span class="comment"># [[1]</span></span><br><span class="line"><span class="comment">#  [1]</span></span><br><span class="line"><span class="comment">#  [1]</span></span><br><span class="line"><span class="comment">#  [2]</span></span><br><span class="line"><span class="comment">#  [2]</span></span><br><span class="line"><span class="comment">#  [2]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.concatenate.,axis = 1 对行进行操作，横向合并</span></span><br><span class="line">C = np.concatenate((A,B),axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(C)</span><br><span class="line"><span class="comment"># [[1 2]</span></span><br><span class="line"><span class="comment">#  [1 2]</span></span><br><span class="line"><span class="comment">#  [1 2]]</span></span><br></pre></td></tr></table></figure><h3 id="5-4合并例子2"><a href="#5-4合并例子2" class="headerlink" title="5.4合并例子2"></a>5.4合并例子2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">b = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># [[0 1 2 3]</span></span><br><span class="line"><span class="comment">#  [4 5 6 7]]</span></span><br><span class="line"><span class="comment"># [[0 1 2 3]</span></span><br><span class="line"><span class="comment">#  [4 5 6 7]]</span></span><br><span class="line">c = np.concatenate((a,b),axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># [[0 1 2 3]</span></span><br><span class="line"><span class="comment">#  [4 5 6 7]</span></span><br><span class="line"><span class="comment">#  [0 1 2 3]</span></span><br><span class="line"><span class="comment">#  [4 5 6 7]]</span></span><br><span class="line">c = np.concatenate((a,b),axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># [[0 1 2 3 0 1 2 3]</span></span><br><span class="line"><span class="comment">#  [4 5 6 7 4 5 6 7]]</span></span><br></pre></td></tr></table></figure><h2 id="6-Numpy-array分割"><a href="#6-Numpy-array分割" class="headerlink" title="6 Numpy array分割"></a>6 Numpy array分割</h2><h3 id="6-1-构造3行4列矩阵"><a href="#6-1-构造3行4列矩阵" class="headerlink" title="6.1 构造3行4列矩阵"></a>6.1 构造3行4列矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(A)</span><br><span class="line"><span class="comment"># [[ 0  1  2  3]</span></span><br><span class="line"><span class="comment">#  [ 4  5  6  7]</span></span><br><span class="line"><span class="comment">#  [ 8  9 10 11]]</span></span><br></pre></td></tr></table></figure><h3 id="6-2-等量分割"><a href="#6-2-等量分割" class="headerlink" title="6.2 等量分割"></a>6.2 等量分割</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.split(A,n),对数组A进行操作，分成n部分，默认axis=0</span></span><br><span class="line"><span class="built_in">print</span>(np.split(A,<span class="number">2</span>,axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># [array([[0, 1],</span></span><br><span class="line"><span class="comment">#        [4, 5],</span></span><br><span class="line"><span class="comment">#        [8, 9]]),</span></span><br><span class="line"><span class="comment"># array([[ 2,  3],</span></span><br><span class="line"><span class="comment">#        [ 6,  7],</span></span><br><span class="line"><span class="comment">#        [10, 11]])]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.split(A,<span class="number">3</span>,axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment"># [array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]</span></span><br></pre></td></tr></table></figure><h3 id="6-3-不等量分割"><a href="#6-3-不等量分割" class="headerlink" title="6.3 不等量分割"></a>6.3 不等量分割</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># array_split,</span></span><br><span class="line"><span class="built_in">print</span>(np.array_split(A,<span class="number">3</span>,axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 对行进行操作，4份分成3份为2,1,1</span></span><br><span class="line"><span class="comment"># [array([[0, 1],</span></span><br><span class="line"><span class="comment">#        [4, 5],</span></span><br><span class="line"><span class="comment">#        [8, 9]]), array([[ 2],</span></span><br><span class="line"><span class="comment">#        [ 6],</span></span><br><span class="line"><span class="comment">#        [10]]), array([[ 3],</span></span><br><span class="line"><span class="comment">#        [ 7],</span></span><br><span class="line"><span class="comment">#        [11]])]</span></span><br></pre></td></tr></table></figure><h3 id="6-4-其他分割方式"><a href="#6-4-其他分割方式" class="headerlink" title="6.4 其他分割方式"></a>6.4 其他分割方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 横向分割np.vsplit(),</span></span><br><span class="line"><span class="built_in">print</span>(np.vsplit(A,<span class="number">3</span>)) <span class="comment">#相当于np.split(A,3,axis = 0)</span></span><br><span class="line"><span class="comment"># [array([[0, 1, 2, 3]]), array([[4, 5, 6, 7]]), array([[ 8,  9, 10, 11]])]</span></span><br><span class="line"><span class="comment"># 纵向分割,np.hsplit()</span></span><br><span class="line"><span class="built_in">print</span>(np.hsplit(A,<span class="number">2</span>)) <span class="comment">#相当于np.split(A,2,axis = 1)</span></span><br><span class="line"><span class="comment"># [array([[0, 1],</span></span><br><span class="line"><span class="comment">#        [4, 5],</span></span><br><span class="line"><span class="comment">#        [8, 9]]), array([[ 2,  3],</span></span><br><span class="line"><span class="comment">#        [ 6,  7],</span></span><br><span class="line"><span class="comment">#        [10, 11]])]</span></span><br></pre></td></tr></table></figure><h2 id="7-Numpy-copy与"><a href="#7-Numpy-copy与" class="headerlink" title="7 Numpy copy与="></a>7 Numpy copy与=</h2><h3 id="7-1-赋值方式会带有关联性"><a href="#7-1-赋值方式会带有关联性" class="headerlink" title="7.1 = 赋值方式会带有关联性"></a>7.1 = 赋值方式会带有关联性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">4</span>)</span><br><span class="line">b = a</span><br><span class="line">c = a</span><br><span class="line">d = b</span><br><span class="line"><span class="built_in">print</span>(a,b,c,d)</span><br><span class="line"><span class="comment"># [0 1 2 3] [0 1 2 3] [0 1 2 3] [0 1 2 3]</span></span><br><span class="line">a[<span class="number">0</span>]= <span class="number">11</span></span><br><span class="line"><span class="built_in">print</span>(a,b,c,d)</span><br><span class="line"><span class="comment"># [11  1  2  3] [11  1  2  3] [11  1  2  3] [11  1  2  3]</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">is</span> a,c <span class="keyword">is</span> a,d <span class="keyword">is</span> a)</span><br><span class="line"><span class="comment"># True True True</span></span><br><span class="line">b[<span class="number">1</span>:<span class="number">3</span>]=[<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br><span class="line"><span class="comment"># [11 22 33  3] [11 22 33  3]</span></span><br></pre></td></tr></table></figure><h3 id="7-2-copy-赋值方式没有关联性"><a href="#7-2-copy-赋值方式没有关联性" class="headerlink" title="7.2 copy()赋值方式没有关联性"></a>7.2 copy()赋值方式没有关联性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a =np.arange(<span class="number">4</span>)</span><br><span class="line">b = a.copy()</span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br><span class="line"><span class="comment"># [0 1 2 3] [0 1 2 3]</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">11</span></span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br><span class="line"><span class="comment"># [11  1  2  3] [0 1 2 3]</span></span><br></pre></td></tr></table></figure><h2 id="8-广播机制"><a href="#8-广播机制" class="headerlink" title="8 广播机制"></a>8 广播机制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># numpy数组的大小一致时，正常运算，当两者不一样的时候，就会自动触发广播机制</span></span><br><span class="line">a = np.array([[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">              [<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>],</span><br><span class="line">              [<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>],</span><br><span class="line">              [<span class="number">30</span>,<span class="number">30</span>,<span class="number">30</span>]])</span><br><span class="line">b = np.array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br><span class="line"><span class="comment"># [[ 0  1  2]</span></span><br><span class="line"><span class="comment">#  [10 11 12]</span></span><br><span class="line"><span class="comment">#  [20 21 22]</span></span><br><span class="line"><span class="comment">#  [30 31 32]]</span></span><br></pre></td></tr></table></figure><p><img src="https://picmd.tangwan16.cn/posts/机器学习/numpy/3.png" alt=""><br><img src="https://picmd.tangwan16.cn/posts/机器学习/numpy/4.png" alt=""><br>9 常用函数<br>9.1 np.bincount()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.bincount(a),返回一个数组，其长度等于a中元素最大值加1，每个元素值则是它当前索引值在a中出现的次数</span></span><br><span class="line">x = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(np.bincount(x))</span><br><span class="line"><span class="comment"># [1 2 1 2 1]</span></span><br><span class="line"><span class="comment"># 0出现1次，1出现2次，2出现1次，3出现2次</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.bincount()的weights参数</span></span><br><span class="line">w = np.array([<span class="number">0.3</span>,<span class="number">0.5</span>,<span class="number">0.7</span>,<span class="number">0.6</span>,<span class="number">0.1</span>,-<span class="number">0.9</span>,<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(np.bincount(x,weights=w))</span><br><span class="line"><span class="comment"># [ 0.1 -0.6  0.5  1.3  1. ]</span></span><br><span class="line"><span class="comment"># x[1,2,3,3,0,1,4]</span></span><br><span class="line"><span class="comment"># w[0.3,0.5,0.7,0.6,0.1,-0.9,1]</span></span><br><span class="line"><span class="comment"># 0出现x[4],w[4]=0.1</span></span><br><span class="line"><span class="comment"># 1出现在x[0],x[5],w[0]+w[5]=0.3+-0.9=-0.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.bincount()的minlength参数,当所给的bin数量多于实际从x中得到的bin数量后，后面没有访问到的设置为0即可。</span></span><br><span class="line"><span class="built_in">print</span>(np.bincount(x,weights=w,minlength=<span class="number">7</span>))</span><br><span class="line"><span class="comment"># [ 0.1 -0.6  0.5  1.3  1.   0.   0. ]</span></span><br></pre></td></tr></table></figure></p><p>9.2 np.argmax()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回沿轴axis最大值的索引,若有有重复元素，返回第一个最大值索引</span></span><br><span class="line"><span class="comment"># 没指定axis=1,axis=0时，索引递增</span></span><br><span class="line">x = [[<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>],</span><br><span class="line">     [<span class="number">7</span>,<span class="number">5</span>,<span class="number">2</span>]]</span><br><span class="line"><span class="built_in">print</span>(np.argmax(x))</span><br><span class="line"><span class="comment"># axis = 1，按行进行操作</span></span><br><span class="line"><span class="built_in">print</span>(np.argmax(x,axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># [1 0]</span></span><br><span class="line"><span class="comment"># axis = 0,按列进行操作</span></span><br><span class="line"><span class="built_in">print</span>(np.argmax(x,axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment"># [1 1 0]</span></span><br></pre></td></tr></table></figure></p><p>9.3 合并实例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(np.argmax(np.bincount(x)))</span><br><span class="line"><span class="comment"># 1</span></span><br></pre></td></tr></table></figure><br>9.4 求取精度<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># np.round(),decimals=0 取指定位置的精度,四舍五入</span></span><br><span class="line">A = [-<span class="number">0.6</span>,<span class="number">1.2798</span>,<span class="number">2.357</span>,<span class="number">9.67</span>,<span class="number">13</span>]</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">round</span>(A,decimals=<span class="number">0</span>))</span><br><span class="line"><span class="comment"># [-1.  1.  2. 10. 13.]</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">round</span>(A,decimals=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># [-0.6  1.3  2.4  9.7 13. ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.diff()计算沿指定轴第N维的离散插值</span></span><br><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">16</span>).reshape((<span class="number">3</span>,<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># [[ 1  2  3  4  5]</span></span><br><span class="line"><span class="comment">#  [ 6  7  8  9 10]</span></span><br><span class="line"><span class="comment">#  [11 12 13 14 15]]</span></span><br><span class="line"><span class="built_in">print</span>(np.diff(x,axis=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># [[1 1 1 1]</span></span><br><span class="line"><span class="comment">#  [1 1 1 1]</span></span><br><span class="line"><span class="comment">#  [1 1 1 1]]</span></span><br><span class="line"><span class="built_in">print</span>(np.diff(x,axis=<span class="number">0</span>))</span><br><span class="line"><span class="comment"># [[5 5 5 5 5]</span></span><br><span class="line"><span class="comment">#  [5 5 5 5 5]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.floor(),向下取整，负数求整，向左</span></span><br><span class="line"><span class="built_in">print</span>(np.floor(A))</span><br><span class="line"><span class="comment"># [-1.  1.  2.  9. 13.]</span></span><br><span class="line"><span class="comment"># np.ceil() ，向上取整</span></span><br><span class="line"><span class="built_in">print</span>(np.ceil(A))</span><br><span class="line"><span class="comment"># [-0.  2.  3. 10. 13.]</span></span><br><span class="line"><span class="comment"># np.where(A&gt;a,b,c)对于矩阵中&gt;a的数为b,&lt;=a,为c</span></span><br><span class="line">x = np.array([[<span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">2</span>, -<span class="number">2</span>],</span><br><span class="line">     [-<span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="built_in">print</span>(np.where(x&gt;<span class="number">0</span>,x,<span class="number">0</span>))</span><br><span class="line"><span class="comment"># [[1 0]</span></span><br><span class="line"><span class="comment">#  [2 0]</span></span><br><span class="line"><span class="comment">#  [0 1]]</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据挖掘 数据库</title>
      <link href="/2024/04/11/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2024/04/11/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="SQLite数据库"><a href="#SQLite数据库" class="headerlink" title="SQLite数据库"></a>SQLite数据库</h2><p>特点：<br>开源的关系型数据库<br>将整个数据库的表，索引，数据都存储在一个单一的.db文件中<br>不需要网络配置和管理<br>没有账户和密码<br>数据库访问依赖于文件所在的操作系统<br>和数据库建立连接<br> 执行sql语句，接收返回值<br> 关闭数据库连接<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;trade.db&#x27;</span>)</span><br><span class="line">SQL =<span class="string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span></span><br><span class="line">conn.execute(SQL)</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></p><h2 id="SQLite数据库操作"><a href="#SQLite数据库操作" class="headerlink" title="SQLite数据库操作"></a>SQLite数据库操作</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SQL= <span class="string">&#x27;&#x27;&#x27; drop table if exists stock&#x27;&#x27;&#x27;</span></span><br><span class="line">conn.execute(SQL)</span><br><span class="line">conn.commit()</span><br><span class="line">SQL=<span class="string">&#x27;&#x27;&#x27;create table stock (code char(8) not null,</span></span><br><span class="line"><span class="string">name char(10),price float, primary key(&quot;code&quot;))&#x27;&#x27;&#x27;</span></span><br><span class="line">conn.execute(SQL)</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><h3 id="查询记录"><a href="#查询记录" class="headerlink" title="查询记录"></a>查询记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SQL = <span class="string">&#x27;&#x27;&#x27;select title,link from info where title like &quot;东方%&quot; &#x27;&#x27;&#x27;</span></span><br><span class="line">alist = <span class="built_in">list</span>(conn.execute(SQL))</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><h3 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SQL =<span class="string">&#x27;&#x27;&#x27;insert into stock(code,name,price)</span></span><br><span class="line"><span class="string">values(&#x27;2349&#x27;,&#x27;精华制药&#x27;,10.49)&#x27;&#x27;&#x27;</span></span><br><span class="line">SQL = <span class="string">&#x27;&#x27;&#x27;insert into stock(code,name,price) values(%d,&#x27;%s&#x27;,%f)&#x27;&#x27;&#x27;</span> %(code,name,</span><br><span class="line">price)</span><br><span class="line">conn.execute(SQL)</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">info = <span class="built_in">tuple</span>(into)</span><br><span class="line">result.append(info)</span><br><span class="line">result = <span class="built_in">list</span>(<span class="built_in">set</span>(result))</span><br><span class="line">SQL = <span class="string">&#x27;&#x27;&#x27;insert into stock(code,name,price)values(?,?,?)&#x27;&#x27;&#x27;</span></span><br><span class="line">conn.exexcutemany(SQL,result)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL = <span class="string">&#x27;&#x27;&#x27;update stock set price=11.5 where code = &#x27;2349&#x27; &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL = <span class="string">&#x27;&#x27;&#x27;delete from stock where code =&#x27;2349&#x27; &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL = <span class="string">&#x27;&#x27;&#x27;drop table stock&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="数据库操作实例"><a href="#数据库操作实例" class="headerlink" title="数据库操作实例"></a>数据库操作实例</h2><p>实例1<br>爬虫并存入数据库<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3,re,requests</span><br><span class="line">url = <span class="string">&#x27;https://www.eastmoney.com/&#x27;</span></span><br><span class="line">html = requests.get(url)</span><br><span class="line">html.encoding = html.apparent_encoding</span><br><span class="line">data = html.text</span><br><span class="line">reg = <span class="string">r&#x27;&lt;a href=&quot;(https://.*?)&quot;.*?&gt;(.*?)&lt;/a&gt;&#x27;</span></span><br><span class="line">urls = re.findall(reg,data)</span><br><span class="line">conn = sqlite3.connect(<span class="string">&quot;web.db&quot;</span>)</span><br><span class="line">SQL = <span class="string">&quot;drop table if exists info&quot;</span></span><br><span class="line">conn.execute(SQL)</span><br><span class="line">conn.commit()</span><br><span class="line">SQL = <span class="string">&#x27;&#x27;&#x27;create table info(code integer not null,link char(30),title char(30),primary key(&#x27;code&#x27;))&#x27;&#x27;&#x27;</span></span><br><span class="line">conn.execute(SQL)</span><br><span class="line">conn.commit()</span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    SQL =<span class="string">&#x27;&#x27;&#x27;insert into info(code,link,title) values(%d,&#x27;%s&#x27;,&#x27;%s&#x27;)&#x27;&#x27;&#x27;</span>%(count,url[<span class="number">0</span>],url[<span class="number">1</span>])</span><br><span class="line">    conn.execute(SQL)</span><br><span class="line">    conn.commit()</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><br>实例2 百度多公司多页面爬取<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re,requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">baidu</span>(<span class="params">company,page</span>):</span><br><span class="line">    num = page*<span class="number">10</span></span><br><span class="line">    url = <span class="string">&quot;http://www.baidu.com/s?tn=news&amp;rtt=4&amp;wd=&quot;</span>+company+<span class="string">&#x27;&amp;pn=&#x27;</span>+<span class="built_in">str</span>(num)</span><br><span class="line">    html = requests.get(url).text</span><br><span class="line">    <span class="comment"># 链接</span></span><br><span class="line">    reg_href =<span class="string">&#x27;&lt;h3 class=&quot;news-title_1YtI1 &quot;&gt;&lt;a href=&quot;(.*?)&quot;&#x27;</span></span><br><span class="line">    href = re.findall(reg_href,html,re.S)</span><br><span class="line">    <span class="comment"># 标题</span></span><br><span class="line">    reg_title =<span class="string">&#x27;&lt;h3 class=&quot;news-title_1YtI1 &quot;&gt;.*?&gt;&lt;!--s-text--&gt;(.*?)&lt;!--/s-text--&gt;&lt;/a&gt;&#x27;</span></span><br><span class="line">    title = re.findall(reg_title,html,re.S)</span><br><span class="line">    reg_date =<span class="string">&#x27;&lt;span class=&quot;c-color-gray2 c-font-normal c-gap-right-xsmall&quot;.*?&gt;(.*?)&lt;/span&gt;&#x27;</span></span><br><span class="line">    date = re.findall(reg_date,html,re.S)</span><br><span class="line">    reg_src = <span class="string">&#x27;&lt;span class=&quot;c-color-gray&quot;.*?&gt;(.*?)&lt;/span&gt;&#x27;</span></span><br><span class="line">    src = re.findall(reg_src,html,re.S)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(date)):</span><br><span class="line">        title[i]=title[i].strip()</span><br><span class="line">        title[i] = re.sub(<span class="string">&#x27;&lt;.*?&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,title[i])</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;小时&#x27;</span><span class="keyword">in</span> date[i]) <span class="keyword">or</span> (<span class="string">&#x27;分钟&#x27;</span><span class="keyword">in</span> date[i]):</span><br><span class="line">            date[i]=time.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(i+<span class="number">1</span>)+<span class="string">&#x27;.&#x27;</span>+title[i]+<span class="string">&#x27;(&#x27;</span>+date[i]+src[i]+<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(href[i])</span><br><span class="line">companys = [<span class="string">&#x27;阿里巴巴&#x27;</span>, <span class="string">&#x27;万科集团&#x27;</span>, <span class="string">&#x27;百度集团&#x27;</span>, <span class="string">&#x27;腾讯&#x27;</span>, <span class="string">&#x27;京东&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> com <span class="keyword">in</span> companys:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        baidu(com,i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;爬取&quot;</span>+com+<span class="built_in">str</span>(i+<span class="number">1</span>)+<span class="string">&quot;页成功&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p>错误处理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">&lt;语句块<span class="number">1</span>&gt;</span><br><span class="line"><span class="keyword">except</span> &lt;异常类型<span class="number">1</span>&gt;:</span><br><span class="line">&lt;语句块<span class="number">2</span>&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">&lt;语句块<span class="number">3</span>&gt;</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">&lt;句块<span class="number">4</span>&gt;</span><br><span class="line"><span class="comment"># finally，无论有没有报错都执行，</span></span><br><span class="line"><span class="comment"># except可以多个</span></span><br></pre></td></tr></table></figure><br>案例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    filename = <span class="built_in">input</span>(<span class="string">&quot;please input filename:&quot;</span>)</span><br><span class="line">    fobj = <span class="built_in">open</span>(filename,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fobj:</span><br><span class="line">        line = line.strip()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有这个文件&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    fobj.close()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;程序执行完毕&quot;</span>)</span><br><span class="line"></span><br><span class="line">companys = [<span class="string">&#x27;阿里巴巴&#x27;</span>, <span class="string">&#x27;万科集团&#x27;</span>, <span class="string">&#x27;腾讯&#x27;</span>, <span class="string">&#x27;京东&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> companys:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">baidu(each,i)</span><br><span class="line"><span class="built_in">print</span>(each + <span class="string">&#x27;第&#x27;</span> + <span class="built_in">str</span>(i+<span class="number">1</span>) + <span class="string">&#x27;页爬取成功&#x27;</span>)</span><br><span class="line">time. sleep(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(each+<span class="string">&#x27;爬虫失败！ &#x27;</span>))</span><br></pre></td></tr></table></figure></p><h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><p>关系型数据库，在WEB方面十分流行<br>连接<br>1 创建connection<br>2 获取cursor<br>3 执行SQL语句<br>4 关闭cursor<br>5 关闭connection</p><h2 id="MySQL数据库操作"><a href="#MySQL数据库操作" class="headerlink" title="MySQL数据库操作"></a>MySQL数据库操作</h2><h3 id="MySQL创建表"><a href="#MySQL创建表" class="headerlink" title="MySQL创建表"></a>MySQL创建表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">conn = pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>,user=<span class="string">&quot;root&quot;</span>,password=<span class="string">&quot;1234&quot;</span>,</span><br><span class="line">                       database=<span class="string">&quot;pymysql&quot;</span>)</span><br><span class="line">cur = conn.cursor()</span><br><span class="line">sql = <span class="string">&quot;drop table if exists staff&quot;</span></span><br><span class="line">cur.execute(sql)</span><br><span class="line">sql = <span class="string">&#x27;&#x27;&#x27;create table staff(number char(10) primary key,</span></span><br><span class="line"><span class="string">                            name char(20),</span></span><br><span class="line"><span class="string">                            age int,</span></span><br><span class="line"><span class="string">                            sex char(1),</span></span><br><span class="line"><span class="string">                            salary float)&#x27;&#x27;&#x27;</span></span><br><span class="line">cur.execute(sql)</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="MySQL中插入数据"><a href="#MySQL中插入数据" class="headerlink" title="MySQL中插入数据"></a>MySQL中插入数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL中插入数据</span></span><br><span class="line">sql = <span class="string">&#x27;&#x27;&#x27;insert into staff(number,name,age,sex,salary)</span></span><br><span class="line"><span class="string">        values(&#x27;1001&#x27;,&#x27;张三&#x27;,28,&#x27;M&#x27;,7078.5)&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    conn.rollback()</span><br><span class="line">cur.close()</span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入多条数据</span></span><br><span class="line">aList=[(<span class="string">&quot;1002&quot;</span>,<span class="string">&quot;Mike&quot;</span>,<span class="number">35</span>,<span class="string">&quot;M&quot;</span>,<span class="number">10000</span>),(<span class="string">&quot;1003&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="number">45</span>,<span class="string">&quot;F&quot;</span>,<span class="number">12000</span>)]</span><br><span class="line">sql=<span class="string">&#x27;&#x27;&#x27;insert into staff(number,name,age,sex,salary)</span></span><br><span class="line"><span class="string">        values(%s,%s,%s,%s,%s)&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cur.executemany(sql,aList)</span><br><span class="line">    conn.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    conn.rollback()</span><br></pre></td></tr></table></figure><h3 id="MySQL查找"><a href="#MySQL查找" class="headerlink" title="MySQL查找"></a>MySQL查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cond = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入工资:&quot;</span>))</span><br><span class="line">sql = <span class="string">&#x27;&#x27;&#x27;select * from staff where salary &gt;%f&#x27;&#x27;&#x27;</span>%cond</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    res = cur.fetchall() <span class="comment"># 获取所有记录列表</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> res:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;number=%s,name=%s,age=%d,sex=%s,salary=%f&quot;</span> % \</span><br><span class="line">              (row[<span class="number">0</span>], row[<span class="number">1</span>], row[<span class="number">2</span>], row[<span class="number">3</span>], row[<span class="number">4</span>]))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="MySQL更新"><a href="#MySQL更新" class="headerlink" title="MySQL更新"></a>MySQL更新</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sql = <span class="string">&quot;update staff set age = age + 10 where sex = &#x27;%c&#x27; &quot;</span>%<span class="string">&#x27;M&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    conn.rollback()</span><br></pre></td></tr></table></figure><h3 id="MySQL删除"><a href="#MySQL删除" class="headerlink" title="MySQL删除"></a>MySQL删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sql =<span class="string">&quot;delete from staff where age&gt;&#x27;%d&#x27;&quot;</span>%<span class="number">30</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cur.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    conn.rollback()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2024/04/10/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/04/10/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="在线编辑器"><a href="#在线编辑器" class="headerlink" title="在线编辑器"></a>在线编辑器</h2><p>可以使用<a href="https://markdown.com.cn/editor/">在线编辑器</a>，边学边应用，同时Markdown可以内嵌HTML标签</p><h2 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#  表示h1</span></span><br><span class="line"><span class="section">## 表示h2，以此类推，最多6个，即h1~h6</span></span><br><span class="line"></span><br><span class="line">可选语法</span><br><span class="line">在文本下方添加任意数量的 == 号来标识一级标题，或者 -- 号来标识二级标题</span><br><span class="line"><span class="section">h1</span></span><br><span class="line"><span class="section">========</span></span><br><span class="line"></span><br><span class="line"><span class="section">h2</span></span><br><span class="line"><span class="section">--------</span></span><br><span class="line"></span><br><span class="line">最佳实践</span><br><span class="line"><span class="section"># 与标题之间进行间隔</span></span><br></pre></td></tr></table></figure><h2 id="段落语法"><a href="#段落语法" class="headerlink" title="段落语法"></a>段落语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用空白行将一行或多行文本进行分割，每一部分作为一个段落</span><br><span class="line">段落1，你好</span><br><span class="line"></span><br><span class="line">段落2，hello</span><br><span class="line"></span><br><span class="line">最佳实践</span><br><span class="line">不用空格和制表符来缩进段落</span><br></pre></td></tr></table></figure><h2 id="换行语法"><a href="#换行语法" class="headerlink" title="换行语法"></a>换行语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行<span class="language-xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">粗体 使用<span class="strong">**bold text**</span>或者<span class="strong">__bold text__</span></span><br><span class="line">如果要在单词的中间部分加粗，使用love<span class="strong">**is**</span>bold而不是love<span class="strong">__is__</span>bold</span><br><span class="line"></span><br><span class="line">斜体 使用<span class="emphasis">*italic*</span>,或者<span class="emphasis">_italic_</span></span><br><span class="line"></span><br><span class="line">最佳实践，</span><br><span class="line">同时使用斜体和粗体</span><br><span class="line">在单词或短语的前后各添加三个星号或下划线，<span class="strong">**<span class="emphasis">*bold italic*</span>**</span></span><br></pre></td></tr></table></figure><h2 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">在段落前添加&gt; 符号来创建块引用</span><br><span class="line"><span class="quote">&gt; 块应用实例</span></span><br><span class="line"></span><br><span class="line">多个段落的块引用</span><br><span class="line"><span class="quote">&gt; 块应用实例1</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; 块应用实例2</span></span><br><span class="line"></span><br><span class="line">嵌套块引用</span><br><span class="line">在要嵌套的段落前添加一个&gt;&gt; 符号</span><br><span class="line"><span class="quote">&gt; 块应用实例1</span></span><br><span class="line"><span class="quote">&gt; 块应用实例2</span></span><br><span class="line">&gt;&gt; 块应用实例3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">带有其他元素的块引用</span><br><span class="line"><span class="quote">&gt; ### 标题h3</span></span><br><span class="line"><span class="quote">&gt; - 实例li</span></span><br><span class="line"><span class="quote">&gt; - 实例li2</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt;  <span class="emphasis">*italic*</span> is <span class="strong">**bold**</span></span></span><br></pre></td></tr></table></figure><h2 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">有序列表</span><br><span class="line">创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。</span><br><span class="line"><span class="bullet">1.</span> First item</span><br><span class="line"><span class="bullet">2.</span> Second item</span><br><span class="line"><span class="bullet">3.</span> Third item</span><br><span class="line"></span><br><span class="line">无序列表</span><br><span class="line">创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (<span class="emphasis">*) 或加号 (+)</span></span><br><span class="line"><span class="emphasis">- First item</span></span><br><span class="line"><span class="emphasis">- Second item</span></span><br><span class="line"><span class="emphasis">- Third item</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">缩进一个或多个列表项可创建嵌套列表。</span></span><br><span class="line"><span class="emphasis">- First item</span></span><br><span class="line"><span class="emphasis">- Second item</span></span><br><span class="line"><span class="emphasis">- Third item</span></span><br><span class="line"><span class="emphasis">    - Indented item</span></span><br><span class="line"><span class="emphasis">    - Indented item</span></span><br><span class="line"><span class="emphasis">- Fourth ite</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">在列表中嵌套其他元素</span></span><br><span class="line"><span class="emphasis">在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符</span></span><br><span class="line"><span class="emphasis">- First item</span></span><br><span class="line"><span class="emphasis">  </span></span><br><span class="line"><span class="emphasis">添加一个段落</span></span><br><span class="line"><span class="emphasis">&gt; 引用块</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">- Second item</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">代码块</span></span><br><span class="line"><span class="emphasis">代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符。</span></span><br><span class="line"><span class="emphasis">1.  First item</span></span><br><span class="line"><span class="emphasis">2.  code</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">        <span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">          <span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">            <span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span>Test<span class="language-xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">          <span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">3.  Second item</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">图片</span></span><br><span class="line"><span class="emphasis">1.  Open the file containing the Linux mascot.</span></span><br><span class="line"><span class="emphasis">2.  Marvel at its beauty.</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">    ![<span class="string">Tux, the Linux mascot</span>](<span class="link">/assets/images/tux.png</span>)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">3.  Close the file.</span></span><br></pre></td></tr></table></figure><h2 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">将单词或短语表示为代码，请将其包裹在反引号 (`) 中。</span><br><span class="line">请输入<span class="code">`pip install`</span></span><br><span class="line"></span><br><span class="line">如果要表示为代码部分包含反引号，将代码包裹在双反引号(``)中。</span><br><span class="line"><span class="code">``请输入`</span>pip install<span class="code">` `</span>`</span><br><span class="line"></span><br><span class="line">代码块</span><br><span class="line">要创建代码块，请将代码块的每一行缩进至少四个空格或一个制表符。</span><br><span class="line"><span class="code">    &lt;html&gt;</span></span><br><span class="line"><span class="code">      &lt;head&gt;</span></span><br><span class="line"><span class="code">      &lt;/head&gt;</span></span><br><span class="line"><span class="code">    &lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分割线语法"><a href="#分割线语法" class="headerlink" title="分割线语法"></a>分割线语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">创建分隔线，请在单独一行上使用三个或多个星号 (<span class="strong">**<span class="emphasis">*)、破折号 (---) 或下划线 (___) ，并且不能包含其他内容。</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">最佳实践，在分割线的前后均添加空白行</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">---</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br></pre></td></tr></table></figure><h2 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">链接文本放在中括号内，链接地址放在后面的括号中，链接title可选</span><br><span class="line">超链接Markdown语法代码：[<span class="string">超链接显示名</span>](<span class="link">超链接地址 &quot;超链接title&quot;</span>)</span><br><span class="line"></span><br><span class="line">链接title是当鼠标悬停在链接上时会出现的文字</span><br><span class="line"></span><br><span class="line">网址和Email地址</span><br><span class="line">使用尖括号可以很方便地把URL或者email地址变成可点击的链接</span><br><span class="line"><span class="language-xml">&lt;https://markdown.com.cn&gt;</span></span><br><span class="line"><span class="language-xml">&lt;fake@example.com&gt;</span></span><br><span class="line"></span><br><span class="line">链接语法可搭配其他语法</span><br><span class="line">the <span class="strong">**[<span class="string">EFF</span>](<span class="link">https://eff.org</span>)**</span>.</span><br><span class="line">the <span class="emphasis">*[<span class="string">Markdown Guide</span>](<span class="link">https://www.markdownguide.org</span>)*</span>.</span><br><span class="line"> on [<span class="string">`code`</span>](<span class="link">https://tangwan16.cn</span>)</span><br><span class="line"></span><br><span class="line"> 引用类型链接</span><br><span class="line">  引用类型链接的第一部分 </span><br><span class="line"><span class="code">[显示为链接的文本][1]，后一个[]指向存储在文档其他位置的链接，可以是字母，数字</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">引用类型链接的第二部分，可以放在文档的任何位置</span></span><br><span class="line"><span class="code">[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle</span></span><br></pre></td></tr></table></figure><h2 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本</span><br><span class="line">![<span class="string">图片描述</span>](<span class="link">图片链接 &quot;图片鼠标悬浮名&quot;</span>)</span><br><span class="line"></span><br><span class="line">链接图片，给图片增加链接</span><br><span class="line">[<span class="string">![沙漠中的岩石图片</span>](<span class="link">/assets/img/shiprock.jpg &quot;Shiprock&quot;</span>)](<span class="link">https://markdown.com.cn</span>)</span><br></pre></td></tr></table></figure><h2 id="转义字符语法"><a href="#转义字符语法" class="headerlink" title="转义字符语法"></a>转义字符语法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ 。</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>使用三个或多个连字符（—-）创建每列的标题，并使用管道（|）分隔每列。您可以选择在表的任一端添加管道。可以使用<a href="https://www.tablesgenerator.com/markdown_tables">Markdown表格生成器</a> 生成表格<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">| Syntax      | Description |</span><br><span class="line">| ----------- | ----------- |</span><br><span class="line">| Header      | Title       |</span><br><span class="line">| Paragraph   | Text        |</span><br><span class="line"></span><br><span class="line">单元格宽度可以变化，下面的代码与上面相同</span><br><span class="line">| Syntax | Description |</span><br><span class="line">| --- | ----------- |</span><br><span class="line">| Header | Title |</span><br><span class="line">| Paragraph | Text |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对其方式设置</span><br><span class="line">分别为左对齐，居中对其，右对齐</span><br><span class="line">| :---        |    :----:   |          ---: |</span><br></pre></td></tr></table></figure></p><h2 id="围栏代码块"><a href="#围栏代码块" class="headerlink" title="围栏代码块"></a>围栏代码块</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">除了将行缩进四个空格或一个制表符来创建代码块，可以用<span class="code">``` ```</span>将代码块包裹</span><br><span class="line"><span class="code">```使用的语言名</span></span><br><span class="line"><span class="code">代码</span></span><br></pre></td></tr></table></figure><p>例如<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Smith&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 脚注</span><br><span class="line">当创建脚注时，带有脚注的上标数字会出现在您添加脚注参考的位置，以单击链接以跳至页面底部的脚注内容。脚注内容可以放在文章任何位置</span><br><span class="line">```markdown</span><br><span class="line">Here&#x27;s a simple footnote,[^1]</span><br><span class="line"></span><br><span class="line">[^1]: This is the first footnote.</span><br></pre></td></tr></table></figure></p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>在单词中心放置一条水平线来删除单词<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在要删除内容前后使用两个波浪号~~</span><br><span class="line">~~世界是平坦的。~~ 我们现在知道世界是圆的。</span><br></pre></td></tr></table></figure></p><h2 id="任务列表语法"><a href="#任务列表语法" class="headerlink" title="任务列表语法"></a>任务列表语法</h2><p>任务列表使您可以创建带有复选框的项目列表。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">要创建任务列表，请在任务列表项之前添加破折号-和方括号[ ]，并在[ ]前面加上空格。要选择一个复选框，请在方括号[x]之间添加 x 。</span><br><span class="line"><span class="bullet">-</span> [x] Write the press release</span><br><span class="line"><span class="bullet">-</span> [ ] Update the website</span><br><span class="line"><span class="bullet">-</span> [ ] Contact the media</span><br></pre></td></tr></table></figure></p><h2 id="自动网址链接"><a href="#自动网址链接" class="headerlink" title="自动网址链接"></a>自动网址链接</h2><p>会自动将URL转换为链接，如果要禁止自动URL链接，将URL表示为带反引号的代码来删除该链接。</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django学习</title>
      <link href="/2024/04/09/Django%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/04/09/Django%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="项目的创建与启动"><a href="#项目的创建与启动" class="headerlink" title="项目的创建与启动"></a>项目的创建与启动</h2><p>cmd输入命令创建项目(包含基本的项目框架),类似于vue<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject demo1</span><br></pre></td></tr></table></figure><br>创建后的项目结构<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">demo1/</span><br><span class="line">    manage.py             </span><br><span class="line">    bysms/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure><br>运行服务器<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 8080</span><br></pre></td></tr></table></figure></p><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>定义：django ORM（Object Relational Mapping，简称 ORM ）对象关系模型<br>作用：将python代码转化成为SQL语句，对各种数据库都提供很好的支持，MySQL、SQLite、Oracle，实现相同python代码，不同数据库操作语言，实现相同功能<br><img src="https://picmd.tangwan16.cn/posts/后端学习/django/2_1.png" alt=""><br>django 的ORM</p><ul><li>定义一张数据库的表 就是定义一个继承自 django.db.models.Model 的类</li><li>定义该表中的字段（列）， 就是定义该类里面的一些属性</li><li>类的方法就是对该表中数据的处理方法，包括 数据的增删改查</li></ul><p>好处：<br>将底层的sql语句，变成面向对象语言<br>更换数据库后，不需要更换数据库语言，更换项目下setting.py中的配置</p><h2 id="数据库的配置与迁移"><a href="#数据库的配置与迁移" class="headerlink" title="数据库的配置与迁移"></a>数据库的配置与迁移</h2><h3 id="配置默认的数据库形式-db-sqlite3"><a href="#配置默认的数据库形式-db-sqlite3" class="headerlink" title="配置默认的数据库形式 db.sqlite3"></a>配置默认的数据库形式 db.sqlite3</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;db.sqlite3&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建数据库<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><br>在 项目的根目录下面 生成一个配置文件中指定的数据库文件 db.sqlite3<br>db.sqlite3 是数据库文件，内容包括基本表，和app下model.py定义的类<br>sqlite数据库工具sqlitestudio <a href="https://sqlitestudio.pl/">https://sqlitestudio.pl/</a></p><h3 id="配置mysql数据库"><a href="#配置mysql数据库" class="headerlink" title="配置mysql数据库"></a>配置mysql数据库</h3><p>在项目的settings.py中找到DATABASES配置项，配置mysql<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123; </span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,    <span class="comment"># 数据库引擎</span></span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;tangwan16&#x27;</span>, <span class="comment"># 数据库名称</span></span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="comment"># 数据库地址，本机 ip 地址 127.0.0.1 </span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>, <span class="comment"># 端口 </span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,  <span class="comment"># 数据库用户名</span></span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;1234&#x27;</span>, <span class="comment"># 数据库密码</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在与 settings.py 同级目录下的 __init__.py 中引入模块和进行配置 </span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></p><h2 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h2><p>什么是项目app<br>一个项目app可以理解为一个功能模块，一个项目可以含有多个app，每个app相互独立<br>创建app目录命令<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startapp 功能模块名</span><br></pre></td></tr></table></figure></p><h2 id="路由表与路由子表"><a href="#路由表与路由子表" class="headerlink" title="路由表与路由子表"></a>路由表与路由子表</h2><h3 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h3><p>同时设置url路由，项目目录下的url.py，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="comment"># 别忘了导入 listorders 函数</span></span><br><span class="line"><span class="keyword">from</span> sales.views <span class="keyword">import</span> listorders</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 添加如下的路由记录</span></span><br><span class="line">    path(<span class="string">&#x27;sales/orders/&#x27;</span>, listorders),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>就是说当前端过来的请求 url地址 是 /sales/orders/ (注意：最后的一个斜杠不能省略) , 就由 views.py 里面的函数 listorders 来处理。</p><h3 id="路由子表"><a href="#路由子表" class="headerlink" title="路由子表"></a>路由子表</h3><p>当项目目录下的url.py中访问url条目过多时，将不同的路由记录按照功能分拆到不同的 <strong>url路由子表</strong> 文件中。<br>比如，这里我们可以把 访问 的 url 凡是 以 sales 开头的全部都 由 sales app目录下面的 子路由文件 urls.py 处理<br>app中的url.py  sales\urls.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;orders/&#x27;</span>, views.listorders),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>项目中的url.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="comment"># 导入一个include函数</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> sales.views <span class="keyword">import</span> listorders</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    <span class="comment"># 凡是 url 以 sales/  开头的，</span></span><br><span class="line">    <span class="comment"># 都根据 sales.urls 里面的 子路由表进行路由</span></span><br><span class="line">    path(<span class="string">&#x27;sales/&#x27;</span>, include(<span class="string">&#x27;sales.urls&#x27;</span>)),</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>注意这时，会从请求url中去掉 前面主路由文件 已经匹配上的部分（这里是 sales/ ）, 将剩余的部分 （这里是 orders/ ）去子路由文件中查看是否有匹配的路由项。</p><h2 id="定义数据库"><a href="#定义数据库" class="headerlink" title="定义数据库"></a>定义数据库</h2><p>创建一个名为common的应用目录， 里面存放我们项目需要的一些公共的表的定义。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp common</span><br></pre></td></tr></table></figure><br>在app下model.py中定义我们需要的表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    num = models.FloatField(null=<span class="literal">True</span>)</span><br><span class="line">job_number = models.IntegerField(null=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 包含年月日时分秒</span></span><br><span class="line">createtime = models.DateTimeField(null=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 包含年月日</span></span><br><span class="line">createdate = models.DateField(null=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br>创建数据库表<br>首先我们需要告诉Django： 我们的 common 应用中 需要你关注， 因为其中包含了 数据库Model的定义。<br>配置项目下的settings.py下  INSTALLED_APPS 配置项<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="comment"># 加入下面这行</span></span><br><span class="line">    <span class="string">&#x27;common.apps.CommonConfig&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>‘common.apps.CommonConfig’ 告诉 Django ， CommonConfig 是 common/apps.py 文件中定义的一个应用配置的类。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CommonConfig</span>(<span class="title class_ inherited__">AppConfig</span>):</span><br><span class="line">    name = <span class="string">&#x27;common&#x27;</span></span><br></pre></td></tr></table></figure><br>更新数据库<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations common</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><br>自此数据库文件中添加Customer表<br>注意：我们创建的表默认的逐渐是id（即使类中没有id属性）<br>当我们在已经创建表之后,修改model.py添加属性，执行上述步骤，可能会要求指定默认值，或者允许为空</p><h2 id="Django-Admin-管理数据"><a href="#Django-Admin-管理数据" class="headerlink" title="Django Admin 管理数据"></a>Django Admin 管理数据</h2><p>Django提供了一个管理员操作界面可以方便的 添加、修改、删除你定义的 model 表数据。<br>首先，我们需要创建 一个超级管理员账号。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><br>要求输入用户名和密码,密码至少八位<br>现在就可以访问 <a href="http://127.0.0.1/admin/">http://127.0.0.1/admin/</a> ，输入刚才注册的用户密码登录。<br>提供ui界面来定义model表数据<br>如果你是中文的操作系统，想使用中文的admin界面，应该在配置文件 settings.py 中 MIDDLEWARE 最后加入如下配置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># admin界面语言本地化</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.locale.LocaleMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="添加处理请求模块和url路由"><a href="#添加处理请求模块和url路由" class="headerlink" title="添加处理请求模块和url路由"></a>添加处理请求模块和url路由</h2><p>不同的操作请求，使用不同的 HTTP 请求方法 ，比如 添加是POST， 查询是 GET， 修改是 PUT， 删除是 DELETE。<br>但是注意：Django 的 url路由功能 <strong>不支持</strong> 根据 HTTP 请求的方法 和请求体里面的参数 进行路由。<br>以下是错误代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;customers/&#x27;</span>, <span class="string">&#x27;app.views.list_customer&#x27;</span>, method=<span class="string">&#x27;get&#x27;</span>),</span><br><span class="line">path(<span class="string">&#x27;customers/&#x27;</span>, <span class="string">&#x27;app.views.add_customer&#x27;</span>,  method=<span class="string">&#x27;post&#x27;</span>),</span><br></pre></td></tr></table></figure></p><h3 id="使用dispatcher分发函数进行处理"><a href="#使用dispatcher分发函数进行处理" class="headerlink" title="使用dispatcher分发函数进行处理"></a>使用dispatcher分发函数进行处理</h3><p>自己编写一个函数， 来 根据 http请求的类型 和请求体里面的参数 分发（或者说路由）给 不同的函数进行处理。<br>可以 在 customer.py 中定义如下 dispatcher 函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dispatcher</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 将请求参数统一放入request 的 params 属性中，方便后续处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># GET请求 参数在url中，同过request 对象的 GET属性获取</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        request.params = request.GET</span><br><span class="line"></span><br><span class="line">    <span class="comment"># POST/PUT/DELETE 请求 参数 从 request 对象的 body 属性中获取</span></span><br><span class="line">    <span class="keyword">elif</span> request.method <span class="keyword">in</span> [<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;PUT&#x27;</span>,<span class="string">&#x27;DELETE&#x27;</span>]:</span><br><span class="line">        <span class="comment"># 根据接口，POST/PUT/DELETE 请求的消息体都是 json格式</span></span><br><span class="line">        request.params = json.loads(request.body)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 根据不同的action分派给不同的函数进行处理</span></span><br><span class="line">    action = request.params[<span class="string">&#x27;action&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> action == <span class="string">&#x27;list_customer&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> listcustomers(request)</span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">&#x27;add_customer&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> addcustomer(request)</span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">&#x27;modify_customer&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> modifycustomer(request)</span><br><span class="line">    <span class="keyword">elif</span> action == <span class="string">&#x27;del_customer&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> deletecustomer(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;不支持该类型http请求&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><br>该函数 把 请求消息中的参数统一放入到 request请求对象的params 属性中。<br>params 属性 被 做成一个 dict 类型 ， 方便后面的处理函数来获取消息中的参数。<br>比如 action 参数 为 ‘add_customer’ 的 请求 就由 addcustomer 函数 进行处理<br>app下的url.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> mgr <span class="keyword">import</span> customer</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;customers&#x27;</span>, customer.dispatcher),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>凡是 API 请求url为 /api/mgr/customers 的，都交由 我们上面定义的dispatch函数进行分派处理</p><h3 id="使用类中的参数方法"><a href="#使用类中的参数方法" class="headerlink" title="使用类中的参数方法"></a>使用类中的参数方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> = [</span><br><span class="line">    path(<span class="string">&quot;recognize/&quot;</span>, dvadmin.face.views.face_recognize_url.as_view()),  <span class="comment"># 人脸识别接口</span></span><br><span class="line">    path(<span class="string">&quot;entry/&quot;</span>, dvadmin.face.views.face_entry_url.as_view()),  <span class="comment"># 人脸录入接口</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"></span><br><span class="line"><span class="comment"># 人脸录入接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">face_entry_url</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,request</span>):</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;</span><br><span class="line"><span class="string">&#x27;code&#x27;</span>: <span class="number">2000</span>,</span><br><span class="line"><span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;模型训练失败&quot;</span>,</span><br><span class="line"><span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># 人脸姓名</span></span><br><span class="line">        name = request.data.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;</span><br><span class="line"><span class="string">&#x27;code&#x27;</span>: <span class="number">2000</span>,</span><br><span class="line"><span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;模型训练失败&quot;</span>,</span><br><span class="line"><span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="临时取消CSRF校验"><a href="#临时取消CSRF校验" class="headerlink" title="临时取消CSRF校验"></a>临时取消CSRF校验</h2><p>项目/settings.py 中 MIDDLEWARE 配置项 里 注释掉’django.middleware.csrf.CsrfViewMiddleware’ 即可。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="返回特定的数据格式"><a href="#返回特定的数据格式" class="headerlink" title="返回特定的数据格式"></a>返回特定的数据格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;address&quot;</span>: <span class="string">&quot;江苏省常州武进市白云街44号&quot;</span>,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;武进市 袁腾飞&quot;</span>,</span><br><span class="line">            <span class="string">&quot;phonenumber&quot;</span>: <span class="string">&quot;13886666666&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;address&quot;</span>: <span class="string">&quot;北京海淀区&quot;</span>,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;北京海淀区代理 蔡国庆&quot;</span>,</span><br><span class="line">            <span class="string">&quot;phonenumber&quot;</span>: <span class="string">&quot;13990123456&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]              </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 Customer </span></span><br><span class="line"><span class="keyword">from</span> common.models <span class="keyword">import</span> Customer</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listcustomers</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 返回一个 QuerySet 对象 ，包含所有的表记录</span></span><br><span class="line">    qs = Customer.objects.values()</span><br><span class="line">    <span class="comment"># 将 QuerySet 对象 转化为 list 类型</span></span><br><span class="line">    <span class="comment"># 否则不能 被 转化为 JSON 字符串</span></span><br><span class="line">    retlist = <span class="built_in">list</span>(qs)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;data&#x27;</span>: retlist&#125;)</span><br></pre></td></tr></table></figure><p>实现功能：浏览器访问 sales/customers/ ，我们的服务端就返回系统中所有的客户记录给浏览器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 Customer 对象定义</span></span><br><span class="line"><span class="keyword">from</span>  common.models <span class="keyword">import</span>  Customer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listcustomers</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 返回一个 QuerySet 对象 ，包含所有的表记录</span></span><br><span class="line">    <span class="comment"># 每条表记录都是是一个dict对象，</span></span><br><span class="line">    <span class="comment"># key 是字段名，value 是 字段值</span></span><br><span class="line"><span class="comment"># 通过objects这个模型管理器的all()获得所有数据行，相当于SQL中的SELECT * FROM</span></span><br><span class="line">    res = Customer.objects.values()</span><br><span class="line"></span><br><span class="line"><span class="comment"># filter相当于SQL中的WHERE，可设置条件过滤结果</span></span><br><span class="line">    res = Customer.objects.<span class="built_in">filter</span>(name=<span class="string">&quot;tangwan&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤条件可以有多个</span></span><br><span class="line">res = Customer.objects.<span class="built_in">filter</span>(phonenumber=ph,address=<span class="string">&#x27;安徽芜湖&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取单个对象</span></span><br><span class="line">    res = Test.objects.get(<span class="built_in">id</span>=<span class="number">1</span>) </span><br><span class="line"></span><br><span class="line">    <span class="comment">#数据排序,默认升序</span></span><br><span class="line">    res =Customer.objects.order_by(<span class="string">&quot;id&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 限制返回的数据，返回以id升序的前两条数据</span></span><br><span class="line">    res =Customer.objects.order_by(<span class="string">&#x27;id&#x27;</span>)[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(<span class="string">&#x27;data&#x27;</span>:res)</span><br></pre></td></tr></table></figure></p><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>前端提供的客户数据格式如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;action&quot;</span>:<span class="string">&quot;add_customer&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>:<span class="string">&quot;武汉市桥西医院&quot;</span>,</span><br><span class="line">        <span class="string">&quot;phonenumber&quot;</span>:<span class="string">&quot;13345679934&quot;</span>,</span><br><span class="line">        <span class="string">&quot;address&quot;</span>:<span class="string">&quot;武汉市桥西医院北路&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">addcustomer</span>(<span class="params">request</span>):</span><br><span class="line">    info    = request.params[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    <span class="comment"># 从请求消息中 获取要添加客户的信息</span></span><br><span class="line">    <span class="comment"># 并且插入到数据库中</span></span><br><span class="line">    <span class="comment"># 返回值 就是对应插入记录的对象 </span></span><br><span class="line">    record = Customer.objects.create(name=info[<span class="string">&#x27;name&#x27;</span>] ,</span><br><span class="line">                            phonenumber=info[<span class="string">&#x27;phonenumber&#x27;</span>] ,</span><br><span class="line">                            address=info[<span class="string">&#x27;address&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;data&#x27;</span>:record.<span class="built_in">id</span>&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>前端提供的数据格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;action&quot;</span>:<span class="string">&quot;modify_customer&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="string">&quot;newdata&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>:<span class="string">&quot;武汉市桥北医院&quot;</span>,</span><br><span class="line">        <span class="string">&quot;phonenumber&quot;</span>:<span class="string">&quot;13345678888&quot;</span>,</span><br><span class="line">        <span class="string">&quot;address&quot;</span>:<span class="string">&quot;武汉市桥北医院北路&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>修改数据可以使用 save() 或 update():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">modifycustomer</span>(<span class="params">request</span>):</span><br><span class="line"><span class="comment"># 修改其中一个id=1的name字段，再save，相当于SQL中的UPDATE</span></span><br><span class="line">    test1 = Customer.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    test1.name = <span class="string">&#x27;Google&#x27;</span></span><br><span class="line">    test1.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外一种方式</span></span><br><span class="line">    Customer.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>).update(name=<span class="string">&#x27;Google&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改所有的列</span></span><br><span class="line">    Test.objects.<span class="built_in">all</span>().update(name=<span class="string">&#x27;Google&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求消息中 获取修改客户的信息</span></span><br><span class="line">    <span class="comment"># 找到该客户，并且进行修改操作</span></span><br><span class="line"></span><br><span class="line">    customerid = request.params[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">    newdata    = request.params[<span class="string">&#x27;newdata&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 根据 id 从数据库中找到相应的客户记录</span></span><br><span class="line">        customer = Customer.objects.get(<span class="built_in">id</span>=customerid)</span><br><span class="line">    <span class="keyword">except</span> Customer.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span>  &#123;</span><br><span class="line">                <span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">&#x27;msg&#x27;</span>: <span class="string">f&#x27;id 为`<span class="subst">&#123;customerid&#125;</span>`的客户不存在&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span>  newdata:</span><br><span class="line">        customer.name = newdata[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;phonenumber&#x27;</span> <span class="keyword">in</span>  newdata:</span><br><span class="line">        customer.phonenumber = newdata[<span class="string">&#x27;phonenumber&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;address&#x27;</span> <span class="keyword">in</span>  newdata:</span><br><span class="line">        customer.address = newdata[<span class="string">&#x27;address&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注意，一定要执行save才能将修改信息保存到数据库</span></span><br><span class="line">    customer.save()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;更新数据成功&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>前段提供的数据格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;action&quot;</span>:<span class="string">&quot;del_customer&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">deletecustomer</span>(<span class="params">request</span>):</span><br><span class="line">    customerid = request.params[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line"><span class="comment"># 根据 id 从数据库中找到相应的客户记录</span></span><br><span class="line">customer = Customer.objects.get(<span class="built_in">id</span>=customerid)</span><br><span class="line">    <span class="comment"># delete 方法就将该记录从数据库中删除了</span></span><br><span class="line">    customer.delete()</span><br><span class="line"><span class="comment"># 另外一种方式</span></span><br><span class="line">    Customer.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=customerid).delete()</span><br><span class="line"><span class="comment"># 删除所有数据</span></span><br><span class="line">    Customer.objects.<span class="built_in">all</span>().delete()</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;msg&#x27;</span>: <span class="string">&quot;删除成功&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="数据库表的关联"><a href="#数据库表的关联" class="headerlink" title="数据库表的关联"></a>数据库表的关联</h2><p>常见的3种关联关系：一对多，一对一，多对多</p><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><p>表之间 一对多 的关系，就是 外键 关联关系<br>如果一个表中 的 某个字段是外键，那就意味着这外键字段的记录的取值，只能是它关联表的某个记录的主键的值。<br>我们定义表的 Model类的时候，如果没有指定主键字段，migrate 的时候 Django 会为该Model对应的数据库表自动生成一个id字段，作为主键。<br>Django中定义外键 的方法就是 Model类的该属性字段 值为 ForeignKey 对象，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>(models.Model):</span><br><span class="line">    <span class="comment"># 订单名</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">200</span>,null=<span class="literal">True</span>,blank=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 创建日期</span></span><br><span class="line">    create_date = models.DateTimeField(default=datetime.datetime.now)</span><br><span class="line">    <span class="comment"># 客户</span></span><br><span class="line">    customer = models.ForeignKey(Customer,on_delete=models.PROTECT)</span><br></pre></td></tr></table></figure><br> customer 字段 是外键， 指向 Customer 类。 意思就是告诉Django： Order表的 customer 字段 指向 Customer表的主键 的一个外键。<br>另外一个参数 <strong>on_delete</strong> 指定了 当我们想 删除 外键指向的主键 记录时， 系统的行为。<br>比如 我们要删除客户记录， 那么 Order表中 对应这个客户的订单记录 该如何处理呢？</p><ul><li>CASCADE</li></ul><p>删除主键记录和 相应的外键表记录。<br>比如，我们要删除客户张三，在删除了客户表中张三记录同时，也删除Order表中所有这个张三的订单记录</p><ul><li>PROTECT</li></ul><p>禁止删除记录。<br>比如，我们要删除客户张三，如果Order表中有张三的订单记录，Django系统 就会抛出ProtectedError类型的异常，当然也就禁止删除 客户记录和相关的订单记录了。<br>除非我们将Order表中所有张三的订单记录都先删除掉，才能删除该客户表中的张三记录。</p><ul><li>SET_NULL</li></ul><p>删除主键记录，并且将外键记录中外键字段的值置为null。 当然前提是外键字段要设置为值允许是null。<br>比如，我们要删除客户张三时，在删除了客户张三记录同时，会将Order表里面所有的 张三记录里面的customer字段值置为 null。 但是上面我们并没有设置 customer 字段有 null=True 的参数设置，所以，是不能取值为 SET_NULL的。<br>注意： 外键字段，实际在数据库表中的 字段名， 是 Django ForeignKey 定义 字段名加上后缀 _id 。<br>比如这里，在执行了 migrate 命令更新数据库后， customer 这个外键字段实际上在 数据库表中的字段名 是 customer_id</p><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><p>Django 中 用 OneToOneField 对象 实现 一对一 的关系，如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(models.Model):</span><br><span class="line">    <span class="comment"># 姓名</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># 班级</span></span><br><span class="line">    classname = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># 描述</span></span><br><span class="line">    desc = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContactAddress</span>(models.Model):</span><br><span class="line">    <span class="comment"># 一对一 对应学生 </span></span><br><span class="line">    student = models.OneToOneField(Student, on_delete=models.PROTECT)</span><br><span class="line">    <span class="comment"># 家庭</span></span><br><span class="line">    homeaddress = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># 电话号码</span></span><br><span class="line">    phone = models.CharField(max_length=<span class="number">200</span>)</span><br></pre></td></tr></table></figure><br>Django发现这样一对一定义，它会在migrate的时候，在数据库中定义该字段为外键的同时， 加上 unique=True 约束，表示在此表中，所有记录的该字段 取值必须唯一，不能重复。</p><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p>Django是通过 ManyToManyField 对象 表示 多对多的关系的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>(models.Model):</span><br><span class="line">    <span class="comment"># 订单名</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">200</span>,null=<span class="literal">True</span>,blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建日期</span></span><br><span class="line">    create_date = models.DateTimeField(default=datetime.datetime.now)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 客户</span></span><br><span class="line">    customer = models.ForeignKey(Customer,on_delete=models.PROTECT)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 订单购买的药品，和Medicine表是多对多 的关系</span></span><br><span class="line">    medicines = models.ManyToManyField(Medicine, through=<span class="string">&#x27;OrderMedicine&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrderMedicine</span>(models.Model):</span><br><span class="line">    order = models.ForeignKey(Order, on_delete=models.PROTECT)</span><br><span class="line">    medicine = models.ForeignKey(Medicine, on_delete=models.PROTECT)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 订单中药品的数量</span></span><br><span class="line">    amount = models.PositiveIntegerField()</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">medicines = models.ManyToManyField(Medicine, through=<span class="string">&#x27;OrderMedicine&#x27;</span>)</span><br></pre></td></tr></table></figure><br>指定Order表和 Medicine 表 的多对多关系， 其实Order表中并不会产生一个 叫 medicines 的字段。<br>Order表和 Medicine 表 的多对多关系 是 <strong>通过另外一张表</strong>， 也就是 through 参数 指定的 OrderMedicine 表 来确定的。</p><h2 id="ORM关联表、事务"><a href="#ORM关联表、事务" class="headerlink" title="ORM关联表、事务"></a>ORM关联表、事务</h2><p>Django ORM 如何操作外键关联关系<br>models.py中定义这样的两个Model，对应两张表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 国家表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Country</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 学生表， country 字段是国家表的外键，形成一对多的关系</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(models.Model):</span><br><span class="line">    name    = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    grade   = models.PositiveSmallIntegerField()</span><br><span class="line">    country = models.ForeignKey(Country,</span><br><span class="line">                                on_delete=models.PROTECT)</span><br></pre></td></tr></table></figure><br>命令行为数据库添加数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure><br>直接启动Django命令行，输入代码。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> common.models <span class="keyword">import</span> *</span><br><span class="line">c1 = Country.objects.create(name=<span class="string">&#x27;中国&#x27;</span>)</span><br><span class="line">Student.objects.create(name=<span class="string">&#x27;白月&#x27;</span>, grade=<span class="number">1</span>, country=c1)</span><br></pre></td></tr></table></figure></p><h3 id="外键表字段访问"><a href="#外键表字段访问" class="headerlink" title="外键表字段访问"></a>外键表字段访问</h3><p>如果你已经获取了一个student对象，要得到他的国家名称只需这样<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s1 = Student.objects.get(name=<span class="string">&#x27;白月&#x27;</span>)</span><br><span class="line">s1.country.name</span><br></pre></td></tr></table></figure></p><h3 id="外键表字段过滤"><a href="#外键表字段过滤" class="headerlink" title="外键表字段过滤"></a>外键表字段过滤</h3><p>如果，我们要查找Student表中所有 一年级 学生<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.objects.<span class="built_in">filter</span>(grade=<span class="number">1</span>).values()</span><br></pre></td></tr></table></figure><br>如果现在，我们要查找Student表中所有 一年级中国 学生，该怎么写呢？<br>不能这么写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.objects.<span class="built_in">filter</span>(grade=<span class="number">1</span>,country=<span class="string">&#x27;中国&#x27;</span>)</span><br></pre></td></tr></table></figure><br>Student表中 country 并不是国家名称字符串字段，而是一个外键字段，其实是对应 Country 表中 id 字段 。<br>正确写法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cn = Country.objects.get(name=<span class="string">&#x27;中国&#x27;</span>)</span><br><span class="line">Student.objects.<span class="built_in">filter</span>(grade=<span class="number">1</span>,country_id=cn.<span class="built_in">id</span>).values()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cn = Country.objects.get(name=<span class="string">&#x27;中国&#x27;</span>)</span><br><span class="line">Student.objects.<span class="built_in">filter</span>(grade=<span class="number">1</span>,country=cn).values()</span><br></pre></td></tr></table></figure><br>简单写法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.objects.<span class="built_in">filter</span>(grade=<span class="number">1</span>,country__name=<span class="string">&#x27;中国&#x27;</span>).values()</span><br></pre></td></tr></table></figure><br>如果返回结果只需要 学生姓名 和 国家名两个字段，可以这样指定values内容<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.objects.<span class="built_in">filter</span>(grade=<span class="number">1</span>,country__name=<span class="string">&#x27;中国&#x27;</span>).values(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;country__name&#x27;</span>)</span><br></pre></td></tr></table></figure><br>使用 annotate 方法将获取的字段值进行重命名<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"><span class="comment"># annotate 可以将表字段进行别名处理</span></span><br><span class="line">Student.objects.annotate(</span><br><span class="line">    countryname=F(<span class="string">&#x27;country__name&#x27;</span>),</span><br><span class="line">    studentname=F(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    )\</span><br><span class="line">    .<span class="built_in">filter</span>(grade=<span class="number">1</span>,countryname=<span class="string">&#x27;中国&#x27;</span>).values(<span class="string">&#x27;studentname&#x27;</span>,<span class="string">&#x27;countryname&#x27;</span>)</span><br></pre></td></tr></table></figure></p><h3 id="外键表反向访问"><a href="#外键表反向访问" class="headerlink" title="外键表反向访问"></a>外键表反向访问</h3><p>Django ORM中，关联表 正向关系是通过表外键字段（或者多对多）表示， 比如前面例子中Student表的 country字段。<br>而反向关系，是通过 表Model名转化为小写 表示的。<br>比如，你已经获取了一个Country对象，如何获取到所有属于这个国家的学生呢？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cn = Country.objects.get(name=<span class="string">&#x27;中国&#x27;</span>)</span><br><span class="line">cn.student_set.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure><br>通过 表Model名转化为小写 ，后面加上一个 _set 来获取所有的反向外键关联对象</p><p>或者<br>在定义Model的时候，外键字段使用 related_name 参数，像这样<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 国家表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Country</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># country 字段是国家表的外键，形成一对多的关系</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(models.Model):</span><br><span class="line">    name    = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    grade   = models.PositiveSmallIntegerField()</span><br><span class="line">    country = models.ForeignKey(Country,</span><br><span class="line">                on_delete = models.PROTECT,</span><br><span class="line">                <span class="comment"># 指定反向访问的名字</span></span><br><span class="line">                related_name=<span class="string">&#x27;students&#x27;</span>)</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cn = Country.objects.get(name=<span class="string">&#x27;中国&#x27;</span>)</span><br><span class="line">cn.students.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure></p><h3 id="外键表反向过滤"><a href="#外键表反向过滤" class="headerlink" title="外键表反向过滤"></a>外键表反向过滤</h3><p>如果我们要获取所有 具有一年级学生 的国家名，该怎么写？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先获取所有的一年级学生id列表</span></span><br><span class="line">country_ids = Student.objects.<span class="built_in">filter</span>(grade=<span class="number">1</span>).values_list(<span class="string">&#x27;country&#x27;</span>, flat=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再通过id列表使用  id__in  过滤</span></span><br><span class="line">Country.objects.<span class="built_in">filter</span>(id__in=country_ids).values()</span><br></pre></td></tr></table></figure><br>但是这样同样存在 麻烦 和性能的问题。<br>Django ORM 可以这样写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Country.objects.<span class="built_in">filter</span>(students__grade=<span class="number">1</span>).values()</span><br></pre></td></tr></table></figure><br>注意， 因为，我们定义表的时候，用 related_name=’students’ 指定了反向关联名称 students ，所以这里是 students<strong>grade 。 使用了反向关联名字。<br>如果定义时，没有指定related_name， 则应该使用 表名转化为小写 ，就是这样<br>Country.objects.filter(student</strong>grade=1).values()<br>但是，我们发现，这种方式，会有重复的记录产生，可以使用 .distinct() 去重<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Country.objects.<span class="built_in">filter</span>(students__grade=<span class="number">1</span>).values().distinct()</span><br></pre></td></tr></table></figure></p><h2 id="事务、多对多记录添加"><a href="#事务、多对多记录添加" class="headerlink" title="事务、多对多记录添加"></a>事务、多对多记录添加</h2><p>添加一条订单记录，需要在2张表（Order 和 OrderMedicine ）中添加记录。这里就有个需要特别注意的地方， 两张表的插入，意味着我们要有两次数据库操作。<br>如果第一次插入成功， 而第二次插入失败， 就会出现 Order表中 把订单信息写了一部分，而OrderMedicine表中 该订单的信息 却没有写成功。<br>这是个大问题： 就会造成 这个处理 做了一半。<br>那么数据库中就会出现数据的不一致。术语叫 脏数据<br>熟悉数据库的同学就会知道， 我们应该用 数据库 的 事务 机制来解决这个问题。<br>把一批数据库操作放在 事务 中， 该事务中的任何一次数据库操作 失败了， 数据库系统就会让 整个事务就会发生回滚，撤销前面的操作， 数据库回滚到这事务操作之前的状态。<br>Django实现事务操作，可以使用 Django 的 with transaction.atomic()<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">addorder</span>(<span class="params">request</span>):</span><br><span class="line">    info  = request.params[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    <span class="comment"># 从请求消息中 获取要添加订单的信息</span></span><br><span class="line">    <span class="comment"># 并且插入到数据库中</span></span><br><span class="line">    <span class="keyword">with</span> transaction.atomic():</span><br><span class="line">        new_order = Order.objects.create(name=info[<span class="string">&#x27;name&#x27;</span>] ,</span><br><span class="line">                                         customer_id=info[<span class="string">&#x27;customerid&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        batch = [OrderMedicine(order_id=new_order.<span class="built_in">id</span>,medicine_id=mid,amount=<span class="number">1</span>)  </span><br><span class="line">                    <span class="keyword">for</span> mid <span class="keyword">in</span> info[<span class="string">&#x27;medicineids&#x27;</span>]]</span><br><span class="line"></span><br><span class="line">        <span class="comment">#  在多对多关系表中 添加了 多条关联记录</span></span><br><span class="line">        OrderMedicine.objects.bulk_create(batch)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">0</span>,<span class="string">&#x27;id&#x27;</span>:new_order.<span class="built_in">id</span>&#125;)</span><br></pre></td></tr></table></figure><br>with transaction.atomic() 下面 缩进部分的代码，对数据库的操作，就都是在 一个事务 中进行了。如果其中有任何一步数据操作失败了， 前面的操作都会回滚。</p><p>如果其中有任何一步数据操作失败了， 前面的操作都会回滚。、<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OrderMedicine.objects.create(order_id=new_order.<span class="built_in">id</span>,medicine_id=mid,amount=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><br>，一个订单可能会关联多个药品，也就是需要 插入 OrderMedicine 表中的数据 可能有很多条， 如果我们循环用<br>可以把多条数据的插入，放在一个SQL语句中完成， 这样会大大提高性能。<br>方法就是使用 bulk_create， 参数是一个包含所有 该表的 Model 对象的 列表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">batch = [OrderMedicine(order_id=new_order.<span class="built_in">id</span>,medicine_id=mid,amount=<span class="number">1</span>)  </span><br><span class="line">            <span class="keyword">for</span> mid <span class="keyword">in</span> info[<span class="string">&#x27;medicineids&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#  在多对多关系表中 添加了 多条关联记录</span></span><br><span class="line">OrderMedicine.objects.bulk_create(batch)</span><br></pre></td></tr></table></figure></p><h2 id="ORM外键关联"><a href="#ORM外键关联" class="headerlink" title="ORM外键关联"></a>ORM外键关联</h2><p>编写listorder 函数用来处理 列出订单请求<br>前端要求返回订单记录数据格式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">id</span>: <span class="number">1</span>, </span><br><span class="line">        name: <span class="string">&quot;华山医院订单001&quot;</span>, </span><br><span class="line">        create_date: <span class="string">&quot;2018-12-26T14:10:15.419Z&quot;</span>,</span><br><span class="line">        customer_name: <span class="string">&quot;华山医院&quot;</span>,</span><br><span class="line">        medicines_name: <span class="string">&quot;青霉素&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">id</span>: <span class="number">2</span>, </span><br><span class="line">        name: <span class="string">&quot;华山医院订单002&quot;</span>, </span><br><span class="line">        create_date: <span class="string">&quot;2018-12-27T14:10:37.208Z&quot;</span>,</span><br><span class="line">        customer_name: <span class="string">&quot;华山医院&quot;</span>,</span><br><span class="line">        medicines_name: <span class="string">&quot;青霉素 | 红霉素 &quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>其中 ‘id’,’name’,’create_date’ 这些字段的内容获取很简单，order表中就有这些字段，’customer_name’ 和 ‘medicines_name’ 这两个字段的值怎么获取呢？ 因为 订单对应的客户名字 和 药品的名字 都不在 Order 表中啊。<br>Order 这个Model 中 有 ‘customer’ 字段 ， 它外键关联了 Customer 表中的一个 记录，这个记录里面 的 name字段 就是我们要取的字段。<br>取 外键关联的表记录的字段值，在Django中很简单，可以直接通过 外键字段 后面加 两个下划线 加 关联字段名的方式 来获取。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">listorder</span>(<span class="params">request</span>):</span><br><span class="line">    qs = Order.objects\</span><br><span class="line">            .values(</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;create_date&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;customer__name&#x27;</span>,</span><br><span class="line">                <span class="comment"># 两个下划线，表示取medicines 关联的表中的name字段的值</span></span><br><span class="line">                <span class="comment"># 如果有多个，就会产生多条记录</span></span><br><span class="line">                <span class="string">&#x27;medicines__name&#x27;</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将 QuerySet 对象 转化为 list 类型</span></span><br><span class="line">    retlist = <span class="built_in">list</span>(qs)</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;retlist&#x27;</span>: retlist&#125;)</span><br></pre></td></tr></table></figure><br>首先，第一个问题， 接口文档需要的名字是 ‘customer_name’ 和 ‘medicines_name’。 里面只有一个下划线， 而我们这里却产生了 两个下划线。<br>使用 annotate 方法将获取的字段值进行重命名，像下面这样<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listorder</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 返回一个 QuerySet 对象 ，包含所有的表记录</span></span><br><span class="line">    qs = Order.objects\</span><br><span class="line">            .annotate(</span><br><span class="line">                customer_name=F(<span class="string">&#x27;customer__name&#x27;</span>),</span><br><span class="line">                medicines_name=F(<span class="string">&#x27;medicines__name&#x27;</span>)</span><br><span class="line">            )\</span><br><span class="line">            .values(</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;create_date&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;customer_name&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;medicines_name&#x27;</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将 QuerySet 对象 转化为 list 类型</span></span><br><span class="line">    retlist = <span class="built_in">list</span>(qs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;retlist&#x27;</span>: retlist&#125;)</span><br></pre></td></tr></table></figure><br>第二个问题，如果一个订单里面有多个药品，就会产生多条记录， 这不是我们要的。<br>根据接口，一个订单里面的多个药品， 用 竖线 隔开。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">listorder</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 返回一个 QuerySet 对象 ，包含所有的表记录</span></span><br><span class="line">    qs = Order.objects\</span><br><span class="line">            .annotate(</span><br><span class="line">                customer_name=F(<span class="string">&#x27;customer__name&#x27;</span>),</span><br><span class="line">                medicines_name=F(<span class="string">&#x27;medicines__name&#x27;</span>)</span><br><span class="line">            )\</span><br><span class="line">            .values(</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;create_date&#x27;</span>,<span class="string">&#x27;customer_name&#x27;</span>,<span class="string">&#x27;medicines_name&#x27;</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将 QuerySet 对象 转化为 list 类型</span></span><br><span class="line">    retlist = <span class="built_in">list</span>(qs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可能有 ID相同，药品不同的订单记录， 需要合并</span></span><br><span class="line">    newlist = []</span><br><span class="line">    id2order = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> one <span class="keyword">in</span> retlist:</span><br><span class="line">        orderid = one[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> orderid <span class="keyword">not</span> <span class="keyword">in</span> id2order:</span><br><span class="line">            newlist.append(one)</span><br><span class="line">            id2order[orderid] = one</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            id2order[orderid][<span class="string">&#x27;medicines_name&#x27;</span>] += <span class="string">&#x27; | &#x27;</span> + one[<span class="string">&#x27;medicines_name&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;retlist&#x27;</span>: newlist&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="分页与过滤"><a href="#分页与过滤" class="headerlink" title="分页与过滤"></a>分页与过滤</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加对分页的支持</span></span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator, EmptyPage</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listmedicine</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 返回一个 QuerySet 对象 ，包含所有的表记录</span></span><br><span class="line">        qs = Medicine.objects.values()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 要获取的第几页</span></span><br><span class="line">        pagenum = request.params[<span class="string">&#x27;pagenum&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每页要显示多少条记录</span></span><br><span class="line">        pagesize = request.params[<span class="string">&#x27;pagesize&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回一个 QuerySet 对象 ，包含所有的表记录</span></span><br><span class="line">        qs = Medicine.objects.values()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用分页对象，设定每页多少条记录</span></span><br><span class="line">        pgnt = Paginator(qs, pagesize)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从数据库中读取数据，指定读取其中第几页</span></span><br><span class="line">        page = pgnt.page(pagenum)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将 QuerySet 对象 转化为 list 类型</span></span><br><span class="line">        retlist = <span class="built_in">list</span>(page)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># total指定了 一共有多少数据</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;retlist&#x27;</span>: retlist,<span class="string">&#x27;total&#x27;</span>: pgnt.count&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> EmptyPage:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;retlist&#x27;</span>: [], <span class="string">&#x27;total&#x27;</span>: <span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">2</span>,  <span class="string">&#x27;msg&#x27;</span>: <span class="string">f&#x27;未知错误\n<span class="subst">&#123;traceback.format_exc()&#125;</span>&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><h3 id="多条件-且关系"><a href="#多条件-且关系" class="headerlink" title="多条件 且关系"></a>多条件 且关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">qs.<span class="built_in">filter</span>(name__contains=<span class="string">&#x27;乳酸&#x27;</span>)</span><br><span class="line">转化为的sql条件</span><br><span class="line">WHERE name LIKE <span class="string">&#x27;%乳酸%&#x27;</span></span><br><span class="line"></span><br><span class="line">qs.<span class="built_in">filter</span>(name__contains=<span class="string">&#x27;乳酸&#x27;</span>,name__contains=<span class="string">&#x27;注射液&#x27;</span>)</span><br><span class="line">qs.<span class="built_in">filter</span>(name__contains=<span class="string">&#x27;乳酸&#x27;</span>).<span class="built_in">filter</span>(name__contains=<span class="string">&#x27;注射液&#x27;</span>)</span><br><span class="line">WHERE name LIKE <span class="string">&#x27;%乳酸%&#x27;</span> AND name LIKE <span class="string">&#x27;%注射液%&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="多条件-或关系"><a href="#多条件-或关系" class="headerlink" title="多条件 或关系"></a>多条件 或关系</h3><p>可以使用 Django 里面提供 的 Q 对象 。<br>Q 对象 的初始化参数里面 携带 和 filter 语法一致的 条件，比如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">qs.<span class="built_in">filter</span>(Q(name__contains=<span class="string">&#x27;乳酸&#x27;</span>))</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">qs.<span class="built_in">filter</span>( Q(name__contains=<span class="string">&#x27;乳酸&#x27;</span>) | Q(name__contains=<span class="string">&#x27;注射液&#x27;</span>))</span><br><span class="line"></span><br><span class="line">WHERE name LIKE <span class="string">&#x27;%乳酸%&#x27;</span> OR name LIKE <span class="string">&#x27;%注射液%&#x27;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">qs.<span class="built_in">filter</span>( Q(name__contains=<span class="string">&#x27;乳酸&#x27;</span>) &amp; Q(name__contains=<span class="string">&#x27;注射液&#x27;</span>))</span><br><span class="line">WHERE name LIKE <span class="string">&#x27;%乳酸%&#x27;</span> AND name LIKE <span class="string">&#x27;%注射液%&#x27;</span></span><br></pre></td></tr></table></figure></p><h2 id="自定义用户表"><a href="#自定义用户表" class="headerlink" title="自定义用户表"></a>自定义用户表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.hashers <span class="keyword">import</span> make_password,check_password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过 命令 python  manage.py createsuperuser 来创建超级管理员</span></span><br><span class="line"><span class="comment"># 就是在这User表中添加记录</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    <span class="built_in">id</span> = models.BigAutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户类型  </span></span><br><span class="line">    <span class="comment"># 1： 超管 | 1000： 普通管理员  | 2000：学生  |  3000： 老师 </span></span><br><span class="line">    usertype = models.PositiveIntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 真实姓名</span></span><br><span class="line">    realname = models.CharField(max_length=<span class="number">30</span>, db_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 学号</span></span><br><span class="line">    studentno = models.CharField(</span><br><span class="line">        max_length=<span class="number">10</span>, </span><br><span class="line">        db_index=<span class="literal">True</span>, </span><br><span class="line">        null=<span class="literal">True</span>, blank=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 备注描述</span></span><br><span class="line">    desc = models.CharField(max_length=<span class="number">500</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    REQUIRED_FIELDS = [<span class="string">&#x27;usertype&#x27;</span>, <span class="string">&#x27;realname&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;by_user&quot;</span></span><br></pre></td></tr></table></figure><p>一种推荐的方式是：通过继承 contrib.auth.models 里面的 AbstractUser 类的方式</p><p>然后，你需要告诉Django，使用这个表作为 系统的 user表。<br> 在 settings.py 中，添加如下设置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AUTH_USER_MODEL = <span class="string">&#x27;myapp.User&#x27;</span></span><br></pre></td></tr></table></figure><br>其中 myapp 改为你的 User 定义 所在的 django app 名称<br>可能你会奇怪，我们为什么不能重新完全的重定义 User 表，一定要继承 contrib.auth.models 里面的 AbstractUser 类呢？<br>那是因为 Django内置的 认证 、权限 、 Session 机制 和 auth 模块深度绑定了，如果你需要使用 这些机制提供的方法，就不能抛弃 auth 里面的 user 表。<br>如果你不打算使用 Django内置的 认证 或者 Session 机制， 完全可以自己定义一张 User表。</p><p>用户表的password<br>Django 的密码不是明文存储的， 有好几种方式。可以使用 Django 库提供的方法 产生 password 字段值（通常是hash处理过）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.hashers <span class="keyword">import</span> make_password,check_password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一条记录</span></span><br><span class="line">user = User.objects.create(</span><br><span class="line">    username  = username,</span><br><span class="line">    <span class="comment"># 使用 make_password 函数 产生password字段</span></span><br><span class="line">    password  = make_password(data[<span class="string">&#x27;password&#x27;</span>]),</span><br><span class="line">    <span class="comment"># 其他字段...)</span></span><br></pre></td></tr></table></figure><br>使用 Django auth 库里面的 authenticate 方法 就包含了 校验用户名、密码的过程，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate, login, logout</span><br><span class="line"><span class="comment"># 使用 Django auth 库里面的 方法校验用户名、密码</span></span><br><span class="line">user = authenticate(username=userName, password=passWord)</span><br></pre></td></tr></table></figure><p>数据操作移到models中<br>为了实现后端系统的功能合理划分，建议把业务逻辑放在 view 代码中，而把数据底层处理放在 models<br>这样， 处理HTTP请求的 view代码，只需要调用 models中的方法即可。<br>处理 添加用户的view<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">adduser</span>(<span class="params">request</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从请求消息中 获取要添加客户的信息</span></span><br><span class="line">    <span class="comment"># 并且插入到数据库中</span></span><br><span class="line"></span><br><span class="line">    data = request.param_dict[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 直接调用 models中的添加 用户 的代码    </span></span><br><span class="line">    ret = User.add(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  JsonResponse(ret)</span><br></pre></td></tr></table></figure><br>models中 真正实现添加功能<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    <span class="built_in">id</span> = models.BigAutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    usertype = models.PositiveIntegerField()</span><br><span class="line">    realname = models.CharField(max_length=<span class="number">30</span>, db_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        db_table = <span class="string">&quot;cimp_user&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 直接在Model中用静态方法定义数据操作</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">data,usertype</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            username = data[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> User.objects.<span class="built_in">filter</span>(username=username).exists():</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">f&#x27;登录名 <span class="subst">&#123;username&#125;</span> 已经存在&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">            user = User.objects.create(</span><br><span class="line">                    username  = username,</span><br><span class="line">                    password  = make_password(data[<span class="string">&#x27;password&#x27;</span>]),</span><br><span class="line">                    usertype  = usertype,</span><br><span class="line">                    realname  = data[<span class="string">&#x27;realname&#x27;</span>],</span><br><span class="line">                    studentno = data[<span class="string">&#x27;studentno&#x27;</span>],</span><br><span class="line">                    desc      = data[<span class="string">&#x27;desc&#x27;</span>]</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&#x27;ret&#x27;</span>: <span class="number">0</span>,<span class="string">&#x27;id&#x27;</span>: user.<span class="built_in">id</span>&#125;</span><br></pre></td></tr></table></figure></p><h2 id="函数定义的参数-request"><a href="#函数定义的参数-request" class="headerlink" title="函数定义的参数 request"></a>函数定义的参数 request</h2><p>Django 框架在 url 路由匹配到函数后， 调用函数时，会传入 一个 HttpRequest 对象给参数变量 request，该对象里面 包含了请求的数据信息。<br>HTTP 的 Get 请求url里面的参数（术语叫 querystring 里面的参数）， 可以通过 HttpRequest对象的 GET 属性获取。这是一个类似dict的对象。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ph =  request.GET.get(<span class="string">&#x27;phonenumber&#x27;</span>,<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><br>第二个参数传入 None 表示，如果没有 phonenumber 参数在 querystring中 ，就会返回 None。</p><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据挖掘 数据获取</title>
      <link href="/2024/04/09/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B9%8B%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96/"/>
      <url>/2024/04/09/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E4%B9%8B%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h2 id="1-requests"><a href="#1-requests" class="headerlink" title="1 requests"></a>1 requests</h2><h3 id="1-1requests-属性"><a href="#1-1requests-属性" class="headerlink" title="1.1requests.属性"></a>1.1requests.属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(url)</span><br><span class="line"><span class="comment"># 网页响应内容的字符串形式</span></span><br><span class="line">r.text</span><br><span class="line"><span class="comment"># 网页响应内容的二进制形式</span></span><br><span class="line">r.content</span><br><span class="line"><span class="comment"># 猜测网页响应内容的编码方式</span></span><br><span class="line">r.encoding</span><br><span class="line"><span class="comment"># 根据网页内容分析出内容的编码方式</span></span><br><span class="line">r.apparent_encoding</span><br><span class="line"><span class="comment"># 状态码 200代表连接成功，404表示失败</span></span><br><span class="line">r.status_code</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2-requests-实例"><a href="#1-2-requests-实例" class="headerlink" title="1.2 requests 实例"></a>1.2 requests 实例</h3><p>实例1 爬取单张图片<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;https://fileshare.tangwan16.cn/image/about.jpg&quot;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">data = r.content</span><br><span class="line">fobj = <span class="built_in">open</span>(<span class="string">&quot;result.jpg&quot;</span>,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">fobj.write(data)</span><br><span class="line">fobj.close()</span><br></pre></td></tr></table></figure><br>实例2 爬取网页<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://www.people.com.cn&quot;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">data = r.text</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;paper.txt&quot;</span>, <span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> fobj:</span><br><span class="line">    fobj.write(data)</span><br></pre></td></tr></table></figure></p><h2 id="2-re"><a href="#2-re" class="headerlink" title="2 re"></a>2 re</h2><h3 id="2-1-re库的内置函数"><a href="#2-1-re库的内置函数" class="headerlink" title="2.1 re库的内置函数"></a>2.1 re库的内置函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">string = <span class="string">&quot;I love it. It loves me.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于从起始位置匹配，若起始位置字符不是匹配内容返回none</span></span><br><span class="line">re.<span class="keyword">match</span>(<span class="string">&quot;it&quot;</span>,string)</span><br><span class="line"><span class="comment"># 搜索整个字符串，返回第一次出现的位置</span></span><br><span class="line">re.search(<span class="string">&quot;it&quot;</span>,string)</span><br><span class="line"><span class="comment"># 以列表形式返回全部能匹配的字符串</span></span><br><span class="line">re.findall(<span class="string">&quot;it&quot;</span>,string)</span><br><span class="line"><span class="comment"># 创建一个正则表达式对象，可以配合正则表达式修饰符使用</span></span><br><span class="line">re.<span class="built_in">compile</span>(<span class="string">&quot;it&quot;</span>，)</span><br></pre></td></tr></table></figure><h3 id="2-2-正则表达式修饰符含义"><a href="#2-2-正则表达式修饰符含义" class="headerlink" title="2.2 正则表达式修饰符含义"></a>2.2 正则表达式修饰符含义</h3><p><img src="https://picmd.tangwan16.cn/posts/python/re与requests/正则表达式.png" alt=""></p><h3 id="2-3-字符串匹配表"><a href="#2-3-字符串匹配表" class="headerlink" title="2.3 字符串匹配表"></a>2.3 字符串匹配表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配一个数字字符</span></span><br><span class="line">\d </span><br><span class="line"><span class="comment"># 匹配一个字母、数字及下划线字符</span></span><br><span class="line">\W</span><br><span class="line"><span class="comment"># 匹配一个空白字符</span></span><br><span class="line">\s</span><br><span class="line"><span class="comment"># 匹配一个任意字符，换行符除外</span></span><br><span class="line">.</span><br><span class="line"><span class="comment"># 匹配一个换行符</span></span><br><span class="line">\n</span><br><span class="line"><span class="comment"># 匹配一个制表符</span></span><br><span class="line">\t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配前面的字符0次或n次</span></span><br><span class="line">*</span><br><span class="line"><span class="comment"># 匹配前面的字符1次或n次</span></span><br><span class="line">+</span><br><span class="line"><span class="comment"># 匹配前面的字符0次或1次</span></span><br><span class="line">?</span><br><span class="line"><span class="comment"># 匹配括号内表达式，也表示一个组</span></span><br><span class="line">()</span><br><span class="line"><span class="comment"># 匹配m-n个字符</span></span><br><span class="line">&#123;m,n&#125;</span><br><span class="line"><span class="comment"># 表示字符范围,方括号中只能取一个</span></span><br><span class="line">[]</span><br><span class="line"><span class="comment"># 表示行开头，^\d表示必须以数字开头 </span></span><br><span class="line">^</span><br><span class="line"><span class="comment"># 表示行结束,\d$表示必须以数字结束</span></span><br><span class="line">$</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合使用实例,匹配以e结尾不超过4个长度的字符</span></span><br><span class="line">re.findall(<span class="string">&quot;\w&#123;1,4&#125;e&quot;</span>,string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取html中src中连接</span></span><br><span class="line">s=<span class="string">&#x27;&#x27;&#x27;&lt;img src=&quot;C:\\XH.jpg&quot; width=&quot;300&quot;/&gt;</span></span><br><span class="line"><span class="string">&lt;img src=&quot;C:\\FX.jpg&quot; width=&quot;300&quot;/&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 贪婪模式，尽可能多的匹配字符</span></span><br><span class="line">result5 = re.findall(<span class="string">&#x27;&lt;img src=&quot;(.*)&quot;&#x27;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(result5) [<span class="string">&#x27;C:\\XH.jpg&quot; width=&quot;300&#x27;</span>, <span class="string">&#x27;C:\\FX.jpg&quot; width=&quot;300&#x27;</span>]</span><br><span class="line"><span class="comment"># 非贪婪模式，尽可能少的匹配字符</span></span><br><span class="line">result6 = re.findall(<span class="string">&#x27;&lt;img src=&quot;(.*?)&quot;&#x27;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(result6) [<span class="string">&#x27;C:\\XH.jpg&#x27;</span>, <span class="string">&#x27;C:\\FX.jpg&#x27;</span>]</span><br><span class="line">result7 = re.findall(<span class="string">&#x27;&lt;img src=&quot;(.*?)&quot; width=&quot;(.*?)&quot;&#x27;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(result7) [<span class="string">&#x27;C:\\XH.jpg&#x27;</span>, <span class="string">&#x27;C:\\FX.jpg&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="2-4-实例"><a href="#2-4-实例" class="headerlink" title="2.4 实例"></a>2.4 实例</h3><p>实例1 爬取人民网连接和标题<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re,requests</span><br><span class="line">url = <span class="string">&quot;http://www.people.com.cn&quot;</span></span><br><span class="line">html = requests.get(url)</span><br><span class="line">html.encoding = html.apparent_encoding</span><br><span class="line">data = html.text</span><br><span class="line"></span><br><span class="line">res = re.findall(<span class="string">&#x27;&lt;li&gt;&lt;a href=&quot;(.*?)&quot; target=&quot;_blank&quot;&gt;(.*?)&lt;/a&gt;&lt;/li&gt;&#x27;</span>,data)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">fobj = <span class="built_in">open</span>(<span class="string">&#x27;people.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> res:</span><br><span class="line">    fobj.write(line[<span class="number">0</span>]+<span class="string">&quot;,&quot;</span>+line[<span class="number">1</span>]+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">fobj.close()</span><br></pre></td></tr></table></figure><br>实例2 爬取新闻图片素材<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re,requests</span><br><span class="line">url = <span class="string">&quot;http://www.people.com.cn&quot;</span></span><br><span class="line">html = requests.get(url)</span><br><span class="line">html.encoding = html.apparent_encoding</span><br><span class="line">data = html.text</span><br><span class="line"></span><br><span class="line">res = re.findall(<span class="string">&#x27;&lt;img src=&quot;(.*?.jpg)&quot;&#x27;</span>,data)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> res:</span><br><span class="line">    html = requests.get(url+img)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./result/&quot;</span>+<span class="built_in">str</span>(x)+<span class="string">&quot;.jpg&quot;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fobj:</span><br><span class="line">        fobj.write(html.content)</span><br><span class="line">    x+=<span class="number">1</span></span><br></pre></td></tr></table></figure></p><h2 id="3-数据清洗常见方法"><a href="#3-数据清洗常见方法" class="headerlink" title="3 数据清洗常见方法"></a>3 数据清洗常见方法</h2><h3 id="3-1-用strip-函数删除空格及换行符等非相关符号"><a href="#3-1-用strip-函数删除空格及换行符等非相关符号" class="headerlink" title="3.1 用strip()函数删除空格及换行符等非相关符号"></a>3.1 用strip()函数删除空格及换行符等非相关符号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res=<span class="string">&#x27; 华能信托本年实现利润32.05亿元 &#x27;</span></span><br><span class="line">res = res.strip()</span><br><span class="line"><span class="built_in">print</span>(res) 华能信托本年实现利润<span class="number">32.05</span>亿元</span><br></pre></td></tr></table></figure><h3 id="3-2-用split-函数截取需求的内容"><a href="#3-2-用split-函数截取需求的内容" class="headerlink" title="3.2 用split()函数截取需求的内容"></a>3.2 用split()函数截取需求的内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date=<span class="string">&#x27;2019-01-20 10:10:10&#x27;</span></span><br><span class="line">date = date.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(date) <span class="number">2019</span>-01-<span class="number">20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-3-用sub-函数进行内容替换"><a href="#3-3-用sub-函数进行内容替换" class="headerlink" title="3.3 用sub()函数进行内容替换"></a>3.3 用sub()函数进行内容替换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">title=<span class="string">&#x27;阿里&lt;em&gt;巴巴&lt;/em&gt;人工智能再发力&#x27;</span></span><br><span class="line">title = re.sub(<span class="string">&#x27;&lt;(.*?)&gt;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,title)</span><br><span class="line"><span class="built_in">print</span>(title) 阿里巴巴人工智能再发力</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朴素贝叶斯</title>
      <link href="/2024/04/08/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
      <url>/2024/04/08/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="1-贝叶斯方法"><a href="#1-贝叶斯方法" class="headerlink" title="1 贝叶斯方法"></a>1 贝叶斯方法</h2><h3 id="1-1背景知识"><a href="#1-1背景知识" class="headerlink" title="1.1背景知识"></a>1.1背景知识</h3><h4 id="了解贝叶斯决策论"><a href="#了解贝叶斯决策论" class="headerlink" title="了解贝叶斯决策论"></a>了解贝叶斯决策论</h4><p>贝叶斯决策论更多地从观察者的角度出发,事件的随机性是由观察者掌握的信息不够充分造成的,观察者所掌握的信息充分程度将影响观察者对于事件的认知<br>贝叶斯决策理论的核心思想是 ：选择具有最高发生概率的事件作为最优决策，新的数据点被归类到了概率较高的那一个类别</p><h4 id="贝叶斯分类：以贝叶斯定理为基础的分类算法"><a href="#贝叶斯分类：以贝叶斯定理为基础的分类算法" class="headerlink" title="贝叶斯分类：以贝叶斯定理为基础的分类算法"></a>贝叶斯分类：以贝叶斯定理为基础的分类算法</h4><h4 id="先验概率：𝑃-𝑌"><a href="#先验概率：𝑃-𝑌" class="headerlink" title="先验概率：𝑃(𝑌)"></a>先验概率：𝑃(𝑌)</h4><p>根据以往经验和分析得到的概率。我们用𝑃(𝑌)来代表在没有训练数据前假设𝑌拥有的初始概率 </p><h4 id="后验概率：𝑃-𝑌-𝑋"><a href="#后验概率：𝑃-𝑌-𝑋" class="headerlink" title="后验概率：𝑃(𝑌|𝑋)"></a>后验概率：𝑃(𝑌|𝑋)</h4><p>根据已经发生的事件来分析得到的概率。反映了在看到训练数据𝑋后𝑌成立的置信度<br>联合概率：𝑋与𝑌的联合概率表示为𝑃(𝑋,𝑌) 、𝑃(𝑋𝑌) 或𝑃(𝑋 ∩ 𝑌)<br>假设𝑋和𝑌都服从正态分布，那么𝑃(𝑋 &lt; 5, 𝑌 &lt; 0)就是一个联合概率，表示 𝑋 &lt; 5, 𝑌 &lt; 0两个条件同时成立的概率。表示两个事件共同发生的概率。 </p><h3 id="1-2贝叶斯公式"><a href="#1-2贝叶斯公式" class="headerlink" title="1.2贝叶斯公式"></a>1.2贝叶斯公式</h3><p><img src="https://picmd.tangwan16.cn/posts/机器学习/朴素贝叶斯/贝叶斯公式.png" alt=""></p><h2 id="2-朴素贝叶斯原理"><a href="#2-朴素贝叶斯原理" class="headerlink" title="2 朴素贝叶斯原理"></a>2 朴素贝叶斯原理</h2><h3 id="2-1-判别模型和生成模型"><a href="#2-1-判别模型和生成模型" class="headerlink" title="2.1 判别模型和生成模型"></a>2.1 判别模型和生成模型</h3><p>监督学习方法又分：生成方法（Generative approach）和判别方法（Discriminative approach）<br>所学到的模型分别称为：生成模型（Generative Model）和判别模型（Discriminative Model)<br> <img src="https://picmd.tangwan16.cn/posts/机器学习/朴素贝叶斯/判别模型与生成模型.png" alt=""></p><h3 id="2-2基本原理"><a href="#2-2基本原理" class="headerlink" title="2.2基本原理"></a>2.2基本原理</h3><p>  朴素贝叶斯法是典型的生成学习方法<br> 朴素贝叶斯方法在传统的贝叶斯方法上作出基本假设:条件独立性<br>条件独立性假设：<br><img src="https://picmd.tangwan16.cn/posts/机器学习/朴素贝叶斯/条件独立性.png" alt=""><br> 优点：高效、且易于实现，缺点：对于属性特征之间作出相互独立的假设，导致分类性能不一定很高<br> 朴素贝叶斯法利用贝叶斯定理与学到的联合概率模型进行分类预测<br><img src="https://picmd.tangwan16.cn/posts/机器学习/朴素贝叶斯/后验概率最大.png" alt=""><br>贝叶斯公式：<br><img src="https://picmd.tangwan16.cn/posts/机器学习/朴素贝叶斯/贝叶斯公式2.2.png" alt=""><br>根据全概率公式，以下公式对于所有贝叶斯定理都成立，包括朴素贝叶斯<br><img src="https://picmd.tangwan16.cn/posts/机器学习/朴素贝叶斯/贝叶斯公式2.2_2.png" alt=""><br>根据条件独立假设：以下公式只对朴素贝叶斯成立<br><img src="https://picmd.tangwan16.cn/posts/机器学习/朴素贝叶斯/2.2_3.png" alt=""></p><h2 id="3-朴素贝叶斯案例"><a href="#3-朴素贝叶斯案例" class="headerlink" title="3 朴素贝叶斯案例"></a>3 朴素贝叶斯案例</h2><p><img src="https://picmd.tangwan16.cn/posts/机器学习/朴素贝叶斯/3_1.png" alt=""><br> <img src="https://picmd.tangwan16.cn/posts/机器学习/朴素贝叶斯/3_2.png" alt=""><br> <img src="https://picmd.tangwan16.cn/posts/机器学习/朴素贝叶斯/3_3.png" alt=""><br><img src="https://picmd.tangwan16.cn/posts/机器学习/朴素贝叶斯/3_4.png" alt=""><br>采用拉普拉斯平滑方法：为每个计数加1，因此它永远不会为零。为了平衡这一点，我们将可能单词的数量添加到除数中，因此计算结果永远不会大于1<br> <img src="https://picmd.tangwan16.cn/posts/机器学习/朴素贝叶斯/3_5.png" alt=""><br>拉普拉斯平滑方法：<br>是一种用于平滑分类数据的技术。引入拉普拉斯平滑法来解决零概率问题,通过应用此方法,先验概率和条件概率可以写为 ：<br><img src="https://picmd.tangwan16.cn/posts/机器学习/朴素贝叶斯/3_6.png" alt=""><br>加入拉普拉斯平滑之后，避免了出现概率为0的情况，又保证了每个值都在0到1的范围内，又保证了最终和为1的概率性质。<br> <img src="https://picmd.tangwan16.cn/posts/机器学习/朴素贝叶斯/3_7.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 朴素贝叶斯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Butterfly</title>
      <link href="/2024/03/23/Hexo+Butterfly/"/>
      <url>/2024/03/23/Hexo+Butterfly/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Butterfly"><a href="#Hexo-Butterfly" class="headerlink" title="Hexo+Butterfly"></a>Hexo+Butterfly</h1>]]></content>
      
      
      <categories>
          
          <category> 建站教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo+Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pinia的部署与使用</title>
      <link href="/2024/03/23/pinia/"/>
      <url>/2024/03/23/pinia/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装pinia到项目中"><a href="#1-安装pinia到项目中" class="headerlink" title="1 安装pinia到项目中"></a>1 安装pinia到项目中</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add pinia</span><br><span class="line">或 </span><br><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; createPinia &#125; from &#x27;pinia&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">const pinia = createPinia()</span><br><span class="line">const app = createApp(App)</span><br><span class="line">app.use(pinia).mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h2 id="store的定义与使用"><a href="#store的定义与使用" class="headerlink" title="store的定义与使用"></a>store的定义与使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">store/counter.js</span><br><span class="line">defineStore(仓库的唯一标识，()=&gt;&#123;&#125;)</span><br><span class="line"></span><br><span class="line">export const userCounterStore =defineStore(&#x27;counter&#x27;,()=&gt;&#123;</span><br><span class="line">//声明数据state使用ref()</span><br><span class="line">const count =ref(100)</span><br><span class="line">//声明操作数据的方法（普通函数）</span><br><span class="line">const addCount =()=&gt;count.value++</span><br><span class="line">const subCount =()=&gt;count.value--</span><br><span class="line">//声明基于数据派生的计算属性getters使用computed</span><br><span class="line">const doubleCount =computed(()=&gt;count.value*2)</span><br><span class="line">return &#123;</span><br><span class="line">count,</span><br><span class="line">addCount,</span><br><span class="line">subCount,</span><br><span class="line">doubleCount</span><br><span class="line">&#125;</span><br><span class="line">//异步请求</span><br><span class="line">const channels = ref([])</span><br><span class="line">const getList = async ()=&gt;&#123;</span><br><span class="line">const data = await axios.get(&#x27;http://geek.itheima.net/v1_0/channels&#x27;)</span><br><span class="line">channels.value =data.data.data.channels</span><br><span class="line">console.log(channels.value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="数据的解构同时保持数据-storeToRefs"><a href="#数据的解构同时保持数据-storeToRefs" class="headerlink" title="数据的解构同时保持数据 storeToRefs"></a>数据的解构同时保持数据 storeToRefs</h2><p>//响应式丢失，视图不再更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//响应式丢失，视图不再更新</span><br><span class="line">const &#123;count,doubleCount &#125; = counterStore</span><br><span class="line">//保持数据响应式</span><br><span class="line">const &#123;count,doubleCount &#125; =storeToRefs(counterStore)</span><br><span class="line">//函数结构不需要的使用storeToRefs</span><br></pre></td></tr></table></figure><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>官方文档：<a href="https://prazdevs.github.io/pinia-plugin-persistedstate/zh/">https://prazdevs.github.io/pinia-plugin-persistedstate/zh/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add pinia-plugin-persistedstate</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createPinia &#125; from &#x27;pinia&#x27;</span><br><span class="line">import piniaPluginPersistedstate from &#x27;pinia-plugin-persistedstate&#x27;</span><br><span class="line"></span><br><span class="line">const pinia = createPinia()</span><br><span class="line">pinia.use(piniaPluginPersistedstate)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export const useCounterStore = defineStore(&#x27;counter&#x27;, () =&gt; &#123;</span><br><span class="line">  ...</span><br><span class="line">  return &#123;</span><br><span class="line">    count,</span><br><span class="line">    doubleCount,</span><br><span class="line">    increment</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  persist: true</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">persist: &#123;</span><br><span class="line">  key: &#x27;my-custom-key&#x27;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">export const useStore = defineStore(&#x27;store&#x27;, &#123;</span><br><span class="line">  state: () =&gt; (&#123;</span><br><span class="line">    save: &#123;</span><br><span class="line">      me: &#x27;saved&#x27;,</span><br><span class="line">      notMe: &#x27;not-saved&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    saveMeToo: &#x27;saved&#x27;,</span><br><span class="line">  &#125;),</span><br><span class="line">  persist: &#123;</span><br><span class="line">    paths: [&#x27;save.me&#x27;, &#x27;saveMeToo&#x27;],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pinia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot</title>
      <link href="/2024/03/19/springboot/"/>
      <url>/2024/03/19/springboot/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h1><p>测试服务器链接git是否成功</p>]]></content>
      
      
      <categories>
          
          <category> 后端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/2024/03/19/vue3/"/>
      <url>/2024/03/19/vue3/</url>
      
        <content type="html"><![CDATA[<h1 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h1>]]></content>
      
      
      <categories>
          
          <category> 前端学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么逻辑回归不用MSE而用交叉熵</title>
      <link href="/2024/03/12/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%B8%8D%E7%94%A8MSE%E8%80%8C%E7%94%A8%E4%BA%A4%E5%8F%89%E7%86%B5/"/>
      <url>/2024/03/12/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%B8%8D%E7%94%A8MSE%E8%80%8C%E7%94%A8%E4%BA%A4%E5%8F%89%E7%86%B5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>桑榆非晚</title>
      <link href="/2024/03/12/%E6%A1%91%E6%A6%86%E9%9D%9E%E6%99%9A/"/>
      <url>/2024/03/12/%E6%A1%91%E6%A6%86%E9%9D%9E%E6%99%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="莫道桑榆晚，为霞尚满天"><a href="#莫道桑榆晚，为霞尚满天" class="headerlink" title="莫道桑榆晚，为霞尚满天"></a>莫道桑榆晚，为霞尚满天</h1><p>测试git是否成功5.8<br><img src="https://picmd.tangwan16.cn/posts/编程学习/第三章_哈希表_part02/1_1.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 生活趣闻 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
